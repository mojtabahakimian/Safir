@using Safir.Shared.Models.Automation
@using Safir.Shared.Interfaces
@using MudBlazor
@using System.ComponentModel.DataAnnotations
@using System.Globalization // برای PersianCalendar


@inject IAutomationApiService AutomationService
@inject ISnackbar Snackbar

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">رویدادهای وظیفه @TaskId</MudText>
    </TitleContent>
    <DialogContent>
        @* --- جدول نمایش رویدادها --- *@
        <MudTable Items="@_events" Dense="true" Hover="true" Striped="true" Class="mb-4" Style="max-height: 300px; overflow-y: auto;" Loading="@_isLoadingEvents" LoadingProgressColor="Color.Info">
            <HeaderContent>
                <MudTh>#</MudTh>
                <MudTh>شرح رویداد</MudTh>
                <MudTh>کاربر</MudTh>
                <MudTh>تاریخ ثبت</MudTh>
                <MudTh>ضمیمه</MudTh> @* NEW: Header for attachment column *@
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="#">@context.IDD</MudTd>
                <MudTd DataLabel="شرح رویداد" Style="white-space: pre-wrap;">@context.EVENTS</MudTd>
                <MudTd DataLabel="کاربر">@context.USERNAME</MudTd>
                <MudTd DataLabel="تاریخ ثبت">
                    @FormatShamsiDateFromDateTime(context.STDATE)
                </MudTd>
                @* NEW: Display attachment info and download button *@
                <MudTd DataLabel="ضمیمه">
                    @if (!string.IsNullOrEmpty(context.AttachedFileType))
                    {
                        <MudButton Size="Size.Small" Variant="Variant.Outlined" Color="Color.Info"
                               OnClick="@(() => DownloadAttachment(context.IDNUM, context.IDD, context.AttachedFileName))"
                               EndIcon="@Icons.Material.Filled.Attachment"
                               Title="@context.AttachedFileName">
                            مشاهده
                        </MudButton>
                    }
                    else
                    {
                        <MudText>-</MudText>
                    }
                </MudTd>
                @* ------------------------------------------------ *@
            </RowTemplate>
            <NoRecordsContent>
                <MudText>رویدادی برای این وظیفه ثبت نشده است.</MudText>
            </NoRecordsContent>
            <LoadingContent>
                <MudText>در حال بارگذاری رویدادها...</MudText>
            </LoadingContent>
        </MudTable>

        <MudDivider Class="my-4" />

        @* --- فرم ثبت رویداد جدید --- *@
        <MudText Typo="Typo.subtitle1" GutterBottom="true">ثبت رویداد جدید</MudText>
        <EditForm Model="@_newEvent" OnValidSubmit="SaveNewEventAsync">
            <DataAnnotationsValidator />
            <MudForm @ref="_newEventForm">
                <MudTextField Label="شرح رویداد"
                              @bind-Value="_newEvent.EVENTS"
                              For="@(() => _newEvent.EVENTS)"
                              Lines="3"
                              Variant="Variant.Outlined"
                              Required="true"
                              RequiredError="شرح رویداد الزامی است." />

                @* NEW: Input for file attachment *@
                <MudItem Class="my-4">
                    <MudText Typo="Typo.body2" Class="mb-2">فایل ضمیمه (عکس/PDF):</MudText>
                    <InputFile OnChange="HandleFileSelection" />
                    @if (_selectedFile != null)
                    {
                        <MudText Typo="Typo.body2" Class="mt-2">فایل انتخاب شده: @_selectedFile.Name (@((_selectedFile.Size / 1024).ToString("N0")) KB)</MudText>
                        <MudButton OnClick="ClearFileSelection" Color="Color.Error" Variant="Variant.Text" Size="Size.Small" Class="mt-1">
                            <MudIcon Icon="@Icons.Material.Filled.Close" Size="Size.Small" /> حذف فایل
                        </MudButton>
                    }
                    @if (!string.IsNullOrEmpty(_fileUploadError))
                    {
                        <MudText Color="Color.Error" Typo="Typo.caption">@_fileUploadError</MudText>
                    }
                </MudItem>
                @* ---------------------------------------------------- *@

                <ValidationSummary Class="mt-2" />
                <MudButton ButtonType="ButtonType.Submit"
                           type="submit"
                           Variant="Variant.Filled"
                           Color="Color.Primary"
                           @onclick="SaveNewEventAsync"
                           Disabled="@_isSavingEvent"
                           Class="mt-4">
                    @if (_isSavingEvent)
                    {
                        <MudProgressCircular Indeterminate Color="Color.Info" Size="Size.Small" Class="mr-2" />
                    }
                    ثبت رویداد
                </MudButton>
            </MudForm>
        </EditForm>

    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">بستن</MudButton>
    </DialogActions>
</MudDialog>

@code {

    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = default!;
    [Parameter] public long TaskId { get; set; }
    [Inject] private IJSRuntime JSRuntime { get; set; } = default!; // NEW: Inject IJSRuntime

    private MudForm? _newEventForm;
    private List<EventModel> _events = new List<EventModel>();
    private EventModel _newEvent = new EventModel();

    private IBrowserFile? _selectedFile;
    private string? _fileUploadError;
    private const long MaxFileSize = 10 * 1024 * 1024; // 10 MB in bytes
    private string[] AllowedFileExtensions = { ".jpg", ".jpeg", ".png", ".pdf" };


    private bool _isLoadingEvents = false;
    private bool _isSavingEvent = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadEventsAsync();
    }

    // برای ضمیمه فایل

    private void HandleFileSelection(InputFileChangeEventArgs e)
    {
        _fileUploadError = null;
        _selectedFile = null;

        var file = e.File;
        if (file == null) return;

        // Validate file size
        if (file.Size > MaxFileSize)
        {
            _fileUploadError = $"اندازه فایل نباید بیشتر از {MaxFileSize / (1024 * 1024)} مگابایت باشد.";
            return;
        }

        // Validate file extension
        var fileExtension = Path.GetExtension(file.Name)?.ToLowerInvariant();
        if (fileExtension == null || !AllowedFileExtensions.Contains(fileExtension))
        {
            _fileUploadError = $"پسوند فایل '{fileExtension}' مجاز نیست. پسوندهای مجاز: {string.Join(", ", AllowedFileExtensions)}";
            return;
        }

        _selectedFile = file;
    }

    private void ClearFileSelection()
    {
        _selectedFile = null;
        _fileUploadError = null;
    }

    private async Task DownloadAttachment(long taskId, int eventId, string? fileName)
    {
        if (string.IsNullOrEmpty(fileName))
        {
            Snackbar.Add("نام فایل ضمیمه مشخص نیست.", Severity.Warning);
            return;
        }

        try
        {
            var (fileBytes, contentType) = await AutomationService.DownloadEventAttachmentAsync(taskId, eventId);

            if (fileBytes != null && fileBytes.Length > 0 && contentType != null)
            {
                // Use the downloadFileFromBytes JS helper from wwwroot/js/downloadHelper.js
                // This JS function expects fileName, and byteArray.
                await JSRuntime.InvokeVoidAsync("downloadFileFromBytes", fileName, fileBytes);
                Snackbar.Add("دانلود فایل آغاز شد.", Severity.Success);
            }
            else
            {
                Snackbar.Add("فایل ضمیمه یافت نشد یا مشکلی در دریافت آن وجود داشت.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"خطای غیرمنتظره در دانلود فایل: {ex.Message}", Severity.Error);
        }
    }

    // تابع کمکی برای فرمت تاریخ شمسی
    private string FormatShamsiDateFromDateTime(DateTime? dt)
    {
        if (!dt.HasValue) return string.Empty;
        try
        {
            PersianCalendar pc = new PersianCalendar();
            int year = pc.GetYear(dt.Value);
            int month = pc.GetMonth(dt.Value);
            int day = pc.GetDayOfMonth(dt.Value);
            return $"{year:D4}/{month:D2}/{day:D2}";
        }
        catch { return dt.Value.ToString("yyyy/MM/dd"); }
    }

    private async Task LoadEventsAsync()
    {
        _isLoadingEvents = true;
        StateHasChanged();
        try
        {
            var result = await AutomationService.GetEventsAsync(TaskId);
            _events = result?.ToList() ?? new List<EventModel>();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"خطا در بارگذاری رویدادها: {ex.Message}", Severity.Error);
            _events = new List<EventModel>();
        }
        finally
        {
            _isLoadingEvents = false;
            StateHasChanged();
        }
    }

    private async Task SaveNewEventAsync()
    {
        if (_newEventForm == null) return;

        await _newEventForm.Validate();
        if (!_newEventForm.IsValid)
        {
            Snackbar.Add("لطفا شرح رویداد را وارد کنید.", Severity.Warning);
            return;
        }
        if (_selectedFile != null && !string.IsNullOrEmpty(_fileUploadError))
        {
            Snackbar.Add("فایل انتخابی دارای خطا است. لطفاً فایل معتبری انتخاب کنید یا آن را حذف کنید.", Severity.Warning);
            return;
        }

        _isSavingEvent = true;
        StateHasChanged();
        try
        {
            _newEvent.IDNUM = TaskId;
            EventModel? createdEvent = null;

            if (_selectedFile != null)
            {
                // Open the file stream and pass it to the service
                // Ensure you handle the stream properly (e.g., wrap in a using statement if it's not disposed by the HttpClient)
                // HttpClient.PostAsync with StreamContent handles disposal of the stream internally after sending.
                using (var stream = _selectedFile.OpenReadStream(MaxFileSize)) // MaxFileSize is important here too for client-side stream reading limit
                {
                    createdEvent = await AutomationService.CreateEventAsync(TaskId, _newEvent, stream, _selectedFile.Name);
                }
            }
            else
            {
                createdEvent = await AutomationService.CreateEventAsync(TaskId, _newEvent);
            }

            if (createdEvent != null && createdEvent.IDD > 0)
            {
                Snackbar.Add("رویداد با موفقیت ثبت شد.", Severity.Success);
                _newEvent = new EventModel(); // Reset form model
                _newEventForm?.Reset();
                _newEventForm?.ResetValidation();
                _selectedFile = null; // Clear selected file after successful upload
                _fileUploadError = null;
                await LoadEventsAsync(); // Reload events to show the new one
            }
            else
            {
                Snackbar.Add("خطا در ثبت رویداد. لطفاً دوباره تلاش کنید.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"خطا در زمان ثبت رویداد: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isSavingEvent = false;
            StateHasChanged();
        }
    }

    void Cancel() => MudDialog.Cancel();
}