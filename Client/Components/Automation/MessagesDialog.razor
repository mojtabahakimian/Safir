@using Safir.Shared.Constants
@using Safir.Shared.Models
@using Safir.Shared.Models.Automation
@using Safir.Shared.Interfaces
@using MudBlazor
@using System.ComponentModel.DataAnnotations

@inject IAutomationApiService AutomationService
@inject ISnackbar Snackbar
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ILogger<MessagesDialog> Logger
@inject AppState AppState

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">پیام‌های داخلی</MudText>
    </TitleContent>
    <DialogContent>
        @* 1. AlwaysShowScrollButtons برای نمایش دکمه های اسکرول در صورت نیاز.
        2. یک کلاس سفارشی 'mobile-friendly-tabs' اضافه می کنیم تا بتوانیم در CSS هدف قرار دهیم.
        *@
        <MudTabs Elevation="2" Rounded="true" PanelClass="pa-4"
                 AlwaysShowScrollButtons="true"
                 Class="mobile-friendly-tabs"
                 HideSlider="false">
            @* اطمینان از نمایش اسلایدر زیر تب فعال *@

            <MudTabPanel Text="صندوق ورودی" Class="custom-tab-panel-header">
                @* کلاس برای سربرگ تب *@
                <MudTable Items="@_receivedMessages" Dense="true" Hover="true" Striped="true" Style="max-height: 400px; overflow-y: auto;" Loading="@_isLoadingMessages" LoadingProgressColor="Color.Info">
                    <HeaderContent>
                        <MudTh>فرستنده</MudTh>
                        <MudTh>متن پیام</MudTh>
                        <MudTh>تاریخ ارسال</MudTh>
                        <MudTh>وضعیت</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="فرستنده">@context.USERNAME</MudTd>
                        <MudTd DataLabel="متن پیام" Style="white-space: pre-wrap;">@context.PAYAM</MudTd>
                        <MudTd DataLabel="تاریخ ارسال">@($"{context.STDATE?.ToString("yyyy/MM/dd")} {context.STTIME?.ToString(@"hh\:mm")}")</MudTd>
                            <MudTd DataLabel="وضعیت">
                            @if (context.STATUS == 1)
                            {
                                <MudChip Label="true" Color="Color.Warning" Size="Size.Small" OnClick="@(() => MarkAsRead(context))">خوانده نشده</MudChip>
                            }
                            else
                            {
                                <MudChip Label="true" Color="Color.Success" Size="Size.Small">خوانده شده</MudChip>
                            }
                        </MudTd>
                    </RowTemplate>
                    <NoRecordsContent>
                        <MudText>پیام دریافتی وجود ندارد.</MudText>
                    </NoRecordsContent>
                    <LoadingContent>
                        <MudText>در حال بارگذاری پیام‌ها...</MudText>
                    </LoadingContent>
                </MudTable>
            </MudTabPanel>

            <MudTabPanel Text="ارسال پیام جدید" Class="custom-tab-panel-header">
                @* کلاس برای سربرگ تب *@
                <EditForm Model="@_newMessageRequest">
                    <DataAnnotationsValidator />
                    <MudForm @ref="_newMessageForm">
                        <MudAutocomplete T="PersonelLookupModel" Label="گیرندگان پیام" @bind-Value="SelectedRecipient"
                                         SearchFunc="@SearchPersonel" ResetValueOnEmptyText="true" CoerceText="false"
                                         ToStringFunc="@(p => p?.SAL_NAME ?? string.Empty)" Variant="Variant.Outlined"
                                         AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary"
                                         Dense="true">
                            <ItemTemplate Context="personCtx">
                                <MudText>@personCtx.SAL_NAME (@personCtx.USERCO)</MudText>
                            </ItemTemplate>
                            <MoreItemsTemplate>
                                <MudText>نتایج بیشتر موجود است...</MudText>
                            </MoreItemsTemplate>
                            <NoItemsTemplate>
                                <MudText>کاربری یافت نشد.</MudText>
                            </NoItemsTemplate>
                        </MudAutocomplete>

                        <MudSelect T="string" Label="مربوط به (مشتری)" @bind-Value="_newMessageRequest.CompCod"
                                   Variant="Variant.Outlined" Dense="true" Clearable="true" Required="true" RequiredError="انتخاب مشتری الزامی است." Class="mt-3">
                            @if (_customerLookup != null)
                            {
                                foreach (var customer in _customerLookup)
                                {
                                    <MudSelectItem T="string" Value="@customer.Id">@customer.Name</MudSelectItem>
                                }
                            }
                        </MudSelect>

                        @if (_selectedRecipientsList.Any())
                        {
                            <MudPaper Elevation="0" Class="d-flex flex-wrap gap-1 mt-2 pa-1">
                                @foreach (var recipient in _selectedRecipientsList)
                                {
                                    <MudChip Color="Color.Primary" OnClose="@(() => RemoveRecipient(recipient))" Size="Size.Small">@recipient.SAL_NAME</MudChip>
                                }
                            </MudPaper>
                        }

                        <MudTextField Label="متن پیام" Class="mt-3"
                                      @bind-Value="_newMessageRequest.MessageText" For="@(() => _newMessageRequest.MessageText)"
                                      Lines="3" Variant="Variant.Outlined" Required="true" RequiredError="متن پیام الزامی است." />

                        <ValidationSummary Class="mt-2" />
                        <MudButton @onclick="SendNewMessageAsync" Variant="Variant.Filled" Color="Color.Primary" Disabled="@_isSending" Class="mt-4">ارسال پیام</MudButton>
                    </MudForm>
                </EditForm>
            </MudTabPanel>
        </MudTabs>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">بستن</MudButton>
    </DialogActions>
</MudDialog>

@* بخش @code بدون تغییر باقی می‌ماند، مگر اینکه بخواهید منطق تشخیص موبایل اضافه کنید *@
@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = default!;

    private MudForm? _newMessageForm;
    private List<MessageModel> _receivedMessages = new List<MessageModel>();
    private List<PersonelLookupModel>? _personelLookup;
    private List<PersonelLookupModel> _selectedRecipientsList = new List<PersonelLookupModel>();
    private MessageSendRequest _newMessageRequest = new MessageSendRequest();
    private PersonelLookupModel? _selectedRecipient;
    private List<LookupDto<string>>? _customerLookup;

    private bool _isLoadingMessages = false;
    private bool _isLoadingLookups = false;
    private bool _isSending = false;
    private int _currentUserId = 0;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var currentUserPrincipal = authState.User;

        if (currentUserPrincipal?.Identity?.IsAuthenticated == true)
        {
            var userIdClaim = currentUserPrincipal.FindFirst(BaseknowClaimTypes.IDD)?.Value;
            if (int.TryParse(userIdClaim, out int id))
            {
                _currentUserId = id;
            }
            else
            {
                Logger.LogError("Could not parse User ID from claims.");
                Snackbar.Add("خطا در دریافت اطلاعات کاربر.", Severity.Error);
                MudDialog.Cancel();
                return;
            }
        }
        else
        {
            Logger.LogWarning("User is not authenticated in MessagesDialog.");
            Snackbar.Add("برای دسترسی به پیام‌ها، لطفاً ابتدا وارد شوید.", Severity.Warning);
            MudDialog.Cancel();
            return;
        }

        _customerLookup = new List<LookupDto<string>>() {
            new LookupDto<string>{ Id = "1001-1-1", Name = "مشتری نمونه یک" },
            new LookupDto<string>{ Id = "1001-1-2", Name = "مشتری نمونه دو" },
            new LookupDto<string>{ Id = "1002-1-1", Name = "شرکت نمونه آلفا" }
        };

        _isLoadingMessages = true;
        _isLoadingLookups = true;
        var messagesTask = LoadMessagesAsync();
        var lookupsTask = LoadLookupsAsync();
        await Task.WhenAll(messagesTask, lookupsTask);
        _isLoadingMessages = false;
        _isLoadingLookups = false;
    }

    private async Task LoadMessagesAsync()
    {
        try
        {
            var result = await AutomationService.GetMessagesAsync(includeSent: false, includeReceived: true);
            _receivedMessages = result?.OrderByDescending(m => m.CRT).ToList() ?? new List<MessageModel>();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading received messages.");
            Snackbar.Add($"خطا در بارگذاری پیام‌های دریافتی: {ex.Message}", Severity.Error);
            _receivedMessages = new List<MessageModel>();
        }
    }

    private async Task LoadLookupsAsync()
    {
        try
        {
            _personelLookup = (await AutomationService.GetPersonelLookupAsync())?.ToList();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading personnel lookup.");
            Snackbar.Add($"خطا در بارگذاری لیست کاربران: {ex.Message}", Severity.Error);
            _personelLookup = new List<PersonelLookupModel>();
        }
    }

    private async Task MarkAsRead(MessageModel message)
    {
        if (message.STATUS == 1)
        {
            try
            {
                bool success = await AutomationService.MarkMessageAsReadAsync(message.IDNUM);
                if (success)
                {
                    message.STATUS = 2;
                    Snackbar.Add("پیام خوانده شد.", Severity.Info);
                }
                else
                {
                    Snackbar.Add("خطا در علامت زدن پیام به عنوان خوانده شده.", Severity.Warning);
                }
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Error marking message {MessageId} as read.", message.IDNUM);
                Snackbar.Add($"خطا در بروزرسانی وضعیت پیام: {ex.Message}", Severity.Error);
            }
            StateHasChanged(); // اطمینان از آپدیت UI بعد از تغییر وضعیت پیام
        }
    }

    private async Task<IEnumerable<PersonelLookupModel>> SearchPersonel(string value)
    {
        if (_personelLookup == null)
            return Enumerable.Empty<PersonelLookupModel>();

        var availablePersonnel = _personelLookup
            .Where(p => p.USERCO != _currentUserId && !_selectedRecipientsList.Any(sr => sr.USERCO == p.USERCO));

        if (string.IsNullOrEmpty(value))
            return await Task.FromResult(availablePersonnel.Take(10));

        return await Task.FromResult(availablePersonnel
            .Where(p => p.SAL_NAME != null && p.SAL_NAME.Contains(value, StringComparison.OrdinalIgnoreCase))
            .Take(10));
    }

    private PersonelLookupModel? SelectedRecipient
    {
        get => _selectedRecipient;
        set
        {
            _selectedRecipient = value;
            if (value != null)
            {
                HandleRecipientSelection(value);
                _selectedRecipient = null; // ریست کردن برای انتخاب بعدی
                InvokeAsync(StateHasChanged); // آپدیت UI برای نمایش چیپ جدید
            }
        }
    }

    private void HandleRecipientSelection(PersonelLookupModel selected)
    {
        if (!_selectedRecipientsList.Any(p => p.USERCO == selected.USERCO) && selected.USERCO != _currentUserId)
        {
            _selectedRecipientsList.Add(selected);
        }
    }

    private void RemoveRecipient(PersonelLookupModel recipient)
    {
        _selectedRecipientsList.Remove(recipient);
    }

    private async Task SendNewMessageAsync()
    {
        if (!_selectedRecipientsList.Any())
        {
            Snackbar.Add("لطفاً حداقل یک گیرنده انتخاب کنید.", Severity.Warning);
            return;
        }

        _newMessageRequest.RecipientUserIds = _selectedRecipientsList.Select(p => p.USERCO).ToList();

        await (_newMessageForm?.Validate() ?? Task.CompletedTask);
        if (_newMessageForm?.IsValid != true)
        {
            Snackbar.Add("لطفاً اطلاعات فرم را به درستی تکمیل کنید.", Severity.Warning);
            return;
        }

        _isSending = true;
        StateHasChanged();

        bool success = false;
        try
        {
            Logger.LogInformation("Client: Sending message. Recipients: {RecipientCount}, CompCod: {CompCod}",
                                 _newMessageRequest.RecipientUserIds.Count, _newMessageRequest.CompCod);
            success = await AutomationService.SendMessageAsync(_newMessageRequest);
            Logger.LogInformation("Client: SendMessageAsync result: {Success}", success);

            if (success)
            {
                Snackbar.Add("پیام با موفقیت ارسال شد.", Severity.Success);
                _newMessageRequest = new MessageSendRequest();
                _selectedRecipientsList.Clear();
                await (_newMessageForm?.ResetAsync() ?? Task.CompletedTask);
            }
            else
            {
                Snackbar.Add("خطا در ارسال پیام. لطفاً دوباره تلاش کنید.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Client: Exception during SendNewMessageAsync.");
            Snackbar.Add($"خطای پیش‌بینی نشده: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isSending = false;
            StateHasChanged();
        }
    }

    void Cancel() => MudDialog.Cancel();
}