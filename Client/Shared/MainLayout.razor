@inherits LayoutComponentBase
@implements IDisposable
@using MudBlazor
@using Safir.Shared.Constants
@using Safir.Shared.Interfaces;
@using Safir.Shared.Models.Visitory

@inject ThemeService ThemeService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime
@inject ShoppingCartService CartService
@inject NavigationManager NavManager
@inject IAuthService AuthService
@inject ISnackbar Snackbar
@inject ISnackbar Snackbar
@inject ConnectivityService Connectivity

<MudLayout>
    <MudAppBar Elevation="1" Color="Color.Primary">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudText Typo="Typo.h5" Class="ml-3">سفیر</MudText>
        <MudSpacer />

        @* نمایش نام مشتری انتخاب شده برای سفارش *@
        @if (CurrentCustomer != null)
        {
            @* Only Show in PC Hover => Class="mx-2 customer-chip-display"*@
            <MudHidden Breakpoint="Breakpoint.MdAndUp">
                <MudTooltip Text="@($"سفارش برای: {CurrentCustomer.person} ({CurrentCustomer.hes})")" Arrow="true">
                    <MudIconButton Icon="@Icons.Material.Filled.PersonPin" Size="Size.Small" Color="Color.Inherit" Class="mx-2 customer-chip-display" />
                </MudTooltip>
            </MudHidden>

            @* Only Show in Mobile Blue Box => Class="mx-1 customer-icon-display" *@
            <MudHidden Breakpoint="Breakpoint.SmAndDown">
                <MudTooltip Text="@($"سفارش برای: {CurrentCustomer.person} ({CurrentCustomer.hes})")" Arrow="true">
                    <MudChip Color="Color.Info" Size="Size.Small" Class="mx-1 customer-icon-display">
                        @($"سفارش برای: {Truncate(CurrentCustomer.person, 30)}")
                    </MudChip>
                </MudTooltip>
            </MudHidden>
        }

        @* دکمه و Badge سبد خرید *@
        <MudTooltip Text="سبد خرید" Arrow="true">
            <MudBadge Content="@CartItemCount" Color="Color.Error" Overlap="true" Bordered="true" Visible="@(CartItemCount > 0)" Class="mx-2">
                @* تغییر Link به OnClick برای سازگاری بهتر *@
                <MudIconButton Icon="@Icons.Material.Filled.ShoppingCart" Color="Color.Inherit" OnClick='() => NavManager.NavigateTo("/cart")' Title="مشاهده سبد سفارش" />
            </MudBadge>
        </MudTooltip>

        @* دکمه تغییر تم *@
        <MudTooltip Text="@(ThemeService.IsDarkMode ? "تم روشن" : "تم تاریک")" Arrow="true">
            @* استفاده از OnClick به جای bind-Toggled برای فراخوانی متد سرویس تم *@
            <MudIconButton Icon="@(ThemeService.IsDarkMode ? Icons.Material.Filled.WbSunny : Icons.Material.Filled.NightsStay)"
                           Color="Color.Inherit"
                           OnClick="ToggleTheme" />
        </MudTooltip>


        <AuthorizeView>
            <Authorized>
                <MudMenu AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopCenter">
                    <ActivatorContent>
                        <MudButton Variant="Variant.Text"
                                   Color="Color.Inherit"
                                   DisableRipple="true"
                                   Style="text-transform: none; padding: 0; min-width: 0;"
                                   Class="pa-1">
                            <MudIcon Icon="@Icons.Material.Filled.Person" Color="Color.Inherit" Class="me-2" />
                        </MudButton>
                    </ActivatorContent>
                    <ChildContent>
                        @* --- آیتم نام کاربر با متن وسط‌چین --- *@
                        <MudButton Variant="Variant.Text"
                                   FullWidth="true"
                                   Disabled="true"
                                   Style="text-transform: none; padding: 6px 16px; font-weight: normal; color: inherit; opacity: 1;"
                                   Class="mud-menu-item">
                            @* استایل وسط‌چین و truncation به MudText اضافه شد *@
                            <MudText Style="width: 100%; text-align: left; overflow: hidden; white-space: nowrap; text-overflow: ellipsis;">@TruncatedDisplayName</MudText>
                        </MudButton>

                        <MudDivider /> @* <<< جداکننده اختیاری >>> *@
                        <MudButton Variant="Variant.Text"
                                   OnClick="LogoutUser"
                                   OnClickStopPropagation="true"
                                   FullWidth="true"
                                   Style="justify-content: start; text-transform: none; padding: 6px 16px; font-weight: normal; color: inherit;"
                                   Class="mud-menu-item">
                            <MudIcon Icon="@Icons.Material.Filled.Logout" Class="me-3" />
                            خروج
                        </MudButton>
                    </ChildContent>
                </MudMenu>
            </Authorized>
            <NotAuthorized>
                <MudButton Variant="Variant.Text" Href="login" Color="Color.Inherit">
                    <MudIcon Icon="@Icons.Material.Filled.Login" Class="me-3" />
                    ورود
                </MudButton>
            </NotAuthorized>
        </AuthorizeView>

    </MudAppBar>

    @* --- کامنت از اینجا حذف شد --- *@
    <MudDrawer @bind-Open="_drawerOpen"
               Anchor="Anchor.End"
               Elevation="2"
               ClipMode="DrawerClipMode.Always"
               Variant="DrawerVariant.Responsive"
               Class="mud-theme-background">

        <MudDrawerHeader>
            <MudText Typo="Typo.h6">منو</MudText>
        </MudDrawerHeader>

        @* آیتم‌های منو *@
        <NavMenu />

    </MudDrawer>

    <MudMainContent>
        @if (showConnectivityWarning)
        {
            <MudAlert Severity="Severity.Warning" Variant="Variant.Filled" Class="mb-4" Style="position: sticky; top: 64px; z-index: 100;">
                <MudText Typo="Typo.body2" Style="color: white;">@connectivityWarningMessage</MudText>
                <MudIconButton Icon="@Icons.Material.Filled.Refresh" Size="Size.Small" OnClick="RetryConnectivityCheck" Class="ms-auto" Title="تلاش مجدد" Style="color: white;" />
            </MudAlert>
        }
        <MudContainer MaxWidth="MaxWidth.Large" Class="my-4 pt-4">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    private bool _drawerOpen = false; // پیش‌فرض بسته در موبایل
    private string? DisplayName;
    private VISITOR_CUSTOMERS? CurrentCustomer;
    private int CartItemCount = 0;

    private string TruncatedDisplayName
    {
        get
        {
            const int MaxLength = 15; // حداکثر طول نام برای نمایش کامل
            if (string.IsNullOrEmpty(DisplayName)) return string.Empty;
            return DisplayName.Length <= MaxLength ? DisplayName : DisplayName.Substring(0, MaxLength) + "...";
        }
    }

    private bool showConnectivityWarning = false;
    private string connectivityWarningMessage = "";
    private Timer? _connectivityCheckTimer;

    protected override async Task OnInitializedAsync()
    {
        await InitialConnectivityCheck();
        // تنظیم تایمر برای بررسی دوره‌ای وضعیت اتصال (مثلاً هر ۱ دقیقه)
        _connectivityCheckTimer = new Timer(async _ => await PeriodicConnectivityCheck(), null, TimeSpan.FromMinutes(1), TimeSpan.FromMinutes(1));


        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            DisplayName = user.FindFirst(BaseknowClaimTypes.UUSER)?.Value ?? "کاربر";
        }

        await CartService.InitializeCartFromLocalStorageAsync(); // <--- بارگذاری سبد خرید از localStorage

        // اشتراک در رویداد تغییر سبد خرید
        CartService.CartChanged += OnCartChanged;

        // دریافت وضعیت اولیه سبد
        UpdateCartState();
    }

    private async Task CheckConnectivityAndNotifyAsync(string contextMessage)
    {
        var (status, userMsg, techMsg) = await Connectivity.CheckConnectivityAsync();

        if (status != ConnectivityStatus.Healthy)
        {
            Snackbar.Add(userMsg, Severity.Error, config =>
            {
                config.RequireInteraction = true;
                config.VisibleStateDuration = int.MaxValue;
                config.DuplicatesBehavior = SnackbarDuplicatesBehavior.Prevent;
                config.SnackbarVariant = Variant.Filled;
            });
            Console.WriteLine($"Login Attempt Connectivity Error - Technical Details: {techMsg}");
            StateHasChanged();
            return;
        }
    }
    private async Task InitialConnectivityCheck()
    {
        var (status, userMsg, techMsg) = await Connectivity.CheckConnectivityAsync();
        HandleConnectivityResult(status, userMsg, techMsg, "هنگام بارگذاری برنامه");
    }

    private async Task PeriodicConnectivityCheck()
    {
        // فقط اگر هشدار قبلاً نمایش داده نشده یا وضعیت قبلی سالم بوده است، بررسی کنید
        // تا از نمایش مکرر هشدار برای یک مشکل پایدار جلوگیری شود.
        // یا اینکه همیشه بررسی کنید و فقط در صورت تغییر وضعیت، Snackbar جدید نشان دهید.
        // در اینجا، اگر هشدار فعال است، بررسی مجدد نمی‌کنیم تا کاربر دستی Retry کند.
        if (!showConnectivityWarning)
        {
            var (status, userMsg, techMsg) = await Connectivity.CheckConnectivityAsync();
            // فقط اگر وضعیت بد است و قبلا خوب بوده، هشدار را نشان بده
            if (status != ConnectivityStatus.Healthy)
            {
                HandleConnectivityResult(status, userMsg, techMsg, "بررسی دوره‌ای");
            }
        }
    }

    private async Task RetryConnectivityCheck()
    {
        // بستن هشدار فعلی
        showConnectivityWarning = false;
        connectivityWarningMessage = "";
        StateHasChanged(); // UI را برای بستن هشدار به‌روز کن

        // نمایش یک Snackbar موقت برای اطلاع از تلاش مجدد
        Snackbar.Add("در حال تلاش مجدد برای برقراری ارتباط...", Severity.Info, config =>
        {
            config.ShowCloseIcon = false;
            config.VisibleStateDuration = 3000; // 3 ثانیه
        });

        var (status, userMsg, techMsg) = await Connectivity.CheckConnectivityAsync();
        HandleConnectivityResult(status, userMsg, techMsg, "پس از تلاش مجدد");
    }

    private void HandleConnectivityResult(ConnectivityStatus status, string userMessage, string? technicalMessage, string context)
    {
        if (status != ConnectivityStatus.Healthy)
        {
            showConnectivityWarning = true;
            connectivityWarningMessage = $"هشدار ({context}): {userMessage}";

            // یک اسنک‌بار برای جلب توجه، اما هشدار اصلی در MudAlert خواهد بود
            Snackbar.Add(connectivityWarningMessage, Severity.Warning, config =>
            {
                config.RequireInteraction = false; // این فقط یک نوتیفیکیشن است
                config.VisibleStateDuration = 7000; // 7 ثانیه
                config.DuplicatesBehavior = SnackbarDuplicatesBehavior.Prevent; // از اسنک‌بارهای تکراری جلوگیری کن
                config.SnackbarVariant = Variant.Filled;
            });
            Console.WriteLine($"MainLayout Connectivity - Context: {context}, UserMsg: {userMessage}, TechMsg: {technicalMessage}");
        }
        else
        {
            // اگر قبلا هشداری بوده و الان اتصال برقرار شده، آن را ببند
            if (showConnectivityWarning)
            {
                Snackbar.Add("ارتباط با سرور مجدداً برقرار شد.", Severity.Success, config =>
                {
                    config.VisibleStateDuration = 5000;
                    config.SnackbarVariant = Variant.Filled;
                });
            }
            showConnectivityWarning = false;
            connectivityWarningMessage = "";
        }
        InvokeAsync(StateHasChanged); // اطمینان از به‌روزرسانی UI
    }

    // متد برای بروزرسانی اطلاعات مشتری و تعداد آیتم‌ها
    private void UpdateCartState()
    {
        CurrentCustomer = CartService.CurrentCustomer;
        CartItemCount = CartService.Items.Count;
    }

    // متد برای بروزرسانی UI هنگام تغییر سبد خرید
    private void OnCartChanged()
    {
        UpdateCartState();
        InvokeAsync(StateHasChanged); // بروزرسانی UI
    }

    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private async Task ToggleTheme()
    {
        await ThemeService.ToggleTheme();
        // StateHasChanged(); // معمولا سرویس تم خودش UI را آپدیت می‌کند
    }

    private async Task LogoutUser()
    {
        await AuthService.Logout();
        NavManager.NavigateTo("/login", forceLoad: true); // forceLoad برای اطمینان از پاک شدن کامل وضعیت
        Snackbar.Add("با موفقیت خارج شدید.", Severity.Success);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            //Console.WriteLine("MainLayout first render complete. Signaling JS to remove splash screen.");
            try
            {
                // یا می‌توانید بررسی اتصال را اینجا هم قرار دهید اگر OnInitializedAsync مناسب نیست
                //await CheckConnectivityAndNotifyAsync("پس از اولین رندر");

                await JSRuntime.InvokeVoidAsync("loading.complete");
                //Console.WriteLine("JS function 'loading.complete' invoked successfully.");
            }
            catch (Exception ex) when (ex is JSException || ex is InvalidOperationException) // Handle JS errors or if disposed
            {
                //Console.Error.WriteLine($"Error invoking JS function 'loading.complete': {ex.Message}");
            }
        }
    }
    public void Dispose()
    {
        // لغو اشتراک رویداد
        CartService.CartChanged -= OnCartChanged;
        _connectivityCheckTimer?.Dispose();
        GC.SuppressFinalize(this); // جلوگیری از فراخوانی دوباره Finalizer
    }

    // --- تابع کمکی برای کوتاه کردن رشته ---
    private string Truncate(string? value, int maxLength)
    {
        if (string.IsNullOrEmpty(value)) return string.Empty;
        return value.Length <= maxLength ? value : value.Substring(0, maxLength) + "...";
    }
}