@inherits LayoutComponentBase
@using MudBlazor
@using Safir.Shared.Constants;
@inject ThemeService ThemeService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime
@inject ShoppingCartService CartService

<MudLayout>
    <MudAppBar Elevation="1" Color="Color.Primary">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudText Typo="Typo.h5" Class="ml-3">سفیر</MudText>
        <MudSpacer />

        @* نمایش نام مشتری انتخاب شده برای سفارش *@
        @if (CartService.CurrentCustomer != null)
        {
            <MudChip Color="Color.Info" Size="Size.Small" Class="mx-4">
                سفارش برای: @CartService.CurrentCustomer.person
            </MudChip>
        }

        @* دکمه و Badge سبد خرید *@
        <MudBadge Content="@CartService.Items.Count" Color="Color.Error" Overlap="true" Bordered="true" Visible="@(CartService.Items.Count > 0)">
            <MudIconButton Icon="@Icons.Material.Filled.ShoppingCart" Color="Color.Inherit" Link="/cart" Title="مشاهده سبد سفارش" />
        </MudBadge>

        <MudToggleIconButton @bind-Toggled="@ThemeService.IsDarkMode"
                             Icon="@Icons.Material.Filled.LightMode" Color="Color.Inherit" Title="Light Mode"
                             ToggledIcon="@Icons.Material.Filled.DarkMode" ToggledColor="Color.Inherit" ToggledTitle="Dark Mode" />
        <MudIconButton Icon="@Icons.Material.Filled.Notifications" Color="Color.Inherit" />

        <MudIconButton Icon="@Icons.Material.Filled.Person" Color="Color.Inherit" />

        @* User Logged in *@
        <AuthorizeView>
            <Authorized Context="authContext">
                <MudText Class="ml-2" Typo="Typo.subtitle2">
                    @authContext.User.FindFirst(BaseknowClaimTypes.UUSER)?.Value
                </MudText>
            </Authorized>
        </AuthorizeView>

      

    </MudAppBar>


    <MudDrawer @bind-Open="_drawerOpen"
               Anchor="Anchor.End"
               Elevation="2"
               ClipMode="DrawerClipMode.Always"
               Variant="DrawerVariant.Responsive"
               Class="mud-theme-background">

        <MudDrawerHeader>
            <MudText Typo="Typo.h6">منو</MudText>
        </MudDrawerHeader>

        @* Items: *@
        <NavMenu />

    </MudDrawer>

    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.Large" Class="my-4 pt-4">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    private bool _drawerOpen = true;

    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private string? displayName;
    private string? userId;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            displayName = user.FindFirst(BaseknowClaimTypes.UUSER)?.Value ?? "";
        }

        // اشتراک در رویداد تغییر سبد خرید
        CartService.CartChanged += OnCartChanged;
    }

    // متد برای بروزرسانی UI هنگام تغییر سبد خرید
    private void OnCartChanged()
    {
        InvokeAsync(StateHasChanged); // بروزرسانی UI
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // این متد پس از رندر شدن کامپوننت اجرا می‌شود
        if (firstRender)
        {
            // این بلاک کد فقط *یک بار* پس از اولین رندر اجرا می‌شود
            Console.WriteLine("MainLayout first render complete. Signaling JS to remove splash screen.");

            // --- فراخوانی تابع جاوااسکریپت برای بستن اسپلش‌اسکرین ---
            try
            {
                await JSRuntime.InvokeVoidAsync("loading.complete");
                Console.WriteLine("JS function 'loading.complete' invoked successfully.");
            }
            catch (JSException jsEx)
            {
                Console.Error.WriteLine($"Error invoking JS function 'loading.complete': {jsEx.Message}");
                // اینجا می‌توانید یک راه حل جایگزین در نظر بگیرید،
                // مثلاً تلاش برای مخفی کردن دستی اسپلش اگر JS ناموفق بود (پیچیده‌تر است)
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Unexpected error during JS interop: {ex.Message}");
            }
            // شاید لازم باشد StateHasChanged() را اینجا صدا بزنید اگر تغییر وضعیت دیگری
            // بلافاصله پس از لود لازم است که UI را آپدیت کند.
            // await InvokeAsync(StateHasChanged);
        }
    }
    public void Dispose()
    {
        // لغو اشتراک رویدادها
        CartService.CartChanged -= OnCartChanged;
        // ThemeService.ThemeChanged -= OnThemeChanged; // اگر از سرویس تم قبلی استفاده می‌کنید
    }

}
