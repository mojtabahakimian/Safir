@using MudBlazor
@using Microsoft.AspNetCore.Components.Authorization
@using Safir.Client.Services
@using Safir.Shared.Interfaces;
@inject NavigationManager NavigationManager
@inject IAuthService AuthService
@inject MudBlazor.IDialogService DialogService
@inject ShoppingCartService CartService
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime

<MudNavMenu>
    <!-- صفحه اصلی -->
    <MudNavLink Href="/" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Home">
        صفحه اصلی
    </MudNavLink>

    <AuthorizeView>
        <Authorized>
            <!-- ثبت سفارش -->
            @if (_isCustomerSelected)
            {
                <MudNavLink Href="item-groups" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.ShoppingCart">
                    ثبت سفارش
                </MudNavLink>
            }

            <!-- مشاهده لیست مشتریان -->
            <MudNavLink Href="visitor-customers" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.List">
                مشاهده لیست مشتریان
            </MudNavLink>

            <!-- اتوماسیون -->
            <MudNavLink Href="/automation/tasks" Icon="@Icons.Material.Filled.Assignment">کارتابل اتوماسیون</MudNavLink>

            <MudNavLink Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.PersonAdd" Href="customer-define">
                تعریف مشتری جدید
            </MudNavLink>


            <MudNavLink Disabled="true" Icon="@Icons.Material.Filled.Info">
                نسخه: @appVersion
            </MudNavLink>

            <!-- گروه تنظیمات -->
            <MudNavGroup Title="تنظیمات" Icon="@Icons.Material.Filled.Settings" Expanded="false">
                <MudNavLink Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Person">@context.User.FindFirst(Safir.Shared.Constants.BaseknowClaimTypes.UUSER)?.Value</MudNavLink>

                <MudNavLink @onclick="BeginFullCleanup" Icon="@Icons.Material.Filled.CleaningServices">
                    تازه سازی اطلاعات
                </MudNavLink>

                <MudNavLink Href="settings/security" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Security">
                    امنیت
                </MudNavLink>
            </MudNavGroup>

            <!-- خروج -->
            <MudNavLink Match="NavLinkMatch.Prefix" @onclick="BeginLogout" Icon="@Icons.Material.Filled.Logout">
                خروج
            </MudNavLink>
        </Authorized>
        <NotAuthorized>
            <!-- Optional: Show a link to log in if the user is not authorized -->
            <MudNavLink Href="login" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Login">
                ورود کاربری
            </MudNavLink>

            <MudNavLink Disabled="true" Icon="@Icons.Material.Filled.Info">
                نسخه: @appVersion
            </MudNavLink>

            <MudNavLink @onclick="BeginFullCleanup" Icon="@Icons.Material.Filled.CleaningServices">
                تازه سازی اطلاعات
            </MudNavLink>
        </NotAuthorized>
    </AuthorizeView>
</MudNavMenu>


@code {
    private bool collapseNavMenu = true;

    private string appVersion = "1.0.0"; // می‌توانید این مقدار را مطابق نسخه پروژه در csproj یا منبع دیگر تنظیم کنید

    private bool _isCustomerSelected = false;

    // --- Lifecycle and Event Handling ---
    protected override void OnInitialized()
    {
        // Set initial state based on current cart status
        _isCustomerSelected = CartService.CurrentCustomer != null;
        // Subscribe to the CartChanged event
        CartService.CartChanged += OnCartChanged;

        try
        {
            var version = System.Reflection.Assembly.GetExecutingAssembly().GetName().Version;
            if (version != null)
            {
                // به‌عنوان مثال: "1.0.0.0"
                appVersion = version.ToString();
            }
        }
        catch { }

        base.OnInitialized();
    }
    private void OnCartChanged()
    {
        // Update the state when the cart changes
        _isCustomerSelected = CartService.CurrentCustomer != null;
        // Notify the component to re-render
        InvokeAsync(StateHasChanged);
    }
    public void Dispose()
    {
        // Unsubscribe from the event when the component is disposed
        CartService.CartChanged -= OnCartChanged;
    }


    // Computes the CSS class for the main navigation div to make it collapsible
    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    // Toggles the expanded/collapsed state of the navigation menu
    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    // Handles the logout process
    private async Task BeginLogout()
    {
        var options = new DialogOptions { CloseButton = false, MaxWidth = MaxWidth.ExtraSmall };
        var parameters = new DialogParameters
            {
                ["Title"] = "خروج از حساب",
                ["ContentText"] = "آیا مطمئن هستید می‌خواهید از حساب کاربری خود خارج شوید؟",
                ["ConfirmButtonText"] = "خارج شو",
                ["CancelButtonText"] = "منصرف شدم"
            };
        var dialog = DialogService.Show<ConfirmDialog>(parameters["Title"]?.ToString()!, parameters, options);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            await AuthService.Logout();
            NavigationManager.NavigateTo("login", true);
        }
    }
    private async Task BeginFullCleanup()
    {
        var options = new DialogOptions { CloseButton = false, MaxWidth = MaxWidth.Small };
        var parameters = new DialogParameters
            {
                ["Title"] = "پاکسازی کامل اطلاعات مرورگر",
                ["ContentText"] = "آیا مطمئن هستید که می‌خواهید تمامی اطلاعات ذخیره شده این سایت در مرورگر (شامل تنظیمات، کش و داده‌های آفلاین) را پاک کنید؟ این عملیات معادل باز کردن سایت برای اولین بار خواهد بود.",
                ["ConfirmButtonText"] = "پاکسازی و شروع مجدد",
                ["CancelButtonText"] = "منصرف شدم"
            };
        var dialog = DialogService.Show<ConfirmDialog>(parameters["Title"]?.ToString()!, parameters, options);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            try
            {
                // فراخوانی تابع JavaScript برای پاکسازی کامل
                // از BeforeInvoke/AfterInvoke برای اطمینان از آماده بودن JS استفاده می کنیم.
                await JSRuntime.InvokeVoidAsync("console.log", "Attempting to invoke appCleanup.clearAllBrowserData...");
                var success = await JSRuntime.InvokeAsync<bool>("appCleanup.clearAllBrowserData");

                if (success)
                {
                    Snackbar.Add("پاکسازی اطلاعات مرورگر با موفقیت انجام شد. صفحه بارگذاری مجدد می‌شود.", MudBlazor.Severity.Success);
                    // پس از پاکسازی، کاربر را به صفحه اصلی هدایت می‌کنیم تا سایت کاملاً از نو بارگذاری شود
                    // forceLoad: true تضمین می‌کند که مرورگر تمام منابع را دوباره دانلود کند.
                    NavigationManager.NavigateTo("/", forceLoad: true);
                }
                else
                {
                    Snackbar.Add("خطا در پاکسازی اطلاعات مرورگر.", MudBlazor.Severity.Error);
                }
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error during full cleanup: {ex.Message}");
                Snackbar.Add($"خطای غیرمنتظره در پاکسازی , صفحه را رفرش کنید و مجددا امتحان کنید", MudBlazor.Severity.Error); // Use ex.Message
            }
        }
    }
}