@page "/automation/tasks"
@using Safir.Shared.Models.Automation
@using Safir.Shared.Interfaces
@using MudBlazor
@using System.Timers
@using System.Threading
@using Safir.Shared.Models
@using Safir.Shared.Utility
@using System.Globalization
@inject IAutomationApiService AutomationService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject NavigationManager NavManager
@inject AppState AppState
@using Safir.Client.Components.Automation

@implements IDisposable

<MudContainer MaxWidth="MaxWidth.False" Class="pa-2 mt-4 d-flex flex-column" Style="height: calc(100vh - 64px - 1rem);">

    @* نمایش عنوان و دکمه‌ها *@
    <MudPaper Elevation="2" Class="pa-4 mb-4">
        <MudGrid Justify="Justify.SpaceBetween" AlignItems="Align.Center">
            <MudItem>
                <MudText Typo="Typo.h5">کارتابل اتوماسیون</MudText>
            </MudItem>
            <MudItem>
                <MudStack Row="true" Spacing="2">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="LoadTasksAsync" StartIcon="@Icons.Material.Filled.Refresh" Disabled="_isLoading">بروزرسانی</MudButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="ShowBulkUpdateDialog" StartIcon="@Icons.Material.Filled.EditNote" Disabled="!_selectedTasks.Any()">ویرایش گروهی</MudButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Info" OnClick="ShowMessagesDialog" StartIcon="@Icons.Material.Filled.Message">پیام‌ها (@_unreadMessageCount)</MudButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Warning" OnClick="ShowRemindersDialog" StartIcon="@Icons.Material.Filled.NotificationsActive">یادآوری‌ها (@_activeReminderCount)</MudButton>
                </MudStack>
            </MudItem>
        </MudGrid>
    </MudPaper>

    <MudGrid Spacing="2" Style="flex-grow: 1;">
        @* --- بخش فیلترها --- *@
        <MudItem xs="12" md="2">
            <MudPaper Elevation="2" Class="pa-3" Style="height: 100%;">
                <MudText Typo="Typo.h6" GutterBottom="true">فیلترها</MudText>
                <MudStack Spacing="2">
                    @* --- فیلتر وضعیت با ValueChanged --- *@
                    <MudRadioGroup T="int" Value="_filterStatus" ValueChanged="((int newValue) => OnStatusFilterChanged(newValue))">
                        <MudRadio Option="1" Color="Color.Primary" Size="Size.Small">انجام نشده (@_countStatus1)</MudRadio>
                        <MudRadio Option="2" Color="Color.Primary" Size="Size.Small">انجام شده (@_countStatus2)</MudRadio>
                        <MudRadio Option="3" Color="Color.Primary" Size="Size.Small">لغو شده (@_countStatus3)</MudRadio>
                        <MudRadio Option="0" Color="Color.Primary" Size="Size.Small">همه (@_countStatus0)</MudRadio>
                    </MudRadioGroup>

                    <MudDivider Class="my-2" />

                    @* --- فیلتر کاربر مجری با ValueChanged --- *@
                    @if (_canFilterByUser)
                    {
                        <MudSelect T="int?" Label="کاربر مجری" Value="_filterAssignedUserId" ValueChanged="((int? newValue) => OnUserFilterChanged(newValue))" Dense="true" Variant="Variant.Outlined" Clearable="true">
                            <MudSelectItem T="int?" Value="null">-- کاربر جاری --</MudSelectItem>
                            @if (_personelLookup != null)
                            {
                                foreach (var personel in _personelLookup)
                                {
                                    <MudSelectItem T="int?" Value="@personel.USERCO">@personel.SAL_NAME</MudSelectItem>
                                }
                            }
                            else
                            {
                                <MudSelectItem T="int?" Value="null" Disabled="true">در حال بارگذاری...</MudSelectItem>
                            }
                        </MudSelect>
                    }

                    @* --- فیلتر نوع سند با Debounce --- *@
                    <MudTextField T="string" Label="انواع سند (skid با کاما)" @bind-Value="_filterTaskTypes" Variant="Variant.Outlined" Dense="true" OnDebounceIntervalElapsed="OnFilterChangedDebounced" DebounceInterval="500" />

                </MudStack>
            </MudPaper>
        </MudItem>

        @* --- بخش اصلی (فرم و جدول) --- *@
        <MudItem xs="12" md="10" Class="d-flex flex-column">
            @* --- فرم ورود/ویرایش وظیفه --- *@
            <MudPaper Elevation="2" Class="pa-3 mb-3">
                <EditForm Model="@_currentTask" @ref="_editContextForm">
                    <DataAnnotationsValidator />
                    <MudForm @ref="_form">
                        <MudGrid Spacing="2">
                            <MudItem xs="12">
                                <MudTextField Label="شرح وظیفه" @bind-Value="_currentTask.TASK" For="@(() => _currentTask.TASK)" Lines="3" Variant="Variant.Outlined" Required="true" />
                            </MudItem>
                            <MudItem xs="12" sm="6" md="3">
                                <MudSelect T="int" Label="کاربر مجری" @bind-Value="_currentTask.PERSONEL" For="@(() => _currentTask.PERSONEL)" Variant="Variant.Outlined" Required="true">
                                    @if (_personelLookup != null)
                                    {
                                        foreach (var personel in _personelLookup)
                                        {
                                            <MudSelectItem T="int" Value="@personel.USERCO">@personel.SAL_NAME</MudSelectItem>
                                        }
                                    }
                                    else
                                    {
                                        <MudSelectItem T="int" Value="0" Disabled="true">در حال بارگذاری...</MudSelectItem>
                                    }
                                </MudSelect>
                            </MudItem>
                            <MudItem xs="6" sm="3" md="2">
                                <MudSelect T="int" Label="اولویت" @bind-Value="_currentTask.PERIORITY" For="@(() => _currentTask.PERIORITY)" Variant="Variant.Outlined" Required="true">
                                    <MudSelectItem T="int" Value="1">فوری</MudSelectItem>
                                    <MudSelectItem T="int" Value="2">معمولی</MudSelectItem>
                                </MudSelect>
                            </MudItem>
                            <MudItem xs="6" sm="3" md="2">
                                <MudSelect T="int" Label="وضعیت" @bind-Value="_currentTask.STATUS" For="@(() => _currentTask.STATUS)" Variant="Variant.Outlined" Required="true">
                                    <MudSelectItem T="int" Value="1">انجام نشده</MudSelectItem>
                                    <MudSelectItem T="int" Value="2">انجام شده</MudSelectItem>
                                    <MudSelectItem T="int" Value="3">لغو شده</MudSelectItem>
                                </MudSelect>
                            </MudItem>
                            <MudItem xs="12" sm="6" md="5">
                                <MudSelect T="string" Label="گیرنده" @bind-Value="_currentTask.COMP_COD" For="@(() => _currentTask.COMP_COD)"
                                           Variant="Variant.Outlined" Dense="true" Clearable="true" AnchorOrigin="Origin.BottomCenter"
                                           EnableFilter="true" Required="true">
                                    @if (_customerLookup != null)
                                    {
                                        foreach (var customer in _customerLookup)
                                        {
                                            <MudSelectItem T="string" Value="@customer.Id">@customer.Name (@customer.Id)</MudSelectItem>
                                        }
                                    }
                                    else
                                    {
                                        <MudSelectItem T="string" Value="null" Disabled="true">در حال بارگذاری گیرندگان...</MudSelectItem>
                                    }
                                </MudSelect>
                            </MudItem>
                            <MudItem xs="12" Class="d-flex justify-end align-center">
                                <MudStack Row="true" Spacing="2">
                                    <MudButton ButtonType="ButtonType.Button" @onclick="SaveTaskAsync" Variant="Variant.Filled" Color="Color.Success" Disabled="_isSaving" StartIcon="@Icons.Material.Filled.Save">ذخیره وظیفه</MudButton>
                                    <MudButton Variant="Variant.Filled" Color="Color.Default" OnClick="ClearForm" Disabled="_isSaving" StartIcon="@Icons.Material.Filled.Clear">جدید</MudButton>
                                </MudStack>
                            </MudItem>
                        </MudGrid>
                        <ValidationSummary />
                    </MudForm>
                </EditForm>
            </MudPaper>

            @* --- جدول وظایف --- *@
            <MudPaper Elevation="2" Class="pa-1" Style="flex-grow: 1; overflow-y: auto; height: 0;">
                <MudTable ServerData="@(new Func<TableState, Task<TableData<TaskModel>>>(ServerReload))"
                          Dense="true" Hover="true" @ref="_table" MultiSelection="true" @bind-SelectedItems="_selectedTasks"
                          Elevation="0" Breakpoint="Breakpoint.Sm" Loading="_isLoading" LoadingProgressColor="Color.Info">
                    <HeaderContent>
                        <MudTh><MudTableSortLabel SortLabel="idnum_field" T="TaskModel">ID</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortLabel="task_field" T="TaskModel">شرح وظیفه</MudTableSortLabel></MudTh>
                        <MudTh>مجری</MudTh>
                        <MudTh>اولویت</MudTh>
                        <MudTh><MudTableSortLabel SortLabel="status_field" T="TaskModel">وضعیت</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortLabel="stdate_field" T="TaskModel">تاریخ ارجاع</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortLabel="endate_field" T="TaskModel">تاریخ انجام</MudTableSortLabel></MudTh>
                        <MudTh>نام گیرنده</MudTh>
                        <MudTh>عملیات</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="ID">@context.IDNUM</MudTd>
                        <MudTd DataLabel="شرح وظیفه" Style="white-space: normal; word-break: break-word;">@context.TASK</MudTd>
                        <MudTd DataLabel="مجری">@GetPersonelName(context.PERSONEL)</MudTd>
                        <MudTd DataLabel="اولویت">
                            @if (context.PERIORITY == 1)
                            {
                                <MudChip Label="true" Color="Color.Error" Size="Size.Small">فوری</MudChip>
                            }
                            else
                            {
                                <MudChip Label="true" Color="Color.Default" Size="Size.Small">معمولی</MudChip>
                            }
                        </MudTd>
                        <MudTd DataLabel="وضعیت">@GetStatusName(context.STATUS)</MudTd>
                        <MudTd DataLabel="تاریخ ارجاع">@FormatShamsiDateFromDateTime(context.STDATE) @context.STTIME?.ToString("hh\\:mm")</MudTd>
                        <MudTd DataLabel="تاریخ انجام">@FormatShamsiDateFromDateTime(context.ENDATE) @context.ENTIME?.ToString("hh\\:mm")</MudTd>
                        <MudTd DataLabel="نام گیرنده">@GetCustomerName(context.COMP_COD)</MudTd>
                        <MudTd DataLabel="عملیات">
                            <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Small" Variant="Variant.Outlined" Color="Color.Primary" OnClick="@(() => SelectTaskForEdit(context))" Title="ویرایش این وظیفه" />
                            <MudIconButton Icon="@Icons.Material.Filled.ListAlt" Size="Size.Small" Variant="Variant.Outlined" Color="Color.Secondary" OnClick="@(() => ShowEventsDialog(context.IDNUM))" Title="مشاهده رویدادها" />
                        </MudTd>
                    </RowTemplate>
                    <NoRecordsContent>
                        <MudText>وظیفه‌ای یافت نشد.</MudText>
                    </NoRecordsContent>
                    <LoadingContent>
                        <MudText>در حال بارگذاری اطلاعات...</MudText>
                    </LoadingContent>
                    <PagerContent>
                        <MudTablePager RowsPerPageString="تعداد در صفحه" InfoFormat="{first_item}-{last_item} از {all_items}" />
                        <MudSpacer />
                        <MudText Typo="Typo.body2" Class="mr-4">تعداد کل: @_totalItems</MudText>
                    </PagerContent>
                </MudTable>
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private MudTable<TaskModel>? _table;
    private MudForm? _form;
    private EditForm? _editContextForm;
    private IEnumerable<TaskModel> _tasks = new List<TaskModel>(); // Full filtered list
    private TaskModel _currentTask = new TaskModel { PERIORITY = 2, STATUS = 1 };
    private HashSet<TaskModel> _selectedTasks = new HashSet<TaskModel>();

    // فیلترها
    private int _filterStatus = 1;
    private int? _filterAssignedUserId = null;
    private string? _filterTaskTypes = "1000";
    private string _searchString = "";

    // داده‌های Lookup
    private List<PersonelLookupModel>? _personelLookup;
    private List<LookupDto<string>>? _customerLookup;

    // متغیرهای وضعیت
    private bool _isLoading = false;
    private bool _isSaving = false;
    private int _totalItems = 0;
    private bool _canFilterByUser = false;
    private int _unreadMessageCount = 0;
    private int _activeReminderCount = 0;

    // شمارنده‌ها برای فیلتر
    private int _countStatus0 = 0;
    private int _countStatus1 = 0;
    private int _countStatus2 = 0;
    private int _countStatus3 = 0;

    // تایمرها
    private System.Threading.Timer? _notificationTimer;
    private System.Timers.Timer? _debounceTimer;

    protected override async Task OnInitializedAsync()
    {
        _canFilterByUser = (AppState.UGRP == 1);
        _isLoading = true;
        await LoadLookupsAsync();
        await LoadNotificationCountsAsync();
        SetupNotificationTimer();
        _debounceTimer = new System.Timers.Timer(500);
        _debounceTimer.Elapsed += HandleDebounceTimerElapsed;
        _debounceTimer.AutoReset = false;
        _isLoading = false;
    }

    private string FormatShamsiDateFromDateTime(DateTime? dt)
    {
        if (!dt.HasValue) return string.Empty;
        try
        {
            PersianCalendar pc = new PersianCalendar();
            return $"{pc.GetYear(dt.Value):D4}/{pc.GetMonth(dt.Value):D2}/{pc.GetDayOfMonth(dt.Value):D2}";
        }
        catch { return dt.Value.ToString("yyyy/MM/dd"); }
    }

    private async Task LoadLookupsAsync()
    {
        try
        {
            var personelTask = AutomationService.GetPersonelLookupAsync();
            // Dummy data for customers
            _customerLookup = new List<LookupDto<string>>() {
                new LookupDto<string>{ Id = "1001-1-1", Name = "مشتری نمونه یک" },
                new LookupDto<string>{ Id = "1001-1-2", Name = "مشتری نمونه دو" },
                new LookupDto<string>{ Id = "1002-1-1", Name = "شرکت نمونه آلفا" },
                new LookupDto<string>{ Id = "HES1", Name = "حساب داخلی یک" }
            };
            _personelLookup = (await personelTask)?.ToList();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"خطا در بارگذاری لیست‌های پایه: {ex.Message}", Severity.Error);
            _personelLookup ??= new List<PersonelLookupModel>();
            _customerLookup ??= new List<LookupDto<string>>();
        }
    }

    private async Task LoadNotificationCountsAsync()
    {
        try
        {
            _unreadMessageCount = await AutomationService.GetUnreadMessageCountAsync();
            _activeReminderCount = await AutomationService.GetActiveReminderCountAsync();
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"خطا در دریافت تعداد اعلان‌ها: {ex.Message}", Severity.Warning);
        }
    }

    private void SetupNotificationTimer()
    {
        _notificationTimer = new System.Threading.Timer(async _ => await HandleTimerCallback(), null, TimeSpan.FromMinutes(1), TimeSpan.FromMinutes(1));
    }

    private async Task HandleTimerCallback()
    {
        await InvokeAsync(LoadNotificationCountsAsync);
    }

    private async Task<TableData<TaskModel>> ServerReload(TableState state)
    {
        _isLoading = true;
        await InvokeAsync(StateHasChanged);

        IEnumerable<TaskModel>? result = null;
        try
        {
            result = await AutomationService.GetTasksAsync(
                statusFilter: _filterStatus,
                assignedUserId: _filterAssignedUserId,
                taskTypes: string.IsNullOrWhiteSpace(_filterTaskTypes) || _filterTaskTypes.Trim() == "1000" ? "1000" : _filterTaskTypes
            );
        }
        catch (Exception ex)
        {
            Snackbar.Add($"خطا در بارگذاری وظایف: {ex.Message}", Severity.Error);
        }

        _tasks = result ?? Enumerable.Empty<TaskModel>();
        _totalItems = _tasks.Count();

        UpdateStatusCounts();

        var sortedData = _tasks;
        if (!string.IsNullOrEmpty(state.SortLabel))
        {
            switch (state.SortLabel)
            {
                case "idnum_field": sortedData = sortedData.OrderByDirection(state.SortDirection, t => t.IDNUM); break;
                case "task_field": sortedData = sortedData.OrderByDirection(state.SortDirection, t => t.TASK); break;
                case "status_field": sortedData = sortedData.OrderByDirection(state.SortDirection, t => t.STATUS); break;
                case "stdate_field": sortedData = sortedData.OrderByDirection(state.SortDirection, t => t.STDATE); break;
                case "endate_field": sortedData = sortedData.OrderByDirection(state.SortDirection, t => t.ENDATE); break;
            }
        }

        var pagedData = sortedData.Skip(state.Page * state.PageSize).Take(state.PageSize).ToList();

        _isLoading = false;
        await InvokeAsync(StateHasChanged);
        return new TableData<TaskModel>() { TotalItems = _totalItems, Items = pagedData };
    }

    private async Task LoadTasksAsync()
    {
        if (_table != null)
        {
            await _table.ReloadServerData();
        }
    }

    private void UpdateStatusCounts()
    {
        _countStatus1 = _tasks.Count(t => t.STATUS == 1);
        _countStatus2 = _tasks.Count(t => t.STATUS == 2);
        _countStatus3 = _tasks.Count(t => t.STATUS == 3);
        _countStatus0 = _totalItems;
    }

    private async Task SaveTaskAsync()
    {
        if (_form == null) return;
        await _form.Validate();
        if (!_form.IsValid)
        {
            Snackbar.Add("لطفاً اطلاعات الزامی فرم را تکمیل کنید.", Severity.Warning);
            return;
        }

        _isSaving = true; StateHasChanged();
        bool success = false; string successMessage = "";
        try
        {
            if (_currentTask.IDNUM > 0)
            {
                success = await AutomationService.UpdateTaskAsync(_currentTask.IDNUM, _currentTask);
                successMessage = "وظیفه با موفقیت بروزرسانی شد.";
            }
            else
            {
                var createdTask = await AutomationService.CreateTaskAsync(_currentTask);
                success = createdTask != null;
                successMessage = "وظیفه با موفقیت ایجاد شد.";
            }
            if (success)
            {
                Snackbar.Add(successMessage, Severity.Success);
                ClearForm();
                await LoadTasksAsync();
            }
            else { Snackbar.Add("خطا در ذخیره سازی وظیفه.", Severity.Error); }
        }
        catch (Exception ex) { Snackbar.Add($"خطا در ذخیره سازی: {ex.Message}", Severity.Error); }
        finally { _isSaving = false; StateHasChanged(); }
    }

    private void ClearForm()
    {
        _currentTask = new TaskModel { PERIORITY = 2, STATUS = 1 };
        _form?.Reset();
        _form?.ResetValidation();
        StateHasChanged();
    }

    private void SelectTaskForEdit(TaskModel task)
    {
        _currentTask = new TaskModel
            {
                IDNUM = task.IDNUM,
                PERSONEL = task.PERSONEL,
                TASK = task.TASK,
                PERIORITY = task.PERIORITY,
                STATUS = task.STATUS,
                STDATE = task.STDATE,
                STTIME = task.STTIME,
                ENDATE = task.ENDATE,
                ENTIME = task.ENTIME,
                COMP_COD = task.COMP_COD,
                NAME = task.NAME,
                skid = task.skid,
                num = task.num
            };
        _form?.ResetValidation();
        StateHasChanged();
    }

    // --- **اصلاح شده** ---
    private async Task OnStatusFilterChanged(int newValue)
    {
        _filterStatus = newValue;
        await LoadTasksAsync(); // فراخوانی بارگذاری مجدد
    }

    private async Task OnUserFilterChanged(int? newValue)
    {
        _filterAssignedUserId = newValue;
        await LoadTasksAsync(); // فراخوانی بارگذاری مجدد
    }

    private void OnFilterChangedDebounced(string? value)
    {
        _debounceTimer?.Stop();
        _debounceTimer?.Start();
    }

    private async void HandleDebounceTimerElapsed(object? sender, ElapsedEventArgs e)
    {
        // --- **اصلاح شده** ---
        await InvokeAsync(async () => await LoadTasksAsync()); // فراخوانی بارگذاری مجدد
    }
    // --------------------

    private string GetPersonelName(int personelId) => _personelLookup?.FirstOrDefault(p => p.USERCO == personelId)?.SAL_NAME ?? personelId.ToString();
    private string GetStatusName(int statusId) => statusId switch { 1 => "انجام نشده", 2 => "انجام شده", 3 => "لغو شده", _ => "نامشخص" };
    private string GetCustomerName(string? customerCode) => _customerLookup?.FirstOrDefault(c => c.Id == customerCode)?.Name ?? customerCode ?? string.Empty;

    private async Task ShowBulkUpdateDialog()
    {
        if (!_selectedTasks.Any()) { Snackbar.Add("لطفاً ابتدا وظایف مورد نظر را از جدول انتخاب کنید.", Severity.Warning); return; }
        var parameters = new DialogParameters<BulkUpdateTasksDialog> { { x => x.SelectedTaskIds, _selectedTasks.Select(t => t.IDNUM).ToList() } };
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Small, FullWidth = true };
        var dialog = await DialogService.ShowAsync<BulkUpdateTasksDialog>("ویرایش گروهی وظایف", parameters, options);
        var result = await dialog.Result;
        if (result != null && !result.Cancelled && result.Data is bool && (bool)result.Data)
        {
            _selectedTasks.Clear();
            await LoadTasksAsync();
            Snackbar.Add("تغییرات گروهی اعمال شد.", Severity.Success);
        }
    }

    private async Task ShowEventsDialog(long taskId)
    {
        if (taskId <= 0) return;
        var parameters = new DialogParameters<TaskEventsDialog> { { x => x.TaskId, taskId } };
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        await DialogService.ShowAsync<TaskEventsDialog>($"رویدادهای وظیفه {taskId}", parameters, options);
    }

    private async Task ShowMessagesDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        await DialogService.ShowAsync<MessagesDialog>("پیام‌های داخلی", options);
        await LoadNotificationCountsAsync();
    }

    private void ShowRemindersDialog() { Snackbar.Add("نمایش یادآوری‌ها هنوز پیاده‌سازی نشده است.", Severity.Info); }

    public void Dispose()
    {
        _notificationTimer?.Dispose();
        _debounceTimer?.Dispose();
    }
}