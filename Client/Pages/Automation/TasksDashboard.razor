@page "/automation/tasks"
@using Microsoft.AspNetCore.Authorization
@using Safir.Shared.Constants
@using Safir.Shared.Models.Automation
@using Safir.Shared.Interfaces
@using MudBlazor
@using System.Timers
@using System.Threading
@using Safir.Shared.Models
@using Safir.Shared.Utility
@using System.Globalization
@using Safir.Shared.Models

@inject LookupApiService LookupService
@inject IAutomationApiService AutomationService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject NavigationManager NavManager
@inject LookupApiService LookupService
@inject AuthenticationStateProvider AuthenticationStateProvider
@using Safir.Client.Components.Automation
@implements IDisposable

@attribute [Authorize]

<MudContainer MaxWidth="MaxWidth.False" Class="pa-2 mt-4">
    @* بخش HTML بدون تغییر باقی می‌ماند *@
    @* نمایش عنوان و دکمه‌ها *@
    <MudPaper Elevation="2" Class="pa-4 mb-4">
        <MudGrid Justify="Justify.SpaceBetween" AlignItems="Align.Center">
            <MudItem>
                <MudText Typo="Typo.h5">کارتابل اتوماسیون</MudText>
            </MudItem>
            <MudItem>
                <MudStack Row="true" Spacing="2" Class="flex-wrap">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="LoadTasksAsync" StartIcon="@Icons.Material.Filled.Refresh" Disabled="_isLoading" Class="ma-1">بروزرسانی</MudButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="ShowBulkUpdateDialog" StartIcon="@Icons.Material.Filled.EditNote" Disabled="!_selectedTasks.Any()" Class="ma-1">ویرایش گروهی</MudButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Info" OnClick="ShowMessagesDialog" StartIcon="@Icons.Material.Filled.Message" Class="ma-1">پیام‌ها (@_unreadMessageCount)</MudButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Warning" OnClick="ShowRemindersDialog" StartIcon="@Icons.Material.Filled.NotificationsActive" Class="ma-1">یادآوری‌ها (@_activeReminderCount)</MudButton>
                </MudStack>
            </MudItem>
        </MudGrid>
    </MudPaper>

    @* گرید اصلی *@
    <MudGrid Spacing="2" Style="flex-grow: 1;">
        @* --- بخش فیلترها --- *@
        <MudItem xs="12" md="2">
            <MudPaper Elevation="2" Class="pa-3" Style="height: 100%;">
                <MudText Typo="Typo.h6" GutterBottom="true">فیلترها</MudText>
                <MudStack Spacing="2">
                    @* فیلتر وضعیت *@
                    <MudRadioGroup T="int" Value="_filterStatus" ValueChanged="((int newValue) => OnStatusFilterChanged(newValue))">
                        <MudRadio Option="1" Color="Color.Primary" Size="Size.Small">انجام نشده (@_countStatus1)</MudRadio>
                        <MudRadio Option="2" Color="Color.Primary" Size="Size.Small">انجام شده (@_countStatus2)</MudRadio>
                        <MudRadio Option="3" Color="Color.Primary" Size="Size.Small">لغو شده (@_countStatus3)</MudRadio>
                        <MudRadio Option="0" Color="Color.Primary" Size="Size.Small">همه (@_countStatus0)</MudRadio>
                    </MudRadioGroup>
                    <MudDivider Class="my-2" />
                    @* فیلتر کاربر مجری *@
                    @if (_canFilterByUser)
                    {
                        <MudSelect T="int?" Label="وظایف کاربر" Value="_filterAssignedUserId" ValueChanged="((int? newValue) => OnUserFilterChanged(newValue))" Dense="true" Variant="Variant.Outlined" Clearable="true" Placeholder="-- انتخاب کاربر --">
                            @* آیتم کاربر فعلی باید با Userid (عددی) و UserNameDisplay مقداردهی شود *@
                            @if (Userid != 0)
                            {
                                <MudSelectItem T="int?" Value="Userid">@($"{UserNameDisplay ?? "شما"} ({Userid})")</MudSelectItem>
                            }
                            @if (_subordinatePersonnelLookup != null)
                            {
                                foreach (var p in _subordinatePersonnelLookup)
                                {
                                    <MudSelectItem T="int?" Value="@p.USERCO">@p.SAL_NAME</MudSelectItem>
                                }
                            }
                            else
                            {
                                <MudSelectItem T="int?" Value="null" Disabled="true">...</MudSelectItem>
                            }
                        </MudSelect>
                    }
                    @* فیلتر نوع سند *@
                    <MudTextField T="string" Label="انواع سند (skid با کاما)" @bind-Value="_filterTaskTypes" Variant="Variant.Outlined" Dense="true" OnDebounceIntervalElapsed="OnFilterChangedDebounced" DebounceInterval="500" />
                </MudStack>
            </MudPaper>
        </MudItem>

        @* --- بخش اصلی (فرم و جدول) --- *@
        <MudItem xs="12" md="10" Class="d-flex flex-column">
            @* --- فرم ورود/ویرایش وظیفه --- *@
            <MudPaper Elevation="2" Class="pa-3 mb-3">
                <EditForm Model="@_currentTask">
                    <DataAnnotationsValidator />
                    <MudForm @ref="_form">
                        <MudGrid Spacing="2">
                            <MudItem xs="12">
                                <MudTextField Label="شرح وظیفه*" @bind-Value="_currentTask.TASK" For="@(() => _currentTask.TASK)" Lines="2" Variant="Variant.Outlined" Required="true" />
                            </MudItem>
                            <MudItem xs="12" sm="6" md="3">
                                <MudSelect T="int" Label="کاربر مجری*" @bind-Value="_currentTask.PERSONEL" For="@(() => _currentTask.PERSONEL)" Variant="Variant.Outlined" Required="true" Dense="true">
                                    @if (_personelLookup != null)
                                    {
                                        foreach (var p in _personelLookup)
                                        {
                                            <MudSelectItem T="int" Value="@p.USERCO">@p.SAL_NAME</MudSelectItem>
                                        }
                                    }
                                    else
                                    {
                                        <MudSelectItem T="int" Value="0" Disabled="true">...</MudSelectItem>
                                    }
                                </MudSelect>
                            </MudItem>
                            <MudItem xs="6" sm="3" md="2">
                                <MudSelect T="int" Label="اولویت*" @bind-Value="_currentTask.PERIORITY" For="@(() => _currentTask.PERIORITY)" Variant="Variant.Outlined" Required="true" Dense="true">
                                    <MudSelectItem T="int" Value="1">فوری</MudSelectItem> <MudSelectItem T="int" Value="2">معمولی</MudSelectItem>
                                </MudSelect>
                            </MudItem>
                            <MudItem xs="6" sm="3" md="2">
                                <MudSelect T="int" Label="وضعیت*" @bind-Value="_currentTask.STATUS" For="@(() => _currentTask.STATUS)" Variant="Variant.Outlined" Required="true" Dense="true">
                                    <MudSelectItem T="int" Value="1">انجام نشده</MudSelectItem> <MudSelectItem T="int" Value="2">انجام شده</MudSelectItem> <MudSelectItem T="int" Value="3">لغو شده</MudSelectItem>
                                </MudSelect>
                            </MudItem>
                            <MudItem xs="12" sm="8" md="2">
                                <MudAutocomplete T="LookupDto<string>" Label="گیرنده (مشتری)*"
                                                 @bind-Value="SelectedCustomerForTask"
                                                 SearchFunc="SearchCustomersAsync"
                                                 ToStringFunc="@(c => c?.Name ?? string.Empty)"
                                                 ResetValueOnEmptyText="true"
                                                 CoerceText="false"
                                                 Variant="Variant.Outlined" Dense="true" Clearable="true"
                                                 Required="true"
                                                 RequiredError="انتخاب گیرنده الزامی است."
                                                 AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary">
                                    <ItemTemplate Context="customerCtx">
                                        <MudText>@customerCtx.Name (@customerCtx.Id)</MudText>
                                    </ItemTemplate>
                                    <NoItemsTemplate>
                                        <MudText>مشتری یافت نشد.</MudText>
                                    </NoItemsTemplate>
                                    <MoreItemsTemplate>
                                        <MudText>نتایج بیشتر موجود است...</MudText>
                                    </MoreItemsTemplate>
                                </MudAutocomplete>
                            </MudItem>
                            <MudItem xs="12" sm="4" md="3" Class="d-flex justify-end align-self-center">
                                <MudStack Row="true" Spacing="2">
                                    <MudButton ButtonType="ButtonType.Button" @onclick="SaveTaskAsync" Variant="Variant.Filled" Color="Color.Success" Disabled="_isSaving" StartIcon="@Icons.Material.Filled.Save" Size="Size.Small">ذخیره وظیفه</MudButton>
                                    <MudButton Variant="Variant.Filled" Color="Color.Default" OnClick="ClearFormAsync" Disabled="_isSaving" StartIcon="@Icons.Material.Filled.Clear" Size="Size.Small">جدید</MudButton>
                                </MudStack>
                            </MudItem>
                        </MudGrid>
                        <ValidationSummary />
                    </MudForm>
                </EditForm>
            </MudPaper>

            @* --- جدول وظایف --- *@
            <MudPaper Elevation="2" Class="pa-1" Style="flex: 1; overflow-y: auto; min-height: 400px;">
                <MudTable ServerData="@(new Func<TableState, Task<TableData<TaskModel>>>(ServerReload))"
                          Dense="true" Hover="true" @ref="_table" MultiSelection="true" @bind-SelectedItems="_selectedTasks"
                          Elevation="0" Breakpoint="Breakpoint.Sm" Loading="_isLoading" LoadingProgressColor="Color.Info">
                    <HeaderContent>
                        <MudTh><MudTableSortLabel SortLabel="idnum_field" T="TaskModel">ID</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortLabel="task_field" T="TaskModel">شرح وظیفه</MudTableSortLabel></MudTh>
                        <MudTh>مجری</MudTh>
                        <MudTh>اولویت</MudTh>
                        <MudTh><MudTableSortLabel SortLabel="status_field" T="TaskModel">وضعیت</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortLabel="stdate_field" T="TaskModel">تاریخ ارجاع</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortLabel="endate_field" T="TaskModel">تاریخ انجام</MudTableSortLabel></MudTh>
                        <MudTh>نام گیرنده</MudTh>
                        <MudTh>عملیات</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="ID">@context.IDNUM</MudTd>
                        <MudTd DataLabel="شرح وظیفه" Style="white-space: normal; word-break: break-word;">@context.TASK</MudTd>
                        <MudTd DataLabel="مجری">@GetPersonelName(context.PERSONEL)</MudTd>
                        <MudTd DataLabel="اولویت">
                            @if (context.PERIORITY == 1)
                            {
                                <MudChip Label="true" Color="Color.Error" Size="Size.Small">فوری</MudChip>
                            }
                            else
                            {
                                <MudChip Label="true" Color="Color.Default" Size="Size.Small">معمولی</MudChip>
                            }
                        </MudTd>
                        <MudTd DataLabel="وضعیت">@GetStatusName(context.STATUS)</MudTd>
                        <MudTd DataLabel="تاریخ ارجاع">@FormatShamsiDateFromDateTime(context.STDATE) @context.STTIME?.ToString("hh\\:mm")</MudTd>
                        <MudTd DataLabel="تاریخ انجام">@FormatShamsiDateFromDateTime(context.ENDATE) @context.ENTIME?.ToString("hh\\:mm")</MudTd>
                        <MudTd DataLabel="نام گیرنده">@GetCustomerName(context.COMP_COD)</MudTd>
                        <MudTd DataLabel="عملیات">
                            <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Small" Variant="Variant.Outlined" Color="Color.Primary" OnClick="@(() => SelectTaskForEdit(context))" Title="ویرایش" />
                            <MudIconButton Icon="@Icons.Material.Filled.ListAlt" Size="Size.Small" Variant="Variant.Outlined" Color="Color.Secondary" OnClick="@(() => ShowEventsDialog(context.IDNUM))" Title="رویدادها" />
                        </MudTd>
                    </RowTemplate>
                    <NoRecordsContent> <MudText>وظیفه‌ای یافت نشد.</MudText> </NoRecordsContent>
                    <LoadingContent> <MudText>در حال بارگذاری...</MudText> </LoadingContent>
                    <PagerContent>
                        <MudTablePager RowsPerPageString="تعداد در صفحه" InfoFormat="{first_item}-{last_item} از {all_items}" />
                        <MudSpacer />
                        <MudText Typo="Typo.body2" Class="mr-4">تعداد کل: @_totalItems</MudText>
                    </PagerContent>
                </MudTable>
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>

@inject IAutomationApiService AutomationService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject NavigationManager NavManager
@inject LookupApiService LookupService // <-- تزریق مستقیم کلاس سرویس
@inject AuthenticationStateProvider AuthenticationStateProvider
                                              // ...
@code {
    private MudTable<TaskModel>? _table;
    private MudForm? _form;
    private IEnumerable<TaskModel> _tasks = new List<TaskModel>();
    private TaskModel _currentTask = new TaskModel { PERIORITY = 2, STATUS = 1 };
    private HashSet<TaskModel> _selectedTasks = new HashSet<TaskModel>();
    private int _filterStatus = 1;
    private int? _filterAssignedUserId;
    private string? _filterTaskTypes = "1000";
    // private string _searchString = ""; // حذف شد اگر استفاده نمی‌شود
    private List<PersonelLookupModel>? _personelLookup;
    private List<PersonelLookupModel>? _subordinatePersonnelLookup;
    private bool _isLoading = false;
    private bool _isSaving = false;
    private int _totalItems = 0;
    private bool _canFilterByUser = true;
    private int _unreadMessageCount = 0;
    private int _activeReminderCount = 0;
    private int _countStatus0 = 0;
    private int _countStatus1 = 0;
    private int _countStatus2 = 0;
    private int _countStatus3 = 0;
    private System.Threading.Timer? _notificationTimer;
    private System.Timers.Timer? _debounceTimer;
    private int Userid = 0;
    private string UserNameDisplay = string.Empty;
    private string UserHES = string.Empty;
    private bool _isInitialized = false;

    private List<LookupDto<string>>? _customerLookup; // این لیست با داده‌های واقعی پر خواهد شد
    private LookupDto<string>? _selectedCustomerForTask;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var currentUserPrincipal = authState.User;
        if (currentUserPrincipal?.Identity?.IsAuthenticated == true)
        {
            var userIdClaim = currentUserPrincipal.FindFirst(BaseknowClaimTypes.IDD)?.Value;
            UserNameDisplay = currentUserPrincipal.FindFirst(BaseknowClaimTypes.UUSER)?.Value ?? string.Empty;
            UserHES = currentUserPrincipal.FindFirst(BaseknowClaimTypes.USER_HES)?.Value ?? string.Empty;
            if (string.IsNullOrEmpty(userIdClaim) || !int.TryParse(userIdClaim, out Userid) || Userid == 0)
            {
                Snackbar.Add("اطلاعات کاربر برای بارگذاری کارتابل ناقص یا نامعتبر است.", Severity.Error, config => { config.RequireInteraction = true; });
                _isInitialized = false;
                return;
            }
            _filterAssignedUserId = Userid;
            _currentTask.PERSONEL = Userid;
            if (!string.IsNullOrWhiteSpace(UserHES))
            {
                _currentTask.COMP_COD = UserHES;
            }
        }
        else
        {
            Snackbar.Add("کاربر احراز هویت نشده است.", Severity.Warning);
            _isInitialized = false;
            // NavManager.NavigateTo("/login"); // یا مسیر لاگین شما
            return;
        }
        _isLoading = true; // برای بارگذاری اولیه کل صفحه
        try
        {
            _canFilterByUser = await AutomationService.CanViewSubordinateTasksAsync();
            // حالا LoadLookupsAsync را فراخوانی می‌کنیم که شامل بارگذاری مشتریان هم می‌شود
            await LoadLookupsAsync(); // این متد شامل بارگذاری مشتریان خواهد بود
            await LoadNotificationCountsAsync(); // این را هم می‌توان همزمان یا بعد از lookups انجام داد
            SetupNotificationTimer();
            _debounceTimer = new System.Timers.Timer(500);
            _debounceTimer.Elapsed += HandleDebounceTimerElapsed;
            _debounceTimer.AutoReset = false;
            _isInitialized = true;
        }
        catch (Exception ex)
        {
            Snackbar.Add($"خطا در مقداردهی اولیه صفحه: {ex.Message}", Severity.Error);
            _isInitialized = false;
        }
        finally
        {
            // _isLoading توسط ServerReload مدیریت خواهد شد.
            // اما برای بارگذاری اولیه، می‌توانیم اینجا false کنیم اگر ServerReload بلافاصله اجرا نشود.
            // اگر MudTable بلافاصله ServerReload را صدا می‌زند، این خط می‌تواند حذف شود.
            _isLoading = false;
            await InvokeAsync(StateHasChanged);
        }
    }
    private string FormatShamsiDateFromDateTime(DateTime? dt)
    {
        if (!dt.HasValue) return string.Empty;
        try
        {
            PersianCalendar pc = new PersianCalendar();
            return $"{pc.GetYear(dt.Value):D4}/{pc.GetMonth(dt.Value):D2}/{pc.GetDayOfMonth(dt.Value):D2}";
        }
        catch { return dt.Value.ToString("yyyy/MM/dd"); }
    }
    private async Task LoadLookupsAsync()
    {
        //_isLoadingLookups = true; // برای نمایش وضعیت لودینگ (اگر UI جداگانه‌ای برایش دارید)
                                  // await InvokeAsync(StateHasChanged); // اگر می‌خواهید وضعیت لودینگ فوراً نمایش داده شود
        try
        {
            var personelTask = AutomationService.GetPersonelLookupAsync();
            // --- فراخوانی متد جدید برای دریافت لیست مشتریان ---
            var customerTask = LookupService.GetCustomerLookupAsync();
            // اگر می‌خواهید در ابتدا جستجوی خالی ارسال شود، می‌توانید searchTerm را null بگذارید
            // یا اگر می‌خواهید با یک مقدار پیش‌فرض (مثل UserHES) شروع شود، آن را ارسال کنید.
            var subordinateTask = _canFilterByUser ? LookupService.GetSubordinatesAsync() : Task.FromResult<List<PersonelLookupModel>?>(new List<PersonelLookupModel>());
            await Task.WhenAll(personelTask, customerTask, subordinateTask);
            _personelLookup = (await personelTask)?.ToList() ?? new List<PersonelLookupModel>();
            // --- ذخیره لیست مشتریان واقعی ---
            _customerLookup = (await customerTask)?.ToList() ?? new List<LookupDto<string>>();
            _subordinatePersonnelLookup = (await subordinateTask)?.ToList() ?? new List<PersonelLookupModel>();
            // اضافه کردن مشتری پیش‌فرض کاربر (UserHES) به لیست اگر وجود نداشت و لیست مشتریان خالی نیست
            if (!string.IsNullOrWhiteSpace(UserHES) && _customerLookup != null && _customerLookup.All(c => c.Id != UserHES))
            {
                // تلاش برای یافتن نام واقعی مشتری از لیست بارگذاری شده
                var foundUserHesCustomer = _customerLookup.FirstOrDefault(c => c.Id == UserHES);
                if (foundUserHesCustomer != null)
                {
                    // اگر از قبل در لیست بود (که با All چک کردیم نیست)، این بخش اجرا نمی‌شود
                    // اما اگر به نحوی فقط نامش فرق داشت و خواستیم آپدیت کنیم، اینجا می‌آمد
                }
                else
                {
                    // اگر در لیست اولیه نبود، جداگانه با کدش از سرور درخواست بده (برای دریافت نام صحیح)
                    var specificCustomerList = await LookupService.GetCustomerLookupAsync(UserHES);
                    if (specificCustomerList != null && specificCustomerList.Any())
                    {
                        _customerLookup.Insert(0, specificCustomerList.First());
                    }
                    else
                    {
                        // اگر باز هم پیدا نشد، با نام پیش‌فرض اضافه کن
                        _customerLookup.Insert(0, new LookupDto<string> { Id = UserHES, Name = $"مشتری پیشفرض ({UserHES})" });
                    }
                }
            }
            // اگر _currentTask.COMP_COD از قبل UserHES بود و UserHES در لیست نبود، حالا اضافه شده است.
        }
        catch (Exception ex)
        {
            Snackbar.Add($"خطا در بارگذاری لیست‌های پایه: {ex.Message}", Severity.Error);
            _personelLookup ??= new List<PersonelLookupModel>();
            _subordinatePersonnelLookup ??= new List<PersonelLookupModel>();
            _customerLookup ??= new List<LookupDto<string>>();
        }
        finally
        {
            //_isLoadingLookups = false;
            // await InvokeAsync(StateHasChanged); // ServerReload این کار را انجام می‌دهد
        }
    }
    private async Task LoadNotificationCountsAsync()
    {
        try
        {
            _unreadMessageCount = await AutomationService.GetUnreadMessageCountAsync();
            _activeReminderCount = await AutomationService.GetActiveReminderCountAsync();
        }
        catch (Exception ex) { Snackbar.Add($"خطا در دریافت تعداد اعلان‌ها: {ex.Message}", Severity.Warning); }
        // StateHasChanged در اینجا معمولا توسط OnInitializedAsync یا ServerReload مدیریت می‌شود.
    }
    private void SetupNotificationTimer()
    {
        _notificationTimer = new System.Threading.Timer(async _ =>
        {
            await InvokeAsync(LoadNotificationCountsAsync);
            await InvokeAsync(StateHasChanged);
        }, null, TimeSpan.FromMinutes(1), TimeSpan.FromMinutes(1));
    }
    private async Task HandleTimerCallback() // این متد دیگر مستقیماً توسط تایمر فراخوانی نمی‌شود
    {
        // منطق این متد به داخل لامبدای SetupNotificationTimer منتقل شد
    }
    private async Task<TableData<TaskModel>> ServerReload(TableState state)
    {
        if (!_isInitialized)
        {
            return new TableData<TaskModel>() { TotalItems = 0, Items = Enumerable.Empty<TaskModel>() };
        }
        _isLoading = true;
        await InvokeAsync(StateHasChanged);
        IEnumerable<TaskModel> pagedData = Enumerable.Empty<TaskModel>();
        _totalItems = 0;
        try
        {
            int? userIdForApi = (_filterAssignedUserId == null || _filterAssignedUserId == 0) ? Userid : _filterAssignedUserId;
            var allTasks = await AutomationService.GetTasksAsync(
            statusFilter: _filterStatus,
            assignedUserId: userIdForApi,
            taskTypes: string.IsNullOrWhiteSpace(_filterTaskTypes) || _filterTaskTypes.Trim() == "1000" ? "1000" : _filterTaskTypes);
            _tasks = allTasks?.ToList() ?? new List<TaskModel>(); // تبدیل به لیست برای شمارش و مرتب سازی
            _totalItems = _tasks.Count();
            UpdateStatusCounts();
            var sortedData = _tasks.AsEnumerable(); // برای استفاده از OrderByDirection
            if (!string.IsNullOrEmpty(state.SortLabel))
            {
                // ... (بخش مرتب‌سازی بدون تغییر) ...
                switch (state.SortLabel)
                {
                    case "idnum_field": sortedData = sortedData.OrderByDirection(state.SortDirection, t => t.IDNUM); break;
                    case "task_field": sortedData = sortedData.OrderByDirection(state.SortDirection, t => t.TASK); break;
                    case "status_field": sortedData = sortedData.OrderByDirection(state.SortDirection, t => t.STATUS); break;
                    case "stdate_field": sortedData = sortedData.OrderByDirection(state.SortDirection, t => t.STDATE); break;
                    case "endate_field": sortedData = sortedData.OrderByDirection(state.SortDirection, t => t.ENDATE); break;
                }
            }
            pagedData = sortedData.Skip(state.Page * state.PageSize).Take(state.PageSize).ToList();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"خطا در بارگذاری وظایف: {ex.Message}", Severity.Error);
            _tasks = Enumerable.Empty<TaskModel>();
            pagedData = Enumerable.Empty<TaskModel>();
            _totalItems = 0;
            UpdateStatusCounts();
        }
        finally
        {
            _isLoading = false;
            await InvokeAsync(StateHasChanged);
        }
        return new TableData<TaskModel>() { TotalItems = _totalItems, Items = pagedData };
    }
    private async Task LoadTasksAsync()
    {
        if (_table != null)
        {
            await _table.ReloadServerData();
        }
    }
    private void UpdateStatusCounts()
    {
        // این متد باید از _tasks که کل وظایف (قبل از صفحه‌بندی) است، استفاده کند.
        var tasksForCount = _tasks ?? Enumerable.Empty<TaskModel>(); // اطمینان از null نبودن
        _countStatus1 = tasksForCount.Count(t => t.STATUS == 1);
        _countStatus2 = tasksForCount.Count(t => t.STATUS == 2);
        _countStatus3 = tasksForCount.Count(t => t.STATUS == 3);
        _countStatus0 = _totalItems;
    }
    private async Task SaveTaskAsync()
    {
        if (_form == null) return;
        await _form.Validate();
        if (!_form.IsValid) { Snackbar.Add("لطفاً اطلاعات الزامی فرم را تکمیل کنید.", Severity.Warning); return; }
        _isSaving = true;
        await InvokeAsync(StateHasChanged); // نمایش وضعیت ذخیره‌سازی
        bool success = false;
        string successMessage = string.Empty;
        try
        {
            if (_currentTask.IDNUM > 0)
            {
                success = await AutomationService.UpdateTaskAsync(_currentTask.IDNUM, _currentTask);
                successMessage = "وظیفه با موفقیت بروزرسانی شد.";
            }
            else
            {
                if (_currentTask.PERSONEL == 0 && Userid != 0) _currentTask.PERSONEL = Userid;
                // COMP_COD باید از MudSelect مقدار گرفته باشد
                // if (string.IsNullOrEmpty(_currentTask.COMP_COD) && !string.IsNullOrEmpty(UserHES)) _currentTask.COMP_COD = UserHES; // این خط دیگر لازم نیست
                var createdTask = await AutomationService.CreateTaskAsync(_currentTask);
                success = createdTask != null;
                if (success && createdTask != null) _currentTask.IDNUM = createdTask.IDNUM;
                successMessage = "وظیفه با موفقیت ایجاد شد.";
            }
            if (success)
            {
                Snackbar.Add(successMessage, Severity.Success);
                await ClearFormAsync();
                await LoadTasksAsync();
            }
            else
            {
                Snackbar.Add("خطا در ذخیره سازی وظیفه.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"خطا در ذخیره سازی: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isSaving = false;
            await InvokeAsync(StateHasChanged);
        }
    }
    private async Task ClearFormAsync()
    {
        _currentTask = new TaskModel { PERIORITY = 2, STATUS = 1 };
        if (Userid != 0)
        {
            _currentTask.PERSONEL = Userid;
        }
        // مقداردهی اولیه مشتری پیش‌فرض برای وظیفه جدید
        if (!string.IsNullOrWhiteSpace(UserHES) && _customerLookup != null)
        {
            SelectedCustomerForTask = _customerLookup.FirstOrDefault(c => c.Id == UserHES);
            // اگر SelectedCustomerForTask مقدار گرفت، COMP_COD هم در setter آن آپدیت می‌شود.
            if (SelectedCustomerForTask == null) // اگر UserHES در لیست نبود (بعید است با منطق LoadLookupsAsync)
            {
                _currentTask.COMP_COD = UserHES; // مستقیماً کد را قرار بده
            }
        }
        else
        {
            SelectedCustomerForTask = null; // پاک کردن انتخاب قبلی
            _currentTask.COMP_COD = null;
        }
        if (_form != null)
        {
            await _form.ResetAsync();
        }
        await InvokeAsync(StateHasChanged);
    }
    private void SelectTaskForEdit(TaskModel task)
    {
        _currentTask = new TaskModel // ایجاد یک نمونه جدید برای جلوگیری از تغییر ناخواسته آیتم در جدول
            {
                IDNUM = task.IDNUM,
                PERSONEL = task.PERSONEL,
                TASK = task.TASK,
                PERIORITY = task.PERIORITY,
                STATUS = task.STATUS,
                STDATE = task.STDATE,
                STTIME = task.STTIME,
                ENDATE = task.ENDATE,
                ENTIME = task.ENTIME,
                COMP_COD = task.COMP_COD, // این مقدار مهم است
                NAME = task.NAME,
                skid = task.skid,
                num = task.num
            };
        // --- مقداردهی اولیه SelectedCustomerForTask بر اساس COMP_COD وظیفه انتخاب شده ---
        if (!string.IsNullOrWhiteSpace(_currentTask.COMP_COD) && _customerLookup != null)
        {
            SelectedCustomerForTask = _customerLookup.FirstOrDefault(c => c.Id == _currentTask.COMP_COD);
        }
        else
        {
            SelectedCustomerForTask = null;
        }
        // --- پایان مقداردهی اولیه ---
        _form?.ResetValidation(); // پاک کردن وضعیت ولیدیشن فرم قبلی
        StateHasChanged(); // بروزرسانی UI برای نمایش داده‌های تسک انتخاب شده در فرم
    }
    private async Task OnStatusFilterChanged(int newValue)
    {
        _filterStatus = newValue;
        await LoadTasksAsync();
    }
    private async Task OnUserFilterChanged(int? newValue)
    {
        _filterAssignedUserId = newValue;
        await LoadTasksAsync();
    }
    private void OnFilterChangedDebounced(string? value) // 'value' is the bound _filterTaskTypes
    {
        // _filterTaskTypes = value; // No need to set it again, it's already bound
        _debounceTimer?.Stop();
        _debounceTimer?.Start();
    }
    private async void HandleDebounceTimerElapsed(object? sender, ElapsedEventArgs e)
    {
        await InvokeAsync(LoadTasksAsync);
    }
    private string GetPersonelName(int personelId) => _personelLookup?.FirstOrDefault(p => p.USERCO == personelId)?.SAL_NAME ?? personelId.ToString();
    private string GetStatusName(int statusId) => statusId switch { 1 => "انجام نشده", 2 => "انجام شده", 3 => "لغو شده", _ => "نامشخص" };
    // --- متد GetCustomerName به‌روز شده برای استفاده از _customerLookup ---
    private string GetCustomerName(string? customerCode)
    {
        if (string.IsNullOrEmpty(customerCode)) return string.Empty;
        return _customerLookup?.FirstOrDefault(c => c.Id == customerCode)?.Name ?? customerCode;
    }
    private async Task ShowBulkUpdateDialog()
    {
        if (!_selectedTasks.Any()) { Snackbar.Add("لطفاً ابتدا وظایف مورد نظر را از جدول انتخاب کنید.", Severity.Warning); return; }
        var parameters = new DialogParameters<BulkUpdateTasksDialog> { { x => x.SelectedTaskIds, _selectedTasks.Select(t => t.IDNUM).ToList() } };
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Small, FullWidth = true };
        var dialog = await DialogService.ShowAsync<BulkUpdateTasksDialog>("ویرایش گروهی وظایف", parameters, options);
        var result = await dialog.Result;
        if (result != null && !result.Cancelled && result.Data is bool updated && updated)
        {
            _selectedTasks.Clear();
            await LoadTasksAsync();
            Snackbar.Add("تغییرات گروهی اعمال شد.", Severity.Success);
        }
    }
    private async Task ShowEventsDialog(long taskId)
    {
        if (taskId <= 0) return;
        var parameters = new DialogParameters<TaskEventsDialog> { { x => x.TaskId, taskId } };
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        await DialogService.ShowAsync<TaskEventsDialog>($"رویدادهای وظیفه {taskId}", parameters, options);
    }
    private async Task ShowMessagesDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        var dialog = await DialogService.ShowAsync<MessagesDialog>("پیام‌های داخلی", options);
        await LoadNotificationCountsAsync();
        await InvokeAsync(StateHasChanged);
    }
    private void ShowRemindersDialog() { Snackbar.Add("نمایش یادآوری‌ها هنوز پیاده‌سازی نشده است.", Severity.Info); }
    public void Dispose()
    {
        _notificationTimer?.Dispose();
        _debounceTimer?.Dispose();
    }

    private LookupDto<string>? SelectedCustomerForTask
    {
        get => _selectedCustomerForTask;
        set
        {
            _selectedCustomerForTask = value;
            // وقتی یک مشتری از Autocomplete انتخاب می‌شود، COMP_COD در _currentTask را آپدیت کن
            if (value != null)
            {
                _currentTask.COMP_COD = value.Id;
            }
            else
            {
                // اگر مقدار Autocomplete پاک شد، COMP_COD را هم پاک کن
                // یا بر اساس منطق خودتان رفتار دیگری تعریف کنید (مثلاً مقدار پیش‌فرض)
                _currentTask.COMP_COD = null;
            }
            // StateHasChanged(); // معمولاً لازم نیست چون بایندینگ خودکار انجام می‌شود
        }
    }

        // --- متد جدید برای جستجوی مشتریان در MudAutocomplete ---
    private async Task<IEnumerable<LookupDto<string>>> SearchCustomersAsync(string value)
    {
        // اگر _customerLookup هنوز بارگذاری نشده یا خالی است، لیست خالی برگردان
        if (_customerLookup == null || !_customerLookup.Any())
            return Enumerable.Empty<LookupDto<string>>();

        // اگر ورودی جستجو خالی است، می‌توانیم یک تعداد محدود از ابتدای لیست را برگردانیم
        // یا لیست خالی (بستگی به تجربه کاربری مورد نظر دارد)
        if (string.IsNullOrEmpty(value))
            return await Task.FromResult(_customerLookup.Take(10)); // نمایش ۱۰ مشتری اول یا همه اگر کمتر است

        // فیلتر کردن لیست مشتریان بر اساس نام یا کد (Id)
        // StringComparison.OrdinalIgnoreCase برای جستجوی غیر حساس به حروف بزرگ و کوچک
        var filteredCustomers = _customerLookup
            .Where(c => (c.Name != null && c.Name.Contains(value, StringComparison.OrdinalIgnoreCase)) ||
                        (c.Id != null && c.Id.Contains(value, StringComparison.OrdinalIgnoreCase)))
            .Take(15); // محدود کردن تعداد نتایج نمایش داده شده برای کارایی بهتر

        return await Task.FromResult(filteredCustomers);
    }
}