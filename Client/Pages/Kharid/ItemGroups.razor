@page "/item-groups"
@implements IDisposable

@using Safir.Shared.Models.Kala
@using Safir.Shared.Models
@using Microsoft.AspNetCore.Components
@using Microsoft.Extensions.Logging
@using Safir.Client.Services
@using System.Collections.Generic
@using System.Linq
@using System.Timers


<MudContainer MaxWidth="MaxWidth.False" Class="mt-4 px-0">

    <MudToolBar Dense="true" Class="mb-4 px-2">
        <MudText Typo="Typo.h6">گروه‌های کالا</MudText>
        <MudSpacer />
        <MudTextField T="string"
                      Value="_groupSearchTerm" ValueChanged="OnGroupSearchTermChanged" Placeholder="جستجو گروه..."
                      Variant="Variant.Outlined"
                      Margin="Margin.Dense"
                      Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search"
                      IconSize="Size.Small"
                      Immediate="true"
                      Clearable="true"
                      Style="max-width: 300px;" />
    </MudToolBar>

    @if (_isLoadingGroups)
    {
        <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-2" />
    }
    else if (!string.IsNullOrEmpty(_groupErrorMessage))
    {
        <MudAlert Severity="Severity.Error" Class="mx-2">@_groupErrorMessage</MudAlert>
    }
    else
    {
        <div style="display: flex; overflow-x: auto; white-space: nowrap; padding: 8px 4px; margin-bottom: 16px; background-color: var(--mud-palette-background-grey); border-radius: var(--mud-default-borderradius);" class="mud-scrollbar-thin">
            @if (GetFilteredGroups().Any())
            {
                @foreach (var group in GetFilteredGroups())
                {
                    <div style="display: inline-block; margin: 0 4px;">
                        <MudPaper Class="pa-2" Elevation="@(_selectedGroup == group ? 8 : 2)" Style="@($"cursor:pointer; border: {(_selectedGroup == group ? "1px solid var(--mud-palette-primary)" : "none")}; width: 120px; height: 100px; display: flex; flex-direction: column; align-items: center; justify-content: center;")" @onclick="() => HandleGroupClick(group)">
                            @if (group.pic != null && group.pic.Length > 0)
                            {
                                <MudImage Src="@GetImageDataUrl(group.pic)" Alt="@group.NAMES" Width="48" Height="48" ObjectFit="ObjectFit.Contain" Class="mb-1" />
                            }
                            else
                            {
                                <MudAvatar Size="Size.Medium" Class="mb-1"><MudIcon Icon="@Icons.Material.Filled.Storefront" /></MudAvatar>
                            }
                            <MudText Typo="Typo.caption" Align="Align.Center" Style="line-height: 1.2; margin-top: 4px;">@group.NAMES</MudText>
                        </MudPaper>
                    </div>
                }
            }
            else
            {
                <MudAlert Severity="Severity.Info" Dense="true" Style="width:100%;" Elevation="0" Square="true">
                    @if (string.IsNullOrWhiteSpace(_groupSearchTerm))
                    {
                        @("هیچ گروهی یافت نشد.")
                    }
                    else
                    {
                        @($"موردی با '{_groupSearchTerm}' یافت نشد.")
                    }
                </MudAlert>
            }
        </div> <MudContainer MaxWidth="MaxWidth.False" Class="px-2">
            @if (_selectedGroup != null)
            {
                <MudDivider Class="my-4" />

                <MudToolBar Dense="true" Class="mb-2">
                    <MudText Typo="Typo.h6">کالاها: @_selectedGroup.NAMES</MudText>
                    <MudSpacer />
                    <MudTextField T="string"
                                  Value="_itemSearchTerm" ValueChanged="OnItemSearchInput" Placeholder="جستجو کالا..."
                                  Variant="Variant.Outlined"
                                  Margin="Margin.Dense"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Search"
                                  IconSize="Size.Small"
                                  Immediate="true"
                                  Clearable="true"
                                  Style="max-width: 250px; margin-left: 8px;" />
                    <MudToggleIconButton Toggled="_isListView" ToggledChanged="OnViewToggleChanged" Icon="@Icons.Material.Filled.ViewModule" Color="Color.Primary" Title="نمایش کارتی"
                                         ToggledIcon="@Icons.Material.Filled.ViewList" ToggledColor="Color.Secondary" ToggledTitle="نمایش لیستی" />
                </MudToolBar>

                @if (_isItemsLoading)
                {
                    <div class="d-flex justify-center align-center pa-4" style="height: 200px;"> <MudProgressCircular Color="Color.Secondary" Indeterminate="true" Size="Size.Large" /> </div>
                }
                else if (!string.IsNullOrEmpty(_itemsErrorMessage))
                {
                    <MudAlert Severity="Severity.Warning" Class="mt-2">@_itemsErrorMessage</MudAlert>
                }
                else if (_items == null || !_items.Any())
                {
                    <MudAlert Severity="Severity.Info" Class="mt-2">
                        @if (string.IsNullOrWhiteSpace(_itemSearchTerm))
                        {
                            @("کالایی در این گروه یافت نشد.")
                        }
                        else
                        {
                            @($"کالایی با عبارت '{_itemSearchTerm}' در این گروه یافت نشد.")
                        }
                    </MudAlert>
                }
                else
                {
                    @if (_isListView)
                    {
                        <MudList Clickable="true">
                            @foreach (var item in _items)
                            {
                                <MudListItem>
                                    <MudListItemAvatar>
                                        @if (item.ImageExists)
                                        {
                                            <MudAvatar Image="@($"api/items/image/{item.CODE}")" Alt="@item.NAME" />
                                        }
                                        else
                                        {
                                            <MudAvatar Color="Color.Default"><MudIcon Icon="@Icons.Material.Filled.ShoppingBag" /></MudAvatar>
                                        }
                                    </MudListItemAvatar>
                                    <MudListItemText>
                                        <MudText Typo="Typo.body1">@item.NAME</MudText>
                                        <MudText Typo="Typo.body2">کد: @item.CODE | قیمت: @item.MABL_F.ToString("N0") ریال</MudText>
                                    </MudListItemText>
                                    <MudListItemAction>
                                        <MudIconButton Icon="@Icons.Material.Filled.AddShoppingCart" Color="Color.Secondary" Size="Size.Small" />
                                    </MudListItemAction>
                                </MudListItem>
                                <MudDivider Inset="true" />
                            }
                        </MudList>
                    }
                    else
                    {
                        <MudGrid Spacing="3" Justify="Justify.FlexStart">
                            @foreach (var item in _items)
                            {
                                <MudItem xs="12" sm="6" md="4" lg="3" xl="2">
                                    <MudCard Elevation="3" Style="min-height: 330px; display: flex; flex-direction: column;">
                                        <div style="height: 180px; display: flex; align-items: center; justify-content: center; background-color: var(--mud-palette-background-grey);">
                                            @if (item.ImageExists)
                                            {
                                                <MudImage Src="@($"api/items/image/{item.CODE}")" Alt="@item.NAME" Height="170" ObjectFit="ObjectFit.Contain" />
                                            }
                                            else
                                            {
                                                <MudIcon Icon="@Icons.Material.Filled.ShoppingBag" Size="Size.Large" Color="Color.Default" />
                                            }
                                        </div>
                                        <MudCardContent Style="flex-grow: 1;">
                                            <MudText Typo="Typo.body2" Style="min-height: 3.6em; overflow: hidden; display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical;">@item.NAME</MudText>
                                            <MudText Typo="Typo.caption" Color="Color.Secondary">کد: @item.CODE</MudText>
                                            <MudText Typo="Typo.body1" Align="Align.End" Color="Color.Primary" Class="mt-2">@item.MABL_F.ToString("N0") ریال</MudText>
                                        </MudCardContent>
                                        <MudCardActions Class="mt-auto">
                                            <MudButton Size="Size.Small" Variant="Variant.Text" Color="Color.Primary">جزئیات</MudButton>
                                            <MudSpacer />
                                            <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.AddShoppingCart" Color="Color.Secondary" />
                                        </MudCardActions>
                                    </MudCard>
                                </MudItem>
                            }
                        </MudGrid>
                    }

                    @if (_totalPages > 1)
                    {
                        <MudPagination Count="_totalPages"
                                       Selected="_currentPage" SelectedChanged="HandlePageChangedAsync" Class="mt-4 d-flex justify-center"
                                       ShowFirstButton="true"
                                       ShowLastButton="true"
                                       Color="Color.Primary" />
                    }
                }
            }
        </MudContainer>
    }

</MudContainer>

@code 
{
    // --- Component State ---
    private List<ItemGroupDto>? _itemGroups;
    private ItemGroupDto? _selectedGroup;
    private bool _isLoadingGroups = false;
    private string? _groupErrorMessage;
    private string _groupSearchTerm = string.Empty;

    private List<ItemDto>? _items;
    private bool _isItemsLoading = false;
    private string? _itemsErrorMessage;
    private string _itemSearchTerm = string.Empty;
    private Timer? _itemSearchDebounceTimer;

    private int _currentPage = 1;
    private int _pageSize = 12;
    private int _totalItemCount = 0;
    private int _totalPages => (_totalItemCount == 0 || _pageSize <= 0) ? 0 : (_totalItemCount + _pageSize - 1) / _pageSize;

    private bool _isListView = false;

    // --- Injected Services ---
    [Inject] private ItemGroupApiService ItemGroupService { get; set; } = default!;
    [Inject] private ISnackbar Snackbar { get; set; } = default!;
    [Inject] private ILogger<ItemGroups> Logger { get; set; } = default!;
    [Inject] private NavigationManager NavManager { get; set; } = default!;


    // --- Lifecycle Methods ---
    protected override void OnInitialized()
    {
        _itemSearchDebounceTimer = new Timer(500);
        _itemSearchDebounceTimer.Elapsed += async (s, e) => await HandleItemSearchDebounced();
        _itemSearchDebounceTimer.AutoReset = false;
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadGroupsAsync();
    }

    public void Dispose()
    {
        _itemSearchDebounceTimer?.Dispose();
    }

    private async Task LoadGroupsAsync()
    {
        if (_isLoadingGroups) return;
        _isLoadingGroups = true; _groupErrorMessage = null; _selectedGroup = null; _items = null; _isItemsLoading = false; _itemsErrorMessage = null; _currentPage = 1; _totalItemCount = 0; _itemSearchTerm = string.Empty; _groupSearchTerm = string.Empty;
        await InvokeAsync(StateHasChanged);
        try { _itemGroups = await ItemGroupService.GetItemGroupsAsync(); if (_itemGroups == null) { _groupErrorMessage = "Error loading groups."; _itemGroups = new(); Snackbar.Add(_groupErrorMessage, Severity.Error); } }
        catch (Exception ex) { _groupErrorMessage = "Unexpected error loading groups."; Logger.LogError(ex, _groupErrorMessage); Snackbar.Add(_groupErrorMessage, Severity.Error); _itemGroups ??= new(); }
        finally { _isLoadingGroups = false; await InvokeAsync(StateHasChanged); }
    }

    private async Task LoadItemsForSelectedGroupAsync()
    {
        if (_selectedGroup == null || _isItemsLoading) return;
        _isItemsLoading = true; _itemsErrorMessage = null;
        await InvokeAsync(StateHasChanged);
        try
        {
            Logger.LogInformation("Loading items page {Page} for group {GroupCode}, Search: '{ItemSearch}'", _currentPage, _selectedGroup.CODE, _itemSearchTerm);
            var pagedResult = await ItemGroupService.GetItemsByGroupAsync(_selectedGroup.CODE, _currentPage, _pageSize, _itemSearchTerm); // Pass search term
            if (pagedResult != null) { _items = pagedResult.Items; _totalItemCount = pagedResult.TotalCount; }
            else { _itemsErrorMessage = "Error loading items."; Snackbar.Add(_itemsErrorMessage, Severity.Warning); _items = new(); _totalItemCount = 0; }
        }
        catch (Exception ex)
        {
            _itemsErrorMessage = "Unexpected error loading items."; Logger.LogError(ex, "Error loading items"); Snackbar.Add(_itemsErrorMessage, Severity.Error); _items = new(); _totalItemCount = 0;
        }
        finally { _isItemsLoading = false; await InvokeAsync(StateHasChanged); }
    }

    // --- UI Event Handlers ---
    private async Task HandleGroupClick(ItemGroupDto group)
    {
        if (group == null || _isItemsLoading) return;
        if (_selectedGroup != group)
        {
            _selectedGroup = group; _currentPage = 1; _totalItemCount = 0; _items = null; _itemSearchTerm = string.Empty; _isListView = false;
            _itemSearchDebounceTimer?.Stop();
            await LoadItemsForSelectedGroupAsync();
        }
    }

    private async Task HandleItemSearchDebounced()
    {
        await InvokeAsync(async () =>
        {
            if (_selectedGroup == null) return;
            Logger.LogInformation("Debounced item search triggered for: {SearchTerm}", _itemSearchTerm);
            _currentPage = 1;
            _totalItemCount = 0;
            await LoadItemsForSelectedGroupAsync();
        });
    }

    // UPDATED: Handles ValueChanged for group search
    private void OnGroupSearchTermChanged(string newValue)
    {
        //     StateHasChanged(); // Trigger filter re-render
        _groupSearchTerm = newValue;
        // No need to call StateHasChanged usually, filter method is called on render
    }

    // UPDATED: Handles ValueChanged for item search, triggers debounce
    private void OnItemSearchInput(string newValue)
    {
        _itemSearchTerm = newValue;
        _itemSearchDebounceTimer?.Stop();
        _itemSearchDebounceTimer?.Start();
    }

    // UPDATED: Handles ToggledChanged for view toggle
    private void OnViewToggleChanged(bool newValue)
    {
        _isListView = newValue;
        // Optional: log or add other logic if needed when view changes
    }


    // UPDATED: Handles SelectedChanged for pagination
    private async Task HandlePageChangedAsync(int newPage)
    {
        if (_isItemsLoading) return; // Prevent changing page while loading
        _currentPage = newPage; // Update the current page
        Logger.LogInformation("Page changed to: {NewPage}", _currentPage);
        await LoadItemsForSelectedGroupAsync();
    }

    // --- Helper Methods ---
    private IEnumerable<ItemGroupDto> GetFilteredGroups()
    {
        if (_itemGroups == null) return Enumerable.Empty<ItemGroupDto>();
        if (string.IsNullOrWhiteSpace(_groupSearchTerm)) return _itemGroups;
        try { return _itemGroups.Where(g => g.NAMES != null && g.NAMES.Contains(_groupSearchTerm, StringComparison.OrdinalIgnoreCase)).ToList(); }
        catch (Exception ex) { Logger.LogError(ex, "Filter error"); Snackbar.Add("Filter error", Severity.Warning); return _itemGroups; }
    }

    private string? GetImageDataUrl(byte[]? imageData)
    {
        if (imageData == null || imageData.Length == 0) return null;
        try { var b64 = Convert.ToBase64String(imageData); return $"data:image/jpeg;base64,{b64}"; }
        catch (Exception ex) { Logger.LogError(ex, "Base64 error"); return null; }
    }
}
