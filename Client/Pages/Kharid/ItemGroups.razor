@page "/item-groups"
@attribute [Authorize]
@implements IDisposable

@using System.Security.Claims
@using System.Collections.Generic
@using System.Linq
@using System.Timers
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Extensions.Logging
@using MudBlazor

@using Safir.Client.Services
@using Safir.Client.Shared
@using Safir.Shared.Constants
@using Safir.Shared.Models
@using Safir.Shared.Models.Kala
@using Safir.Shared.Models.Kharid
@using Safir.Shared.Models.Taarif

@using Microsoft.AspNetCore.Components.Authorization
@using System.Text.Json;
@inject AuthenticationStateProvider AuthenticationStateProvider

@inject LookupApiService LookupService
@inject ShoppingCartService CartService
@inject ItemGroupApiService ItemGroupService
@inject ISnackbar Snackbar
@inject ILogger<ItemGroups> Logger
@inject NavigationManager NavManager
@inject PermissionApiService PermissionService
@inject ClientAppSettingsService AppSettingsService
@inject IJSRuntime jsRuntime // برای localStorage

<MudContainer MaxWidth="MaxWidth.False" Class="mt-4 px-md-4 px-2">

    <MudPaper Elevation="2" Class="mb-4 pa-3">
        @if (_isLoadingLookups || _isLoadingElamieTfDetails)
        {
            <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-2" />
        }

        <MudExpansionPanels>
            <MudExpansionPanel Text="تنظیمات قیمتی">
                <MudGrid Spacing="2">
                    <MudItem xs="12" sm="6" md="4" lg="3">
                        <MudSelect T="LookupDto<int?>" Label="نوع مشتری" Disabled="@_isLoadingLookups"
                                   Value="_selectedCustomerType"
                                   ValueChanged="HandleCustomerTypeChanged"
                                   ToStringFunc="@(c => c?.Name ?? string.Empty)"
                                   Variant="Variant.Outlined"
                                   ReadOnly="!_canChangeCustomerType || _isLoadingLookups ||_pricingLocked"
                                   Margin="Margin.Dense"
                                   Placeholder="انتخاب کنید..." Dense="true">
                            @if (_customerTypeList != null)
                            {
                                @foreach (var custType in _customerTypeList)
                                {
                                    <MudSelectItem Value="custType">@custType.Name</MudSelectItem>
                                }
                            }
                        </MudSelect>
                    </MudItem>

                    <MudItem xs="12" sm="6" md="4" lg="3">
                        <MudAutocomplete T="LookupDto<int?>" Label="واحد (دپارتمان)" Disabled="@_isLoadingLookups"
                                         ReadOnly="!_canChangeDepartment || _isLoadingLookups ||_pricingLocked" Clearable="true" ClearIcon="@Icons.Material.Filled.ClearAll"
                                         SearchFunc="@SearchDepartments"
                                         Value="_selectedDepartment"
                                         ValueChanged="OnSelectedDepartmentChangedAsync"
                                         ToStringFunc="@(d => d?.Name ?? string.Empty)"
                                         Variant="Variant.Outlined" Margin="Margin.Dense" Placeholder="جستجو یا انتخاب..." />
                    </MudItem>

                    <MudItem xs="12" sm="8" md="6" lg="4">
                        <MudSelect T="PaymentTermDto" Label="نحوه پرداخت" Disabled="@_isLoadingLookups"
                                   ReadOnly="_isLoadingLookups ||_pricingLocked"
                                   Value="_selectedPaymentTerm"
                                   ValueChanged="OnSelectedPaymentTermChanged"
                                   ToStringFunc="@(p => p?.Name ?? string.Empty)"
                                   Variant="Variant.Outlined" Margin="Margin.Dense" Placeholder="انتخاب کنید..." Dense="true">
                            @if (_paymentTermList != null)
                            {
                                @foreach (var paymentTerm in _paymentTermList)
                                {
                                    <MudSelectItem Value="paymentTerm">@paymentTerm.Name</MudSelectItem>
                                }
                            }
                        </MudSelect>
                    </MudItem>

                    <MudItem xs="12" sm="4" md="2" lg="2">
                        <MudNumericField T="int?" Label="مدت" Disabled="@_isLoadingLookups"
                                         Value="_agreedDuration"
                                         ValueChanged="(int? newValue) => HandleDurationChanged(newValue)"
                                         ReadOnly="_isDurationReadOnly" Variant="Variant.Outlined" Margin="Margin.Dense" Min="0" />
                    </MudItem>


                    <MudItem xs="12" md="6" lg="3">
                        <MudSelect T="PriceListDto" Label="اعلامیه قیمت" ReadOnly="!_canChangePriceLists || _isLoadingLookups ||_pricingLocked"
                                   Value="_selectedPriceList" Disabled="@_isLoadingLookups"
                                   ValueChanged="HandlePriceListChanged"
                                   ToStringFunc="@(p => p?.Name ?? string.Empty)"
                                   Variant="Variant.Outlined" Margin="Margin.Dense" Placeholder="انتخاب کنید..." Dense="true">
                            @if (_priceLists != null)
                            {
                                @foreach (var priceList in _priceLists)
                                {
                                    <MudSelectItem Value="priceList">@priceList.Name</MudSelectItem>
                                }
                            }
                        </MudSelect>
                    </MudItem>

                    <MudItem xs="12" md="6" lg="3">
                        <MudSelect T="DiscountListDto" Label="اعلامیه تخفیف" Disabled="@(_isLoadingLookups ||_pricingLocked)"
                                   ReadOnly="!_canChangePriceLists || _isLoadingLookups"
                                   Value="_selectedDiscountList"
                                   ValueChanged="OnSelectedDiscountListChangedAsync"
                                   ToStringFunc="@(d => d?.Name ?? string.Empty)"
                                   Variant="Variant.Outlined" Margin="Margin.Dense" Placeholder="انتخاب کنید..." Dense="true">
                            @if (_discountLists != null)
                            {
                                @foreach (var discountList in _discountLists)
                                {
                                    <MudSelectItem Value="discountList">@discountList.Name</MudSelectItem>
                                }
                            }
                        </MudSelect>
                    </MudItem>

                    <MudItem xs="12" sm="6" md="3" lg="3">
                        <MudNumericField T="double?" Label="تخفیف اول (%)" ReadOnly="true"
                                         Value="_tf1DiscountPercentage" Format="N2" Placeholder="---" HideSpinButtons="true"
                                         Variant="Variant.Outlined" Margin="Margin.Dense" Dense="true" />
                    </MudItem>
                    <MudItem xs="12" sm="6" md="3" lg="3">
                        <MudNumericField T="double?" Label="تخفیف دوم (%)" ReadOnly="true"
                                         Value="_tf2DiscountPercentage" Format="N2" Placeholder="---" HideSpinButtons="true"
                                         Variant="Variant.Outlined" Margin="Margin.Dense" Dense="true" />
                    </MudItem>

                </MudGrid>
            </MudExpansionPanel>
        </MudExpansionPanels>
    </MudPaper>

    @if (!_areHeadersValid && _headerValidationMessages.Any())
    {
        <MudAlert Severity="Severity.Warning" Class="my-3" Elevation="2">
            <MudText Typo="Typo.body1" Class="mb-2"><strong>برای ادامه، لطفاً موارد زیر را در سربرگ سفارش تکمیل کنید:</strong></MudText>
            <ul style="padding-right: 20px;">
                @foreach (var msg in _headerValidationMessages)
                {
                    <li style="text-align: right;">@msg</li>
                }
            </ul>
        </MudAlert>
    }

    <MudPaper Outlined="true" Class="mb-4 pa-1">
        @if (_isLoadingGroups)
        {
            <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-2" />
        }
        else if (!string.IsNullOrEmpty(_groupErrorMessage))
        {
            <MudAlert Severity="Severity.Error" Class="ma-2">@_groupErrorMessage</MudAlert>
        }
        else
        {
            <div style="display: flex; overflow-x: auto; white-space: nowrap; padding: 8px 4px; background-color: var(--mud-palette-background-grey); border-radius: var(--mud-default-borderradius);" class="mud-scrollbar-thin">
                @if (GetFilteredGroups().Any())
                {
                    @foreach (var group in GetFilteredGroups())
                    {
                        <div style="display: inline-block; margin: 0 4px;" @key="group.CODE">
                            <MudPaper Class="pa-2 group-card"
                                      Elevation="@(_selectedGroup == group ? 8 : 2)"
                                      Style="@($"border: {(_selectedGroup == group ? "1px solid var(--mud-palette-primary)" : "1px solid transparent")};")"
                                    @onclick="() => HandleGroupClick(group)">

                                @if (group.ImageExists)
                                {
                                    <img src="@($"api/itemgroups/image/{group.CODE}")" alt="@group.NAMES" class="group-image" loading="lazy" />
                                }
                                else
                                {
                                    <div class="group-image-placeholder">
                                        <MudIcon Icon="@Icons.Material.Filled.Storefront" Title="بدون تصویر" Size="Size.Large" />
                                    </div>
                                }
                                <MudText Typo="Typo.caption" Align="Align.Center" Class="group-name-text">@group.NAMES</MudText>
                            </MudPaper>
                        </div>
                    }
                }
                else
                {
                    <MudAlert Severity="Severity.Info" Dense="true" Style="width:100%;" Elevation="0" Square="true" Class="mx-auto">
                        @if (string.IsNullOrWhiteSpace(_groupSearchTerm))
                        {
                            @("هیچ گروهی یافت نشد.")
                        }
                        else
                        {
                            @($"موردی با '{_groupSearchTerm}' یافت نشد.")
                        }
                    </MudAlert>
                }
            </div>
        }
    </MudPaper>

    @if (_selectedGroup != null)
    {
        <MudDivider Class="my-4" />
        <MudPaper Outlined="true" Class="pa-1">
            <MudToolBar Dense="true" Class="mb-2 px-2">
                <MudTextField T="string"
                              @bind-Value="_itemSearchTerm"
                              Placeholder="جستجو کالا..."
                              Variant="Variant.Outlined"
                              Margin="Margin.Dense"
                              Adornment="Adornment.Start"
                              AdornmentIcon="@Icons.Material.Filled.Search"
                              IconSize="Size.Small"
                              Immediate="true"
                              Clearable="true"
                              Style="max-width: 250px; margin-left: 8px;"
                              DebounceInterval="500"
                              OnDebounceIntervalElapsed="HandleItemSearchDebounced" />
                <MudToggleIconButton @bind-Toggled="_isListView"
                                     Icon="@Icons.Material.Filled.ViewModule" Color="@( !_isListView ? Color.Primary : Color.Default)" Title="نمایش کارتی"
                                     ToggledIcon="@Icons.Material.Filled.ViewList" ToggledColor="@( _isListView ? Color.Primary : Color.Default)" ToggledTitle="نمایش لیستی" />
            </MudToolBar>

            <MudText Typo="Typo.caption" Class="mb-2 px-2">تعداد کل کالاهای یافت شده: @_totalItemCount.ToString("N0")</MudText>

            @if (_isItemsLoading)
            {
                <div class="d-flex justify-center align-center pa-4" style="min-height: 300px;">
                    <MudProgressCircular Color="Color.Secondary" Indeterminate="true" Size="Size.Large" />
                </div>
            }
            else if (!string.IsNullOrEmpty(_itemsErrorMessage))
            {
                <MudAlert Severity="Severity.Warning" Class="ma-2">@_itemsErrorMessage</MudAlert>
            }
            else if (_items == null || !_items.Any())
            {
                <MudAlert Severity="Severity.Info" Class="ma-2">
                    @if (string.IsNullOrWhiteSpace(_itemSearchTerm))
                    {
                        @("کالایی در این گروه یافت نشد.")
                    }
                    else
                    {
                        @($"کالایی با عبارت '{_itemSearchTerm}' در این گروه یافت نشد.")
                    }
                </MudAlert>
            }
            else
            {
                @if (_isListView)
                {
                    <MudList Clickable="false">
                        @foreach (var item in _items)
                        {
                            <MudListItem @key="item.CODE">
                                <MudListItemAvatar>
                                    @if (item.ImageExists)
                                    {
                                        <MudAvatar Image="@($"api/items/image/{item.CODE}")" Alt="@item.NAME" />
                                    }
                                    else
                                    {
                                        <MudAvatar Color="Color.Default"><MudIcon Icon="@Icons.Material.Filled.ShoppingBag" /></MudAvatar>
                                    }
                                </MudListItemAvatar>
                                <MudListItemText>
                                    <MudText Typo="Typo.body1">@item.NAME</MudText>
                                    <MudText Typo="Typo.body2" Color="Color.Secondary">کد: @item.CODE | واحد: @item.VahedName</MudText>
                                    <MudText Typo="Typo.body2">
                                        قیمت: @((item.PriceAfterHeaderDiscounts ?? item.MABL_F).ToString("N0")) ریال
                                        @if (item.TotalCalculatedDiscountPercent.HasValue && item.TotalCalculatedDiscountPercent > 0)
                                        {
                                            <span style="color: var(--mud-palette-success);">(با %@item.TotalCalculatedDiscountPercent.Value.ToString("N2") تخفیف سربرگ)</span>
                                        }
                                    </MudText>
                                </MudListItemText>
                                <MudListItemAction>
                                    <MudIconButton Icon="@Icons.Material.Filled.AddShoppingCart" Color="Color.Secondary" Size="Size.Small" OnClick="@(() => AddItemToCartFromList(item, 1))" Title="افزودن ۱ عدد" />
                                </MudListItemAction>
                            </MudListItem>
                            <MudDivider Inset="Inset.Avatar" />
                        }
                    </MudList>
                }
                else
                {
                    <MudGrid Spacing="3" Justify="Justify.FlexStart">
                        @foreach (var itemDto in _items)
                        {
                            <MudItem xs="12" sm="6" md="6" lg="6" xl="4" @key="itemDto.CODE">
                                <ItemCard Item="itemDto" HeadersValid="_areHeadersValid"
                                          AnbarCode="@(_selectedGroup.ANBAR)"
                                          IsAzadPaymentSelected="_isAzadPaymentSelected"
                                          CanEditDiscount="_canEditItemDiscount"
                                          PriceFromPriceList="@itemDto.PriceFromPriceList"
                                          HasPriceInCurrentPriceList="@itemDto.HasPriceInCurrentPriceList" />
                            </MudItem>
                        }
                    </MudGrid>
                }

                @if (_totalPages > 1)
                {
                    <MudPagination Count="_totalPages"
                                   Selected="_currentPage" SelectedChanged="HandlePageChangedAsync" Class="mt-4 mb-2 d-flex justify-center"
                                   ShowFirstButton="true"
                                   ShowLastButton="true"
                                   Color="Color.Primary"
                                   BoundaryCount="1" MiddleCount="3" />
                }
            }
        </MudPaper>
    }
</MudContainer>

<style>
    /* Style section remains the same as provided by the user */
    .group-card {
        cursor: pointer;
        width: 110px;
        height: 100px;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        text-align: center;
        transition: all 0.2s ease-in-out;
    }

        .group-card:hover {
            transform: translateY(-2px);
            box-shadow: var(--mud-elevation-4);
        }

    .group-image, .group-image-placeholder {
        width: 50px;
        height: 50px;
        object-fit: contain;
        margin-bottom: 4px;
    }

    .group-image-placeholder {
        display: flex;
        align-items: center;
        justify-content: center;
        background-color: var(--mud-palette-background-grey);
        color: var(--mud-palette-action-disabled);
        border-radius: var(--mud-default-borderradius);
    }

    .group-name-text {
        line-height: 1.2;
        white-space: normal;
        overflow: hidden;
        text-overflow: ellipsis;
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        min-height: 2.4em; /* Corresponds to two lines of text */
    }
</style>

@code
{
    // کلیدهای ذخیره در localStorage
    const string KEY_CT = "Safir_SelCustomerType";
    const string KEY_DEP = "Safir_SelDepartment";
    const string KEY_PT = "Safir_SelPaymentTerm";
    const string KEY_DUR = "Safir_SelDuration";
    const string KEY_PL = "Safir_SelPriceList";
    const string KEY_DL = "Safir_SelDiscountList";

    private bool _pricingLocked;

    private List<TCODE_MENUITEM>? _itemGroups;
    private TCODE_MENUITEM? _selectedGroup;
    private bool _isLoadingGroups = false;
    private string? _groupErrorMessage;
    private string _groupSearchTerm = string.Empty;
    private List<TCOD_VAHEDS>? _availableUnits;

    private List<ItemDisplayDto>? _items;
    private bool _isItemsLoading = false;
    private string? _itemsErrorMessage;
    private string _itemSearchTerm = string.Empty;

    private int _currentPage = 1;
    private int _pageSize = 12;
    private int _totalItemCount = 0;
    private int _totalPages => (_totalItemCount == 0 || _pageSize <= 0) ? 0 : (_totalItemCount + _pageSize - 1) / _pageSize;

    private bool _canChangeDepartment = true;
    private bool _canChangeCustomerType = true;
    private bool _canChangePriceLists = true;
    private bool _canEditItemDiscount = true;
    private short? _baseknowGhaym = 7;
    private SAZMAN? _sazmanSettings;

    private bool _isListView = false;

    private LookupDto<int?>? _selectedCustomerType;
    private List<LookupDto<int?>> _customerTypeList = new();

    private LookupDto<int?>? _selectedDepartment;
    private List<LookupDto<int?>> _departmentList = new();

    private PaymentTermDto? _selectedPaymentTerm;
    private List<PaymentTermDto> _paymentTermList = new();

    private int? _agreedDuration = 1;

    private PriceListDto? _selectedPriceList;
    private List<PriceListDto> _priceLists = new();

    private DiscountListDto? _selectedDiscountList;
    private List<DiscountListDto> _discountLists = new();

    private bool _isLoadingLookups = true; // General loading for header dropdowns
    private ClaimsPrincipal? _currentUserPrincipal;
    private int? _currentUserId;
    private int? _currentUserTfSazman = 20;
    private string? _currentCustomerHesCode;

    private List<string> _headerValidationMessages = new List<string>();
    private bool _areHeadersValid = false;

    private bool _canUseAzadPay = true;
    private bool _isDurationReadOnly = true;
    private PaymentTermDto? _previousSelectedPaymentTerm = null;
    private bool _initializationFailed = false;

    private List<VisitorItemPriceDto>? _visitorItemPrices;
    private bool _isLoadingVisitorPrices = false;

    private double? _tf1DiscountPercentage = 0;
    private double? _tf2DiscountPercentage = 0;
    private PriceElamieTfDtlDto? _currentElamieTfDetails;
    private bool _isLoadingElamieTfDetails = false;

    // Field that was missing in the original error list, used in ItemCard call
    private bool _isAzadPaymentSelected = false;


    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation("ItemGroups.razor: OnInitializedAsync started.");
        if (CartService != null)
        {
            await CartService.InitializeCartFromLocalStorageAsync();
        }
        else
        {
            Logger.LogError("ShoppingCartService is null!");
            Snackbar.Add("خطای سرویس سبد خرید!", Severity.Error);
            NavManager.NavigateTo("/");
            return;
        }

        if (CartService.CurrentCustomer == null)
        {
            Logger.LogWarning("No customer selected. Redirecting...");
            Snackbar.Add("لطفا ابتدا مشتری را انتخاب کنید.", Severity.Info);
            NavManager.NavigateTo("/visitor-customers");
            return;
        }
        Logger.LogInformation($"Customer HES code from CartService: {CartService.CurrentCustomer?.hes}");

        CartService.CartChanged += OnCartChanged;
        _pricingLocked = CartService.Items.Any();

        _isLoadingLookups = true;
        await InvokeAsync(StateHasChanged);

        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            _currentUserPrincipal = authState.User;
            if (_currentUserPrincipal?.Identity?.IsAuthenticated == true)
            {
                _currentUserId = int.TryParse(_currentUserPrincipal.FindFirst(BaseknowClaimTypes.IDD)?.Value, out var uid) ? uid : (int?)null;
                _currentUserTfSazman = int.TryParse(_currentUserPrincipal.FindFirst(BaseknowClaimTypes.TFSAZMAN)?.Value, out var tf) ? tf : 20;
            }
            _currentCustomerHesCode = CartService.CurrentCustomer?.hes;

            _customerTypeList = await LookupService.GetCustomerTypesAsync() ?? new();
            _departmentList = await LookupService.GetDepartmentsAsync() ?? new();

            await LoadPersistedSettingsAsync();

            await LoadSazmanSettingsAsync();
            await CheckPagePermissionsAsync(); // This method is defined below

            await LoadHeaderDataAndSetDefaultsAsync();
            await LoadDynamicPaymentTermsAndSetDefaultAsync();

            await LoadAndApplyElamieTakhfifDetailsAsync();

            var groupsTask = LoadGroupsAsync(); // This method is defined below
            var unitsTask = LoadUnitsAsync();   // This method is defined below
            await Task.WhenAll(groupsTask, unitsTask);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "An error occurred during the initialization of ItemGroups page.");
            _initializationFailed = true;
            _areHeadersValid = false;
            if (!_headerValidationMessages.Contains("خطا در بارگذاری اولیه صفحه. امکان افزودن کالا وجود ندارد."))
            {
                _headerValidationMessages.Add("خطا در بارگذاری اولیه صفحه. امکان افزودن کالا وجود ندارد.");
            }
            Snackbar.Add("خطا در بارگذاری اطلاعات صفحه.", Severity.Error);
        }
        finally
        {
            _isLoadingLookups = false;
            UpdateHeaderValidationState(); // This method is defined below
            await InvokeAsync(StateHasChanged);
        }

        if (_itemGroups != null && _itemGroups.Any() && _selectedGroup == null)
        {
            await HandleGroupClick(_itemGroups.First()); // This method is defined below
        }
        Logger.LogInformation("ItemGroups.razor: OnInitializedAsync completed.");
    }

    private void OnCartChanged()
    {
        _pricingLocked = CartService.Items.Any();
        if (!_pricingLocked)
        {
            _ = ClearPersistedSettingsAsync();
        }
        InvokeAsync(StateHasChanged);
    }

    #region LocalStorage Management
    private async Task ClearPersistedSettingsAsync()
    {
        await RemoveLocalStorageKeyAsync(KEY_CT);
        await RemoveLocalStorageKeyAsync(KEY_DEP);
        await RemoveLocalStorageKeyAsync(KEY_PT);
        await RemoveLocalStorageKeyAsync(KEY_DUR);
        await RemoveLocalStorageKeyAsync(KEY_PL);
        await RemoveLocalStorageKeyAsync(KEY_DL);
        Logger.LogInformation("Cleared persisted pricing settings from localStorage.");
        // Optionally reset local fields and reload defaults
        // _selectedCustomerType = null; // etc.
        // await LoadHeaderDataAndSetDefaultsAsync();
        // await LoadDynamicPaymentTermsAndSetDefaultAsync();
        // await LoadAndApplyElamieTakhfifDetailsAsync();
        // UpdateHeaderValidationState();
        // StateHasChanged();
    }

    private async Task<int?> GetIntIdFromLocalStorageAsync(string key)
    {
        var json = await jsRuntime.InvokeAsync<string?>("localStorage.getItem", key);
        if (string.IsNullOrEmpty(json) || json.Equals("null", StringComparison.OrdinalIgnoreCase))
        {
            return null;
        }

        if (int.TryParse(json, out int idValue))
        {
            return idValue;
        }

        try
        {
            using (JsonDocument doc = JsonDocument.Parse(json))
            {
                JsonElement root = doc.RootElement;
                if (root.ValueKind == JsonValueKind.Object)
                {
                    if (root.TryGetProperty("id", out JsonElement idProp) && idProp.TryGetInt32(out int idFromObj))
                    {
                        Logger?.LogWarning("Recovered int? from object with 'id' property for key '{Key}'. Original value: {JsonValue}", key, json);
                        return idFromObj;
                    }
                    if (root.TryGetProperty("Id", out JsonElement IdProp) && IdProp.TryGetInt32(out int IdFromObj))
                    {
                        Logger?.LogWarning("Recovered int? from object with 'Id' property for key '{Key}'. Original value: {JsonValue}", key, json);
                        return IdFromObj;
                    }
                    if (root.TryGetProperty("ID", out JsonElement IDProp) && IDProp.TryGetInt32(out int IDFromObj))
                    {
                        Logger?.LogWarning("Recovered int? from object with 'ID' property for key '{Key}'. Original value: {JsonValue}", key, json);
                        return IDFromObj;
                    }
                    if (root.TryGetProperty("Value", out JsonElement valueProp) && valueProp.ValueKind == JsonValueKind.Number && valueProp.TryGetInt32(out int valFromObj))
                    {
                        Logger?.LogWarning("Recovered int? from object with 'Value' property for key '{Key}'. Original value: {JsonValue}", key, json);
                        return valFromObj;
                    }
                    if (root.TryGetProperty("value", out JsonElement valuePropL) && valuePropL.ValueKind == JsonValueKind.Number && valuePropL.TryGetInt32(out int valLFromObj))
                    {
                        Logger?.LogWarning("Recovered int? from object with 'value' property for key '{Key}'. Original value: {JsonValue}", key, json);
                        return valLFromObj;
                    }
                }
            }
            Logger?.LogWarning("Could not deserialize or recover int? for key '{Key}'. Value was: {JsonValue}", key, json);
        }
        catch (JsonException ex)
        {
            Logger?.LogError(ex, "JSON Deserialization error for key '{Key}' while trying to recover int?. Value: '{JsonValue}'. Returning null.", key, json);
        }
        return null;
    }

    private async Task LoadPersistedSettingsAsync()
    {
        var _wasitlock_ = _pricingLocked;
        _pricingLocked = false;
        if (CartService.Items.Any())
        {
            Logger.LogInformation("Attempting to load persisted settings from localStorage.");
            var ctId = await GetIntIdFromLocalStorageAsync(KEY_CT);
            if (ctId.HasValue && _customerTypeList != null && _customerTypeList.Any())
                _selectedCustomerType = _customerTypeList.FirstOrDefault(x => x.Id == ctId.Value) ?? _selectedCustomerType;
            Logger.LogInformation("Loaded CustomerType ID from localStorage: {ctId}, Selected: {_selectedCustomerType?.Name}", ctId, _selectedCustomerType?.Name);

            var depId = await GetIntIdFromLocalStorageAsync(KEY_DEP);
            if (depId.HasValue && _departmentList != null && _departmentList.Any())
                _selectedDepartment = _departmentList.FirstOrDefault(x => x.Id == depId.Value) ?? _selectedDepartment;
            Logger.LogInformation("Loaded Department ID from localStorage: {depId}, Selected: {_selectedDepartment?.Name}", depId, _selectedDepartment?.Name);

            _agreedDuration = await GetIntIdFromLocalStorageAsync(KEY_DUR) ?? _agreedDuration;
            Logger.LogInformation("Loaded AgreedDuration from localStorage: {_agreedDuration}", _agreedDuration);

            _persistedPaymentTermId = await GetIntIdFromLocalStorageAsync(KEY_PT);
            _persistedPriceListId = await GetIntIdFromLocalStorageAsync(KEY_PL);
            _persistedDiscountListId = await GetIntIdFromLocalStorageAsync(KEY_DL);
        }
        else
        {
            Logger.LogInformation("Pricing is not locked (cart is empty), skipping load of persisted settings.");
        }
        _pricingLocked = _wasitlock_;
    }
    private int? _persistedPaymentTermId;
    private int? _persistedPriceListId;
    private int? _persistedDiscountListId;

    private async Task SetToLocalStorageAsync<T>(string key, T value)
    {
        try
        {
            await jsRuntime.InvokeVoidAsync("localStorage.setItem", key, JsonSerializer.Serialize(value));
            Logger.LogInformation("Set localStorage key '{Key}' with value: {Value}", key, value);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error setting localStorage key '{Key}'.", key);
        }
        if (_pricingLocked)
        {

        }
    }

    private async Task RemoveLocalStorageKeyAsync(string key)
        => await jsRuntime.InvokeVoidAsync("localStorage.removeItem", key);
    #endregion

    private async Task LoadSazmanSettingsAsync()
    {
        try
        {
            _sazmanSettings = await AppSettingsService.GetSettingsAsync();
            _baseknowGhaym = _sazmanSettings?.GHAYM;
            Logger.LogInformation("SAZMAN settings loaded. GHAYM = {GhaymValue}", _baseknowGhaym?.ToString() ?? "null");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading SAZMAN settings.");
            Snackbar.Add("خطا در بارگذاری تنظیمات برنامه (SAZMAN).", Severity.Error);
        }
    }

    private async Task LoadAndApplyElamieTakhfifDetailsAsync()
    {
        _isLoadingElamieTfDetails = true;
        await InvokeAsync(StateHasChanged);

        _tf1DiscountPercentage = null;
        _tf2DiscountPercentage = null;
        _currentElamieTfDetails = null;

        if (_selectedDiscountList?.Id != null && _selectedCustomerType?.Id != null && _selectedPaymentTerm?.Id != null)
        {
            try
            {
                _currentElamieTfDetails = await ItemGroupService.GetPriceElamieTfDetailsAsync(
                    _selectedDiscountList.Id,
                    _selectedCustomerType.Id,
                    _selectedPaymentTerm.Id);

                if (_currentElamieTfDetails != null)
                {
                    _tf1DiscountPercentage = _currentElamieTfDetails.TF1;
                    _tf2DiscountPercentage = _currentElamieTfDetails.TF2;
                    Logger.LogInformation($"Loaded TF1: {_tf1DiscountPercentage}, TF2: {_tf2DiscountPercentage} for ElamiehTakhfif: {_selectedDiscountList.Id}, CustType: {_selectedCustomerType.Id}, PaymentTerm: {_selectedPaymentTerm.Id}");
                }
                else
                {
                    Logger.LogInformation($"No TF details found for ElamiehTakhfif: {_selectedDiscountList.Id}, CustType: {_selectedCustomerType.Id}, PaymentTerm: {_selectedPaymentTerm.Id}. TF1/TF2 will be null/0.");
                }
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Error loading ElamieTakhfif (TF1/TF2) details.");
                Snackbar.Add("خطا در بارگذاری جزئیات تخفیف اعلامیه.", Severity.Error);
            }
        }
        else
        {
            Logger.LogInformation("Skipping TF details load due to missing DiscountList, CustomerType, or PaymentTerm selection.");
        }

        CartService.CustomerType = _selectedCustomerType;
        CartService.DepartmentValue = _selectedDepartment;
        CartService.PaymentTerm = _selectedPaymentTerm;
        CartService.AgreedDuration = _agreedDuration;
        CartService.PriceList = _selectedPriceList;
        CartService.DiscountList = _selectedDiscountList;

        ApplyHeaderDiscountsToDisplayedItems(); // Defined below
        _isLoadingElamieTfDetails = false;
        await InvokeAsync(StateHasChanged);
    }

    private void ApplyHeaderDiscountsToDisplayedItems()
    {
        if (_items == null || !_items.Any()) return;

        foreach (var itemDto in _items)
        {
            itemDto.HeaderDiscountTF1 = _tf1DiscountPercentage;
            itemDto.HeaderDiscountTF2 = _tf2DiscountPercentage;
            itemDto.TotalCalculatedDiscountPercent = null;
            itemDto.PriceAfterHeaderDiscounts = null;

            decimal? priceBeforeHeaderDiscounts = itemDto.PriceFromPriceList;

            if (itemDto.HasPriceInCurrentPriceList && itemDto.PriceFromPriceList.HasValue)
            {
                priceBeforeHeaderDiscounts = itemDto.PriceFromPriceList;
            }
            else
            {
                itemDto.MABL_F = 0; // Assuming MABL_F holds the base price
            }

            if (priceBeforeHeaderDiscounts.HasValue && priceBeforeHeaderDiscounts.Value > 0)
            {
                decimal currentPrice = priceBeforeHeaderDiscounts.Value;
                decimal priceAfterTf1 = currentPrice;

                if (_tf1DiscountPercentage.HasValue && _tf1DiscountPercentage.Value > 0)
                {
                    priceAfterTf1 = currentPrice * (1 - (decimal)(_tf1DiscountPercentage.Value / 100.0));
                }

                decimal finalPriceAfterTf2 = priceAfterTf1;
                if (_tf2DiscountPercentage.HasValue && _tf2DiscountPercentage.Value > 0)
                {
                    finalPriceAfterTf2 = priceAfterTf1 * (1 - (decimal)(_tf2DiscountPercentage.Value / 100.0));
                }
                itemDto.PriceAfterHeaderDiscounts = finalPriceAfterTf2;

                decimal totalDiscountAmount = priceBeforeHeaderDiscounts.Value - finalPriceAfterTf2;
                if (priceBeforeHeaderDiscounts.Value > 0)
                {
                    itemDto.TotalCalculatedDiscountPercent = (double)(totalDiscountAmount / priceBeforeHeaderDiscounts.Value * 100.0m);
                }
                else
                {
                    itemDto.TotalCalculatedDiscountPercent = 0;
                }
            }
            else
            {
                itemDto.PriceAfterHeaderDiscounts = priceBeforeHeaderDiscounts;
                itemDto.TotalCalculatedDiscountPercent = 0;
            }
        }
    }

    private bool AreHeaderFieldsValidForAddingItems()
    {
        _headerValidationMessages.Clear();
        if (_initializationFailed)
        {
            _headerValidationMessages.Add("به دلیل بروز خطا در بارگذاری اولیه، امکان افزودن کالا وجود ندارد.");
            return false;
        }
        if (_selectedCustomerType == null) _headerValidationMessages.Add("نوع مشتری انتخاب نشده است.");
        if (_selectedDepartment == null) _headerValidationMessages.Add("واحد (دپارتمان) انتخاب نشده است.");
        if (_selectedPaymentTerm == null) _headerValidationMessages.Add("نحوه پرداخت انتخاب نشده است.");
        if (!_agreedDuration.HasValue || _agreedDuration.Value <= 0)
        {
            if (_isAzadPaymentSelected)
                _headerValidationMessages.Add("مقدار 'مدت' برای نحوه پرداخت آزاد باید حداقل 1 باشد.");
            else if (_selectedPaymentTerm != null && (!_agreedDuration.HasValue || _agreedDuration.Value < 0))
                _headerValidationMessages.Add($"مقدار 'مدت' ({_agreedDuration?.ToString() ?? "تعیین نشده"}) برای نحوه پرداخت انتخابی نامعتبر است).");
        }
        bool isPaymentAzad = _selectedPaymentTerm?.Id == 0;
        if (!isPaymentAzad)
        {
            if (_selectedPriceList == null) _headerValidationMessages.Add("اعلامیه قیمت (در صورت عدم انتخاب نحوه پرداخت آزاد) الزامی است.");
        }
        return !_headerValidationMessages.Any();
    }

    private void UpdateHeaderValidationState()
    {
        _areHeadersValid = AreHeaderFieldsValidForAddingItems();
    }

    private async Task HandleCustomerTypeChanged(LookupDto<int?> newValue)
    {
        if (_pricingLocked) { Snackbar.Add("امکان تغییر نوع مشتری پس از افزودن کالا به سبد وجود ندارد.", Severity.Warning); return; }
        _selectedCustomerType = newValue;
        CartService.CustomerType = newValue;
        UpdateHeaderValidationState();
        await SetToLocalStorageAsync(KEY_CT, newValue?.Id);
        await LoadAndApplyElamieTakhfifDetailsAsync();
    }

    private async Task OnSelectedDepartmentChangedAsync(LookupDto<int?> newDepartment)
    {
        if (_pricingLocked) { Snackbar.Add("امکان تغییر دپارتمان پس از افزودن کالا به سبد وجود ندارد.", Severity.Warning); return; }
        _selectedDepartment = newDepartment;
        CartService.DepartmentValue = newDepartment;
        await SetToLocalStorageAsync(KEY_DEP, newDepartment?.Id);

        _isLoadingLookups = true;
        await InvokeAsync(StateHasChanged);
        try
        {
            if (_selectedDepartment?.Id.HasValue == true)
            {
                _priceLists = await LookupService.GetPriceListsAsync() ?? new();
                var defaultPriceListId = await LookupService.GetDefaultPriceListIdAsync(_selectedDepartment.Id.Value);
                _selectedPriceList = defaultPriceListId.HasValue ? _priceLists.FirstOrDefault(p => p.Id == defaultPriceListId.Value) : _priceLists.FirstOrDefault();

                _discountLists = await LookupService.GetDiscountListsAsync() ?? new();
                var defaultDiscountListId = await LookupService.GetDefaultDiscountListIdAsync(_selectedDepartment.Id.Value);
                _selectedDiscountList = defaultDiscountListId.HasValue ? _discountLists.FirstOrDefault(d => d.Id == defaultDiscountListId.Value) : _discountLists.FirstOrDefault();
            }
            else
            {
                _priceLists = await LookupService.GetPriceListsAsync() ?? new();
                _selectedPriceList = _priceLists.FirstOrDefault();
                _discountLists = await LookupService.GetDiscountListsAsync() ?? new();
                _selectedDiscountList = _discountLists.FirstOrDefault();
            }
            CartService.PriceList = _selectedPriceList;
            CartService.DiscountList = _selectedDiscountList;
            await SetToLocalStorageAsync(KEY_PL, _selectedPriceList?.Id);
            await SetToLocalStorageAsync(KEY_DL, _selectedDiscountList?.Id);

            await LoadDynamicPaymentTermsAndSetDefaultAsync();
            await LoadAndApplyElamieTakhfifDetailsAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error updating price/discount lists on department change.");
            Snackbar.Add("خطا در به‌روزرسانی لیست‌های قیمت/تخفیف.", Severity.Warning);
        }
        finally
        {
            _isLoadingLookups = false;
            UpdateHeaderValidationState();
            await InvokeAsync(StateHasChanged);
        }
    }
    private async Task OnSelectedPaymentTermChanged(PaymentTermDto? newValue)
    {
        if (_pricingLocked) { Snackbar.Add("امکان تغییر نحوه پرداخت پس از افزودن کالا به سبد وجود ندارد.", Severity.Warning); return; }
        bool isNewValueAzad = newValue?.Id == 0;

        if (isNewValueAzad && !_canUseAzadPay)
        {
            Snackbar.Add("شما اجازه انتخاب نحوه پرداخت آزاد را ندارید.", Severity.Error);
            if (_previousSelectedPaymentTerm != null) _selectedPaymentTerm = _previousSelectedPaymentTerm;
            else _selectedPaymentTerm = _paymentTermList.FirstOrDefault(pt => pt.Id != 0) ?? _paymentTermList.FirstOrDefault();

            _isAzadPaymentSelected = _selectedPaymentTerm?.Id == 0;
            _agreedDuration = _selectedPaymentTerm?.Modat;
            _isDurationReadOnly = (_selectedPaymentTerm?.Id != 0);

            CartService.PaymentTerm = _selectedPaymentTerm;
            CartService.AgreedDuration = _agreedDuration;

            await InvokeAsync(StateHasChanged);
            UpdateHeaderValidationState();

            await SetToLocalStorageAsync(KEY_PT, _selectedPaymentTerm?.Id);
            await SetToLocalStorageAsync(KEY_DUR, _agreedDuration);

            await LoadAndApplyElamieTakhfifDetailsAsync();
            return;
        }

        _previousSelectedPaymentTerm = _selectedPaymentTerm;
        _selectedPaymentTerm = newValue;
        _isAzadPaymentSelected = _selectedPaymentTerm?.Id == 0;
        _agreedDuration = _selectedPaymentTerm?.Modat;
        _isDurationReadOnly = (_selectedPaymentTerm?.Id != 0);

        CartService.PaymentTerm = _selectedPaymentTerm;
        CartService.AgreedDuration = _agreedDuration;

        UpdateHeaderValidationState();

        await SetToLocalStorageAsync(KEY_PT, _selectedPaymentTerm?.Id);
        await SetToLocalStorageAsync(KEY_DUR, _agreedDuration);

        await LoadAndApplyElamieTakhfifDetailsAsync();
    }

    private async void HandleDurationChanged(int? newValue)
    {
        if (_pricingLocked) { Snackbar.Add("امکان تغییر مدت پس از افزودن کالا به سبد وجود ندارد.", Severity.Warning); return; }
        _agreedDuration = newValue;
        CartService.AgreedDuration = _agreedDuration;
        UpdateHeaderValidationState();
        await SetToLocalStorageAsync(KEY_DUR, _agreedDuration);
    }


    private async Task HandlePriceListChanged(PriceListDto? newValue)
    {
        if (_pricingLocked) { Snackbar.Add("امکان تغییر اعلامیه قیمت پس از افزودن کالا به سبد وجود ندارد.", Severity.Warning); return; }
        _selectedPriceList = newValue;
        CartService.PriceList = _selectedPriceList;
        UpdateHeaderValidationState();
        await SetToLocalStorageAsync(KEY_PL, newValue?.Id);

        if (newValue != null && newValue.Id > 0)
        {
            await GetPriceAndDiscountAndHeaderDiscountsReloadAsync();
        }
        else
        {
            _visitorItemPrices?.Clear();
            ApplyPricesToDisplayedItems();
            await LoadAndApplyElamieTakhfifDetailsAsync();
        }
    }

    private void ApplyPricesToDisplayedItems()
    {
        if (_items == null || !_items.Any()) return;

        foreach (var itemDto in _items)
        {
            var visitorPriceInfo = _visitorItemPrices?.FirstOrDefault(vp => vp.CODE == itemDto.CODE && vp.PEPID == _selectedPriceList?.Id);

            decimal? priceBeforeHeaderDiscounts; // Declare here

            if (visitorPriceInfo != null && visitorPriceInfo.PRICE1.HasValue)
            {
                itemDto.PriceFromPriceList = visitorPriceInfo.PRICE1.Value;
                itemDto.HasPriceInCurrentPriceList = true;
                itemDto.MABL_F = visitorPriceInfo.PRICE1.Value; // This looks like it sets MABL_F based on price list
                priceBeforeHeaderDiscounts = visitorPriceInfo.PRICE1.Value; // Assign value
            }
            else
            {
                itemDto.PriceFromPriceList = null;
                itemDto.HasPriceInCurrentPriceList = false;
                itemDto.MABL_F = 0; // Assuming MABL_F holds the base price
                priceBeforeHeaderDiscounts = 0; // Assign default value
            }

            if (priceBeforeHeaderDiscounts.HasValue && priceBeforeHeaderDiscounts.Value > 0)
            {
                decimal currentPrice = priceBeforeHeaderDiscounts.Value;
                decimal priceAfterTf1 = currentPrice;

                if (_tf1DiscountPercentage.HasValue && _tf1DiscountPercentage.Value > 0)
                {
                    priceAfterTf1 = currentPrice * (1 - (decimal)(_tf1DiscountPercentage.Value / 100.0));
                }

                decimal finalPriceAfterTf2 = priceAfterTf1;
                if (_tf2DiscountPercentage.HasValue && _tf2DiscountPercentage.Value > 0)
                {
                    finalPriceAfterTf2 = priceAfterTf1 * (1 - (decimal)(_tf2DiscountPercentage.Value / 100.0));
                }
                itemDto.PriceAfterHeaderDiscounts = finalPriceAfterTf2;

                decimal totalDiscountAmount = priceBeforeHeaderDiscounts.Value - finalPriceAfterTf2;
                if (priceBeforeHeaderDiscounts.Value > 0)
                {
                    itemDto.TotalCalculatedDiscountPercent = (double)(totalDiscountAmount / priceBeforeHeaderDiscounts.Value * 100.0m);
                }
                else
                {
                    itemDto.TotalCalculatedDiscountPercent = 0;
                }
            }
            else
            {
                itemDto.PriceAfterHeaderDiscounts = priceBeforeHeaderDiscounts;
                itemDto.TotalCalculatedDiscountPercent = 0;
            }
        }
    }


    private async Task OnSelectedDiscountListChangedAsync(DiscountListDto? newDiscountList)
    {
        if (_pricingLocked) { Snackbar.Add("امکان تغییر اعلامیه تخفیف پس از افزودن کالا به سبد وجود ندارد.", Severity.Warning); return; }
        _selectedDiscountList = newDiscountList;
        CartService.DiscountList = _selectedDiscountList;

        _isLoadingLookups = true;
        await InvokeAsync(StateHasChanged);
        try
        {
            await LoadDynamicPaymentTermsAndSetDefaultAsync();
            await LoadAndApplyElamieTakhfifDetailsAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error processing discount list change.");
            Snackbar.Add("خطا در پردازش تغییر اعلامیه تخفیف.", Severity.Warning);
        }
        finally
        {
            _isLoadingLookups = false;
            UpdateHeaderValidationState();
            await SetToLocalStorageAsync(KEY_DL, newDiscountList?.Id);
            await InvokeAsync(StateHasChanged);
        }
    }

    private void HandlePaymentTermChangeLogic(PaymentTermDto? currentSelection)
    {
        if (currentSelection?.Id == 0) // Azad
        {
            _isAzadPaymentSelected = true;
            if (currentSelection?.Modat > 0) _agreedDuration = currentSelection?.Modat;
            _isDurationReadOnly = false; // Duration is editable for Azad
        }
        else // Not Azad
        {
            _isAzadPaymentSelected = false;
            _agreedDuration = currentSelection?.Modat;
            _isDurationReadOnly = true; // Duration comes from payment term
        }

        if (currentSelection != null && (currentSelection.Id != 0 || _canUseAzadPay))
        {
            _previousSelectedPaymentTerm = currentSelection;
        }
    }

    // Definition for SearchDepartments (CS0103 fix)
    private async Task<IEnumerable<LookupDto<int?>>> SearchDepartments(string value)
    {
        await Task.Delay(5); // Simulate async for MudAutocomplete
        if (string.IsNullOrEmpty(value))
            return _departmentList ?? Enumerable.Empty<LookupDto<int?>>();
        return _departmentList?.Where(d => d.Name != null && d.Name.Contains(value, StringComparison.OrdinalIgnoreCase))
               ?? Enumerable.Empty<LookupDto<int?>>();
    }

    // Definition for GetFilteredGroups (CS0103 fix)
    private IEnumerable<TCODE_MENUITEM> GetFilteredGroups()
    {
        if (_itemGroups == null) return Enumerable.Empty<TCODE_MENUITEM>();
        if (string.IsNullOrWhiteSpace(_groupSearchTerm)) return _itemGroups;
        try
        {
            return _itemGroups.Where(g => g.NAMES != null && g.NAMES.Contains(_groupSearchTerm, StringComparison.OrdinalIgnoreCase));
        }
        catch
        {
            return _itemGroups; // Fallback in case of unexpected error during filtering
        }
    }

    // Definition for HandleGroupClick (CS0103 fix)
    private async Task HandleGroupClick(TCODE_MENUITEM group)
    {
        if (group == null || _isItemsLoading) return;
        _selectedGroup = group;
        Logger.LogInformation("Selected Group: {GroupName}, Anbar: {AnbarCode}", group.NAMES, group.ANBAR);
        _currentPage = 1;
        _totalItemCount = 0;
        _items = null;
        _itemSearchTerm = string.Empty;
        await LoadItemsForSelectedGroupAsync();
    }

    // Definition for HandleItemSearchDebounced (CS0103 fix)
    private async Task HandleItemSearchDebounced()
    {
        await InvokeAsync(async () =>
        {
            if (_selectedGroup == null) return;
            Logger.LogInformation("Debounced item search: {SearchTerm}", _itemSearchTerm);
            _currentPage = 1;
            _totalItemCount = 0;
            await LoadItemsForSelectedGroupAsync();
        });
    }

    // Definition for HandlePageChangedAsync (CS0103 fix)
    private async Task HandlePageChangedAsync(int newPage)
    {
        if (_isItemsLoading) return;
        _currentPage = newPage;
        await LoadItemsForSelectedGroupAsync();
    }

    public void Dispose()
    {
        CartService.CartChanged -= OnCartChanged;
    }

    private async Task CheckPagePermissionsAsync()
    {
        var tasks = new List<Task>();
        tasks.Add(Task.Run(async () => _canChangeDepartment = await PermissionService.CanRunFormAsync("DEFA")));
        tasks.Add(Task.Run(async () => _canChangeCustomerType = await PermissionService.CanRunFormAsync("CUSTEN")));
        tasks.Add(Task.Run(async () => _canEditItemDiscount = !(await PermissionService.CanRunFormAsync("TFTMLOCK"))));
        tasks.Add(Task.Run(async () => _canUseAzadPay = await PermissionService.CanRunFormAsync("AZADPAY")));

        if (_baseknowGhaym.HasValue && _baseknowGhaym.Value == 7) // Assuming 7 means "Price List Based"
        {
            tasks.Add(Task.Run(async () =>
            {
                bool canRunElamghe = await PermissionService.CanRunFormAsync("elamghe");
                _canChangePriceLists = canRunElamghe;
            }));
        }
        else
        {
            _canChangePriceLists = true; // Or some other logic if not price list based
        }

        try
        {
            await Task.WhenAll(tasks);
            Logger.LogInformation($"Permissions checked: Dept={_canChangeDepartment}, CustType={_canChangeCustomerType}, PriceList={_canChangePriceLists}, ItemDiscount={_canEditItemDiscount}, AzadPay={_canUseAzadPay}");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error during permission checks.");
            Snackbar.Add("خطا در بررسی دسترسی‌های کاربر.", Severity.Warning);
            _canChangeDepartment = _canChangeCustomerType = _canChangePriceLists = _canEditItemDiscount = _canUseAzadPay = false;
        }
        await InvokeAsync(StateHasChanged);
    }

    private async Task LoadGroupsAsync()
    {
        if (_isLoadingGroups) return;
        _isLoadingGroups = true;
        _groupErrorMessage = null;
        _selectedGroup = null; // Reset selected group when reloading groups
        _items = null;
        _isItemsLoading = false;
        _itemsErrorMessage = null;
        _currentPage = 1;
        _totalItemCount = 0;
        _itemSearchTerm = string.Empty;
        await InvokeAsync(StateHasChanged);
        try
        {
            _itemGroups = await ItemGroupService.GetItemGroupsAsync() ?? new List<TCODE_MENUITEM>();
            if (!_itemGroups.Any())
            {
                _groupErrorMessage = "گروهی یافت نشد.";
            }
        }
        catch (Exception ex)
        {
            _groupErrorMessage = "خطای پیش‌بینی نشده در بارگذاری گروه‌ها.";
            Logger.LogError(ex, _groupErrorMessage);
            _itemGroups = new List<TCODE_MENUITEM>();
        }
        finally
        {
            _isLoadingGroups = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task LoadUnitsAsync()
    {
        try
        {
            _availableUnits = await LookupService.GetUnitsAsync() ?? new List<TCOD_VAHEDS>();
            if (!_availableUnits.Any())
            {
                // Snackbar.Add("لیست واحدها خالی است.", Severity.Info);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading units.");
            Snackbar.Add("خطای پیش‌بینی نشده در بارگذاری واحدها.", Severity.Error);
            _availableUnits = new List<TCOD_VAHEDS>();
        }
    }

    private async Task LoadItemsForSelectedGroupAsync()
    {
        if (_selectedGroup == null || _isItemsLoading) return;
        _isItemsLoading = true;
        _itemsErrorMessage = null;
        await InvokeAsync(StateHasChanged);
        try
        {
            Logger.LogInformation("Loading items page {Page} for group {GroupCode}, Search: '{ItemSearch}'", _currentPage, _selectedGroup.CODE, _itemSearchTerm);
            var pagedResult = await ItemGroupService.GetItemsByGroupAsync(_selectedGroup.CODE, _currentPage, _pageSize, _itemSearchTerm);
            if (pagedResult != null)
            {
                _items = pagedResult.Items ?? new List<ItemDisplayDto>();
                _totalItemCount = pagedResult.TotalCount;
            }
            else
            {
                _itemsErrorMessage = "خطا در بارگذاری کالاها.";
                Snackbar.Add(_itemsErrorMessage, Severity.Warning);
                _items = new List<ItemDisplayDto>();
                _totalItemCount = 0;
            }
            await GetPriceAndDiscountAndHeaderDiscountsReloadAsync();
        }
        catch (Exception ex)
        {
            _itemsErrorMessage = "خطای پیش‌بینی نشده در بارگذاری کالاها.";
            Logger.LogError(ex, "Error loading items for group {GroupCode}", _selectedGroup.CODE);
            Snackbar.Add(_itemsErrorMessage, Severity.Error);
            _items = new List<ItemDisplayDto>();
            _totalItemCount = 0;
        }
        finally
        {
            _isItemsLoading = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task LoadVisitorPricesForCurrentPriceListAsync(int priceListId)
    {
        if (priceListId <= 0)
        {
            _visitorItemPrices?.Clear();
            ApplyPricesToDisplayedItems();
            await LoadAndApplyElamieTakhfifDetailsAsync();
            return;
        }

        _isLoadingVisitorPrices = true;
        await InvokeAsync(StateHasChanged);
        try
        {
            // Only fetch prices for items currently displayed in the grid
            var currentItemCodes = _items?.Select(i => i.CODE).ToList();
            if (currentItemCodes == null || !currentItemCodes.Any())
            {
                Logger.LogInformation("No items displayed, skipping visitor price fetch.");
                _visitorItemPrices?.Clear();
                return;
            }

            _visitorItemPrices = await ItemGroupService.GetVisitorPricesAsync(priceListId, currentItemCodes); // Pass item codes
            Logger.LogInformation("Loaded {Count} visitor-specific prices for PriceListId: {PriceListId}, for {ItemCodeCount} items.", _visitorItemPrices?.Count ?? 0, priceListId, currentItemCodes.Count);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading visitor prices for PriceListId: {PriceListId}", priceListId);
            _visitorItemPrices?.Clear();
            Snackbar.Add("خطا در بارگذاری قیمت‌های اعلامیه.", Severity.Warning);
        }
        finally
        {
            _isLoadingVisitorPrices = false;
            ApplyPricesToDisplayedItems();
            await InvokeAsync(StateHasChanged);
        }
    }


    private async Task LoadHeaderDataAndSetDefaultsAsync()
    {
        if (_selectedCustomerType == null && _customerTypeList.Any())
        {
            if (!string.IsNullOrEmpty(_currentCustomerHesCode))
            {
                var custHesInfo = await LookupService.GetCustomerHesabInfoByHesCodeAsync(_currentCustomerHesCode);
                if (custHesInfo?.CustCod.HasValue == true)
                    _selectedCustomerType = _customerTypeList.FirstOrDefault(c => c.Id == custHesInfo.CustCod.Value);
            }
            _selectedCustomerType ??= _customerTypeList.FirstOrDefault();
            if (!_pricingLocked) await SetToLocalStorageAsync(KEY_CT, _selectedCustomerType?.Id);
        }

        if (_selectedDepartment == null && _departmentList.Any())
        {
            if (_currentUserTfSazman.HasValue)
                _selectedDepartment = _departmentList.FirstOrDefault(d => d.Id == _currentUserTfSazman.Value);
            _selectedDepartment ??= _departmentList.FirstOrDefault();
            if (!_pricingLocked) await SetToLocalStorageAsync(KEY_DEP, _selectedDepartment?.Id);
        }

        if (_selectedDepartment?.Id.HasValue == true)
        {
            _priceLists = await LookupService.GetPriceListsAsync() ?? new();
            if (_persistedPriceListId.HasValue && _priceLists.Any(p => p.Id == _persistedPriceListId.Value))
                _selectedPriceList = _priceLists.First(p => p.Id == _persistedPriceListId.Value);
            else if (_selectedPriceList == null)
            {
                var defaultPriceListId = await LookupService.GetDefaultPriceListIdAsync(_selectedDepartment.Id.Value);
                _selectedPriceList = defaultPriceListId.HasValue ? _priceLists.FirstOrDefault(p => p.Id == defaultPriceListId.Value) : _priceLists.FirstOrDefault();
            }
            if (!_pricingLocked) await SetToLocalStorageAsync(KEY_PL, _selectedPriceList?.Id);

            _discountLists = await LookupService.GetDiscountListsAsync() ?? new();
            if (_persistedDiscountListId.HasValue && _discountLists.Any(d => d.Id == _persistedDiscountListId.Value))
                _selectedDiscountList = _discountLists.First(d => d.Id == _persistedDiscountListId.Value);
            else if (_selectedDiscountList == null)
            {
                var defaultDiscountListId = await LookupService.GetDefaultDiscountListIdAsync(_selectedDepartment.Id.Value);
                _selectedDiscountList = defaultDiscountListId.HasValue ? _discountLists.FirstOrDefault(d => d.Id == defaultDiscountListId.Value) : _discountLists.FirstOrDefault();
            }
            if (!_pricingLocked) await SetToLocalStorageAsync(KEY_DL, _selectedDiscountList?.Id);
        }
        else
        {
            _priceLists = await LookupService.GetPriceListsAsync() ?? new();
            if (_persistedPriceListId.HasValue && _priceLists.Any(p => p.Id == _persistedPriceListId.Value))
                _selectedPriceList = _priceLists.First(p => p.Id == _persistedPriceListId.Value);
            _selectedPriceList ??= _priceLists.FirstOrDefault();
            if (!_pricingLocked) await SetToLocalStorageAsync(KEY_PL, _selectedPriceList?.Id);

            _discountLists = await LookupService.GetDiscountListsAsync() ?? new();
            if (_persistedDiscountListId.HasValue && _discountLists.Any(d => d.Id == _persistedDiscountListId.Value))
                _selectedDiscountList = _discountLists.First(d => d.Id == _persistedDiscountListId.Value);
            _selectedDiscountList ??= _discountLists.FirstOrDefault();
            if (!_pricingLocked) await SetToLocalStorageAsync(KEY_DL, _selectedDiscountList?.Id);
        }

        CartService.CustomerType = _selectedCustomerType;
        CartService.DepartmentValue = _selectedDepartment;
        CartService.PriceList = _selectedPriceList;
        CartService.DiscountList = _selectedDiscountList;

        Logger.LogInformation("Defaults set: CustType='{0}', Dept='{1}', PriceList='{2}', DiscountList='{3}'",
            _selectedCustomerType?.Name, _selectedDepartment?.Name, _selectedPriceList?.Name, _selectedDiscountList?.Name);
    }
    private async Task LoadDynamicPaymentTermsAndSetDefaultAsync()
    {
        PaymentTermDto? previouslySelectedFromPersisted = null;

        try
        {
            int? deptId = _selectedDepartment?.Id;
            int? discountId = _selectedDiscountList?.Id;
            _paymentTermList = await LookupService.GetDynamicPaymentTermsAsync(deptId, discountId) ?? new List<PaymentTermDto>();

            if (_persistedPaymentTermId.HasValue && _paymentTermList.Any(pt => pt.Id == _persistedPaymentTermId.Value))
            {
                previouslySelectedFromPersisted = _paymentTermList.First(pt => pt.Id == _persistedPaymentTermId.Value);
            }

            if (previouslySelectedFromPersisted != null)
                _selectedPaymentTerm = previouslySelectedFromPersisted;
            else if (_currentUserId.HasValue)
            {
                var userDefaultPpid = await LookupService.GetDefaultPaymentTermIdForUserAsync(_currentUserId.Value);
                _selectedPaymentTerm = (userDefaultPpid.HasValue && _paymentTermList.Any(pt => pt.Id == userDefaultPpid.Value))
                    ? _paymentTermList.First(pt => pt.Id == userDefaultPpid.Value)
                    : _paymentTermList.FirstOrDefault();
            }
            else _selectedPaymentTerm = _paymentTermList.FirstOrDefault();

            if (_selectedPaymentTerm == null && _paymentTermList.Any()) _selectedPaymentTerm = _paymentTermList.First();

            _previousSelectedPaymentTerm = _selectedPaymentTerm;
            HandlePaymentTermChangeLogic(_selectedPaymentTerm);

            CartService.PaymentTerm = _selectedPaymentTerm;
            CartService.AgreedDuration = _agreedDuration;

            if (!_pricingLocked)
            {
                await SetToLocalStorageAsync(KEY_PT, _selectedPaymentTerm?.Id);
                await SetToLocalStorageAsync(KEY_DUR, _agreedDuration);
            }
            Logger.LogInformation("Payment terms loaded. Selected: '{0}', Duration: {1}", _selectedPaymentTerm?.Name, _agreedDuration);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading dynamic payment terms in ItemGroups.");
            Snackbar.Add("خطا در بارگذاری لیست نحوه پرداخت.", Severity.Error);
            _paymentTermList = new List<PaymentTermDto> { new PaymentTermDto { Id = 0, Name = "آزاد", Modat = 0 } };
            _selectedPaymentTerm = _paymentTermList.First();
            HandlePaymentTermChangeLogic(_selectedPaymentTerm);
            CartService.PaymentTerm = _selectedPaymentTerm;
            CartService.AgreedDuration = _agreedDuration;
            if (!_pricingLocked)
            {
                await SetToLocalStorageAsync(KEY_PT, _selectedPaymentTerm?.Id);
                await SetToLocalStorageAsync(KEY_DUR, _agreedDuration);
            }
        }
        finally
        {
            UpdateHeaderValidationState();
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task GetPriceAndDiscountAndHeaderDiscountsReloadAsync()
    {
        if (_selectedPriceList?.Id != null && _selectedPriceList.Id > 0)
        {
            await LoadVisitorPricesForCurrentPriceListAsync(_selectedPriceList.Id);
        }
        else
        {
            _visitorItemPrices?.Clear();
            ApplyPricesToDisplayedItems();
        }
        await LoadAndApplyElamieTakhfifDetailsAsync();
    }

    private async void AddItemToCartFromList(ItemDisplayDto item, int quantity)
    {
        UpdateHeaderValidationState();
        if (!_areHeadersValid)
        {
            Snackbar.Add($"لطفاً ابتدا موارد سربرگ سفارش را تکمیل کنید: {string.Join("، ", _headerValidationMessages)}", Severity.Error, config => { config.VisibleStateDuration = 7000; });
            return;
        }
        if (_selectedGroup == null || item == null)
        {
            Snackbar.Add("خطا: گروه یا کالا نامعتبر است.", Severity.Error); return;
        }

        var unitInfoList = new List<UnitInfo> {
            new UnitInfo { VahedCode = item.VahedCode, VahedName = item.VahedName ?? "واحد اصلی", Nesbat = 1.0 }
        };

        decimal priceForUnitAfterHeaderDiscounts = item.PriceAfterHeaderDiscounts ?? item.MABL_F;
        double lineDiscountPercentFromCard = 0;
        decimal finalPricePerUnitCalc = priceForUnitAfterHeaderDiscounts * (1 - (decimal)(lineDiscountPercentFromCard / 100.0));
        double totalHeaderDiscountApplied = item.TotalCalculatedDiscountPercent ?? 0;
        decimal originalBasePriceForUnitCalc = item.PriceFromPriceList ?? item.MABL_F;

        await CartService.AddItemAsync(
            item,
            Convert.ToDecimal(quantity),
            item.VahedCode, // Assuming this is the code for the unit being added
            unitInfoList,   // This should be the list of all available units for the item if CartService expects it.
                            // Or just the selected unit info. The ItemCard has more complex unit handling.
                            // For now, passing a list with just the primary unit.
            _selectedGroup.ANBAR,
            item.PriceAfterHeaderDiscounts ?? item.MABL_F, // Price AFTER TF1/TF2
            item.TotalCalculatedDiscountPercent ?? 0  // Overall discount from TF1/TF2
        );
        Snackbar.Add($"{quantity} عدد '{item.NAME}' ({item.VahedName ?? "واحد اصلی"}) به سبد اضافه شد.", Severity.Success);
    }
}