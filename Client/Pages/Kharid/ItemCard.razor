@implements IDisposable
@using Microsoft.AspNetCore.Authorization
@using Safir.Shared.Models.Kala
@using System.Globalization
@using MudBlazor
@using Safir.Client.Services
@using System.Timers
@using Microsoft.AspNetCore.Components
@using Safir.Client.Shared

@attribute [Authorize]

@inject ItemGroupApiService ItemService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject ShoppingCartService CartService
@inject ILogger<ItemCard> Logger
@inject HttpClient Http // برای فراخوانی API واحدها

<MudCard Outlined="true" Class="ma-1 item-card">

    <div class="image-container">
        @if (Item?.ImageExists == true)
        {
            <img src="@($"api/items/image/{Item.CODE}")" alt="@Item.NAME" class="item-image" />
        }
        else
        {
            <div class="image-placeholder">
                <MudIcon Icon="@Icons.Material.Filled.Storefront" Size="Size.Large" />
                <MudText Typo="Typo.caption">(بدون تصویر)</MudText>
            </div>
        }
    </div>

    <MudCardContent Class="pa-2 flex-grow-1">
        <MudText Typo="Typo.body1" GutterBottom="true" Style="min-height: 1.5em; overflow: hidden; text-align: center; font-weight: 500;">
            @(Item?.NAME ?? "نام کالا")
        </MudText>
        <MudText Typo="Typo.body1" GutterBottom="true" Style="min-height: 1.5em; overflow: hidden; text-align: center; font-weight: 500;">
            @(Item?.CODE ?? "کد کالا")
        </MudText>
        <MudDivider Class="my-1" />

        @if (_itemSpecificUnits?.Any() == true)
        {
            <MudSelect T="int" Label="واحد" @bind-Value="SelectedVahedCode"
                       Variant="Variant.Outlined" Margin="Margin.Dense" Dense="true"
                       Disabled="@(_cartQuantity > 0 && Item != null && CartService.GetCartItem(Item.CODE, SelectedVahedCode)?.Quantity > 0)">
                @foreach (var unit in _itemSpecificUnits)
                {
                    <MudSelectItem Value="@unit.VahedCode">@unit.VahedName</MudSelectItem>
                }
            </MudSelect>
        }
        else if (Item != null && !string.IsNullOrEmpty(Item.VahedName)) // اگر واحد خاصی از API نیامد، واحد پیش‌فرض آیتم را نشان بده
        {
            <MudText Typo="Typo.caption" Style="min-height: 48px; display:flex; align-items:center;">واحد: @Item.VahedName</MudText>
        }
        else
        {
            <MudText Typo="Typo.caption" Style="min-height: 48px; display:flex; align-items:center;">واحد: -</MudText>
        }

        <MudGrid Spacing="0" Justify="Justify.SpaceBetween" Class="mt-2 price-section-grid">
            <MudItem xs="7" Class="d-flex align-center justify-start pa-1">
                <MudText Typo="Typo.caption">مبلغ:</MudText>
            </MudItem>
            <MudItem xs="5" Class="d-flex align-center justify-end pa-1">
                <MudNumericField @bind-Value="EditableMablF" Label="" Placeholder="0"
                                 Variant="Variant.Text" Format="N0" Culture='_faCulture' HideSpinButtons="true"
                                 Immediate="true" DebounceInterval="500" OnDebounceIntervalElapsed="PriceOrDiscountChanged"
                                 Disabled="@(AnbarCode <= 0 || (_cartQuantity > 0 && Item != null && CartService.GetCartItem(Item.CODE, SelectedVahedCode)?.Quantity > 0) )"
                                 Style="direction:ltr; width: 100%;" InputStyle="text-align: left;" Margin="Margin.Dense" Class="dense-numeric" />
            </MudItem>
            <MudItem xs="7" Class="d-flex align-center justify-start pa-1">
                <MudText Typo="Typo.caption">مصرف کننده:</MudText>
            </MudItem>
            <MudItem xs="5" Class="d-flex align-center justify-end pa-1">
                <MudTextField Value="@FormatCurrency(CalculatedMaxM)" ReadOnly="true"
                              Variant="Variant.Text" Margin="Margin.Dense" Class="dense-numeric"
                              Style="direction: ltr; width: 100%; " InputStyle="text-align: left;" />
            </MudItem>
            <MudItem xs="7" Class="d-flex align-center justify-start pa-1">
                <MudText Typo="Typo.caption">تخفیف (%):</MudText>
            </MudItem>
            <MudItem xs="5" Class="d-flex align-center justify-end pa-1">
                <MudNumericField @bind-Value="EditableNKOL" ReadOnly="!CanEditDiscount"
                                 Label="" Placeholder="0"
                                 Variant="Variant.Text" Format="0.#" Culture='_faCulture' HideSpinButtons="true"
                                 Immediate="true" DebounceInterval="500" OnDebounceIntervalElapsed="PriceOrDiscountChanged"
                                 Min="0" Max="100" Disabled="@(AnbarCode <= 0 || (_cartQuantity > 0 && Item != null && CartService.GetCartItem(Item.CODE, SelectedVahedCode)?.Quantity > 0) )"
                                 Style="direction:ltr; width: 100%;" InputStyle="text-align: left;" Margin="Margin.Dense" Class="dense-numeric" />
            </MudItem>
        </MudGrid>

        <MudDivider Class="my-1" />

        <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="1">
            <MudText Typo="Typo.caption" Style="@GetInventoryStyle()">
                موجودی انبار: @(_inventoryDetails?.CurrentInventory?.ToString("N0", _faCulture))
                @if (SelectedUnitInfo?.Nesbat != 1.0 && _inventoryDetails?.CurrentInventory.HasValue == true && SelectedUnitInfo != null && SelectedUnitInfo.Nesbat != 0)
                {
                    <span> (@((_inventoryDetails.CurrentInventory.Value / (decimal)SelectedUnitInfo.Nesbat).ToString("N1", _faCulture)) @SelectedUnitInfo.VahedName)</span>
                }
                @if (_inventoryDetails?.MinimumInventory > 0)
                {
                    <span style="font-size: smaller;"> (حد: @_inventoryDetails.MinimumInventory?.ToString("N0", _faCulture))</span>
                }
            </MudText>
            <MudIconButton Icon="@Icons.Material.Filled.Refresh" Size="Size.Small"
                           Disabled="@(_isFetchingInventory || AnbarCode <= 0)"
                           Title="بروزرسانی موجودی"
                           OnClick="FetchInventory" />
        </MudStack>
    </MudCardContent>

    <MudCardActions Style="display: flex; justify-content: center;" Class="pa-2 mt-auto">
        @if (_cartQuantity == 0)
        {
            <MudButton Style="width:100%;" Color="Color.Success"
                       Variant="Variant.Filled"
                       StartIcon="@Icons.Material.Filled.AddShoppingCart"
                       OnClick="@(() => ProcessCartAction(1, true))"
                       Disabled="@(_isFetchingInventory || AnbarCode <= 0 || _itemSpecificUnits?.Any() != true || SelectedUnitInfo == null || !HeadersValid)">
                افزودن به سبد
            </MudButton>
        }
        else
        {
            <div class="cart-quantity-container">
                <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Size="Size.Small" OnClick="RemoveFromCartAsync" Title="حذف از سبد" Class="cart-delete-btn" />
                <MudPaper Class="cart-quantity-box" Elevation="3">
                    <MudIconButton Icon="@(Icons.Material.Filled.Remove)"
                                   Color="@(_cartQuantity==1 ? Color.Error : Color.Primary)" Size="Size.Small" Class="qty-btn"
                                   Title="@(_cartQuantity==1 ? "حذف از سبد" : "کاهش")"
                    @onmousedown="@(e => StartLongPress(false))" @onmouseup="StopLongPress" @onmouseleave="StopLongPress"
                                   OnClick="@(() => ProcessCartAction(_cartQuantity - 1, false))" />
                    <MudNumericField Class="quantity-input" T="decimal" HideSpinButtons="true" Variant="Variant.Outlined"
                                     Value="_cartQuantity" ValueChanged="HandleNumericFieldChange"
                                     Min="0" Max="9999" DebounceInterval="700" Disabled="@(_isFetchingInventory || AnbarCode <= 0)" />
                    <MudIconButton Icon="@Icons.Material.Filled.Add" Color="Color.Success" Size="Size.Small" Class="qty-btn"
                                   Title="افزایش"
                    @onmousedown="@(e => StartLongPress(true))" @onmouseup="StopLongPress" @onmouseleave="StopLongPress"
                                   OnClick="@(() => ProcessCartAction(_cartQuantity + 1, false))" />
                </MudPaper>
            </div>
        }
    </MudCardActions>
</MudCard>

@code {
    [Parameter, EditorRequired] public ItemDisplayDto Item { get; set; } = default!;
    [Parameter] public int AnbarCode { get; set; }

    [Parameter] public bool HeadersValid { get; set; } = true; // پیش‌فرض true است تا اگر پاس داده نشد، فعال باشد

    /// <summary>
    /// !! مهم: این پارامتر برای رفع خطای والد اضافه شده است !!
    /// کامپوننت ItemGroups.razor در حال ارسال این پارامتر است.
    /// با اینکه این پارامتر اینجا تعریف شده، منطق اصلی نمایش واحدها و محاسبات
    /// از _itemSpecificUnits که از API دریافت می‌شود، استفاده می‌کند.
    /// در حالت ایده‌آل، والد نباید این پارامتر را ارسال کند و این تعریف می‌تواند حذف شود
    /// (پس از اینکه مطمئن شدید کامپوننت والد دیگر آن را ارسال نمی‌کند).
    /// </summary>
    [Parameter] public List<TCOD_VAHEDS>? AvailableUnits { get; set; }

    [Parameter] public bool CanEditDiscount { get; set; } = true; // پیش‌فرض: قابل ویرایش


    private List<UnitInfo> _itemSpecificUnits = new List<UnitInfo>();
    private int _selectedVahedCodeField;
    private decimal _cartQuantity;
    private InventoryDetailsDto? _inventoryDetails;
    private bool _isFetchingInventory;
    private bool _errorFetchingInventory;
    private Timer? _longPressTimer;
    private bool _increment;

    private decimal? EditableMablF { get; set; }
    private decimal? EditableBSEF { get; set; }
    private double? EditableNKOL { get; set; }

    private static readonly CultureInfo _faCulture = new CultureInfo("fa-IR");
    private string? _previousItemCode;
    private int _previousAnbarCode;

    // Helper property to safely get the selected unit info
    private UnitInfo? SelectedUnitInfo => _itemSpecificUnits.FirstOrDefault(u => u.VahedCode == _selectedVahedCodeField);

    // Helper property for calculated consumer price based on selected unit
    private decimal? CalculatedMaxM => Item != null && SelectedUnitInfo != null && Item.MAX_M.HasValue && SelectedUnitInfo.Nesbat != 0
                                        ? Item.MAX_M.Value * (decimal)SelectedUnitInfo.Nesbat
                                        : Item?.MAX_M; // Fallback to base consumer price if unit info is missing or nesbat is zero

    // Property for binding the unit selection
    private int SelectedVahedCode
    {
        get => _selectedVahedCodeField;
        set
        {
            if (_selectedVahedCodeField != value)
            {
                var currentCartItem = Item != null ? CartService.GetCartItem(Item.CODE, _selectedVahedCodeField) : null;
                if (currentCartItem != null && currentCartItem.Quantity > 0)
                {
                    InvokeAsync(() => CartService.RemoveItemAsync(Item.CODE, _selectedVahedCodeField));
                    Snackbar.Add("کالا با واحد قبلی از سبد حذف شد. با واحد جدید اضافه کنید.", Severity.Info, config => { config.DuplicatesBehavior = SnackbarDuplicatesBehavior.Allow; });
                }

                _selectedVahedCodeField = value;
                UpdateDisplayPricesAndDiscountBasedOnUnitOrCart(); // Update displayed prices/discount for the NEW unit
                UpdateCartQuantity(); // Check quantity in cart for the NEW unit
                Logger?.LogInformation("واحد برای کالای {ItemCode} به {UnitCode} تغییر کرد. قیمت عمده نمایش: {MablF}", Item?.CODE, value, EditableMablF);
                InvokeAsync(StateHasChanged); // Ensure UI update after selection
            }
        }
    }

    protected override void OnInitialized()
    {
        CartService.CartChanged += HandleCartChanged;
        base.OnInitialized();
    }

    protected override async Task OnParametersSetAsync()
    {
        bool itemJustChanged = Item?.CODE != _previousItemCode || (Item == null && _previousItemCode != null);
        bool anbarJustChanged = AnbarCode != _previousAnbarCode;

        if (Item == null) // Handle case where Item becomes null
        {
            _itemSpecificUnits.Clear(); _previousItemCode = null; _previousAnbarCode = 0; _cartQuantity = 0;
            EditableMablF = null; EditableBSEF = null; EditableNKOL = null;
            _inventoryDetails = null; _selectedVahedCodeField = 0;
            await InvokeAsync(StateHasChanged);
            return;
        }

        if (itemJustChanged)
        {
            _selectedVahedCodeField = 0; _cartQuantity = 0; // Reset state for new item
            await LoadItemSpecificUnitsAsync(); // Load units for the new item

            // Select default unit after loading units
            if (_itemSpecificUnits.Any())
            {
                var unitToSelect = _itemSpecificUnits.FirstOrDefault(u => u.VahedCode == Item.VahedCode) ?? _itemSpecificUnits.First();
                _selectedVahedCodeField = unitToSelect.VahedCode;
                Logger?.LogInformation("واحد پیش‌فرض برای {ItemCode} به {UnitCode} تنظیم شد.", Item.CODE, _selectedVahedCodeField);
            }
            else
            {
                Logger?.LogError("بحرانی: واحدی برای {ItemCode} یافت نشد!", Item.CODE);
                _selectedVahedCodeField = 0; // No valid unit to select
            }
        }

        // Ensure a valid unit is selected if possible, especially after an item change or if state was inconsistent
        if ((SelectedUnitInfo == null || _selectedVahedCodeField == 0) && _itemSpecificUnits.Any())
        {
            _selectedVahedCodeField = _itemSpecificUnits.First().VahedCode;
            Logger?.LogWarning("واحد انتخاب شده نامعتبر بود، به اولین واحد موجود برای {ItemCode} ریست شد: {UnitCode}", Item.CODE, _selectedVahedCodeField);
        }

        UpdateDisplayPricesAndDiscountBasedOnUnitOrCart(); // Update prices based on the potentially new/reset selected unit

        // Fetch inventory if item/warehouse changed, or if never fetched, or if fetch previously failed
        if (itemJustChanged || anbarJustChanged || _inventoryDetails == null || _errorFetchingInventory)
        {
            if (AnbarCode > 0) { await FetchInventory(); }
            else
            {
                _inventoryDetails = new InventoryDetailsDto { CurrentInventory = null, MinimumInventory = 0 };
                _errorFetchingInventory = true; // Error if AnbarCode is invalid
            }
        }

        UpdateCartQuantity(); // Update cart quantity display based on current selection

        _previousItemCode = Item.CODE;
        _previousAnbarCode = AnbarCode;

        // base.OnParametersSetAsync(); // Only needed if inheriting from a base class with logic here.
    }

    public void Dispose()
    {
        CartService.CartChanged -= HandleCartChanged;
        StopLongPress(); // Ensure timer is disposed
        _longPressTimer?.Dispose();
    }

    private async Task LoadItemSpecificUnitsAsync()
    {
        if (Item == null || string.IsNullOrEmpty(Item.CODE))
        {
            _itemSpecificUnits.Clear(); await InvokeAsync(StateHasChanged); return;
        }
        _itemSpecificUnits.Clear(); // Clear previous units
        try
        {
            _itemSpecificUnits = await Http.GetFromJsonAsync<List<UnitInfo>>($"api/Items/{Item.CODE}/units") ?? new List<UnitInfo>();

            if (!_itemSpecificUnits.Any())
            {
                Logger?.LogWarning("API واحدی برای {ItemCode} برنگرداند.", Item.CODE);
                if (Item.VahedCode > 0 && !string.IsNullOrEmpty(Item.VahedName))
                {
                    _itemSpecificUnits.Add(new UnitInfo { VahedCode = Item.VahedCode, VahedName = Item.VahedName, Nesbat = 1.0 });
                }
            }
            // Ensure Nesbat is not zero, default to 1 if it is
            foreach (var unit in _itemSpecificUnits)
            {
                if (unit.Nesbat <= 0) // Check for zero or negative
                {
                    Logger?.LogWarning("Unit {VahedCode} ({VahedName}) for item {ItemCode} has invalid Nesbat={Nesbat}. Setting to 1.", unit.VahedCode, unit.VahedName, Item.CODE, unit.Nesbat);
                    unit.Nesbat = 1.0;
                }
            }
        }
        catch (Exception ex)
        {
            Logger?.LogError(ex, "خطا در بارگذاری واحد های خاص کالا برای {ItemCode}", Item.CODE);
            _itemSpecificUnits.Clear();
            if (Item.VahedCode > 0 && !string.IsNullOrEmpty(Item.VahedName))
            {
                _itemSpecificUnits.Add(new UnitInfo { VahedCode = Item.VahedCode, VahedName = Item.VahedName, Nesbat = 1.0 });
            }
            Snackbar.Add("خطا در دریافت اطلاعات واحدها.", Severity.Error);
        }
        await InvokeAsync(StateHasChanged);
    }

    private async Task FetchInventory()
    {
        if (_isFetchingInventory || AnbarCode <= 0 || Item == null) return;
        _isFetchingInventory = true; _errorFetchingInventory = false;
        await InvokeAsync(StateHasChanged);
        try
        {
            _inventoryDetails = await ItemService.GetItemInventoryDetailsAsync(Item.CODE, AnbarCode);
            _errorFetchingInventory = (_inventoryDetails == null || _inventoryDetails.CurrentInventory == null);
            if (_errorFetchingInventory && _inventoryDetails == null) _inventoryDetails = new InventoryDetailsDto { CurrentInventory = null, MinimumInventory = 0 };
        }
        catch (Exception ex)
        {
            _errorFetchingInventory = true; _inventoryDetails = new InventoryDetailsDto { CurrentInventory = null, MinimumInventory = 0 };
            Logger?.LogError(ex, "خطا در دریافت موجودی برای {ItemCode}, انبار {AnbarCode}", Item?.CODE, AnbarCode);
            Snackbar.Add("خطا در دریافت موجودی کالا.", Severity.Warning);
        }
        finally { _isFetchingInventory = false; await InvokeAsync(StateHasChanged); }
    }

    // Updates the EditableMablF, EditableBSEF, and EditableNKOL based on the selected unit and cart status.
    private void UpdateDisplayPricesAndDiscountBasedOnUnitOrCart()
    {
        if (Item == null) { EditableMablF = null; EditableBSEF = null; EditableNKOL = null; InvokeAsync(StateHasChanged); return; }

        var cartItem = CartService.GetCartItem(Item.CODE, SelectedVahedCode);
        var unitInfo = SelectedUnitInfo; // Use the property which finds the current UnitInfo

        if (cartItem != null && cartItem.Quantity > 0)
        {
            // Item is in the cart with the currently selected unit
            // Load price *before* discount and the discount itself from the cart item
            EditableMablF = cartItem.PricePerUnit; // Assumes CartItem.PricePerUnit IS the price before discount
            EditableNKOL = cartItem.DiscountPercent ?? 0;

            // Calculate retail price based on item's base retail and selected unit's nesbat
            if (unitInfo != null && unitInfo.Nesbat > 0) EditableBSEF = Item.B_SEF * (decimal)unitInfo.Nesbat;
            else if (Item.VahedCode == SelectedVahedCode) EditableBSEF = Item.B_SEF; // Main unit
            else EditableBSEF = Item.B_SEF; // Fallback if unit info is missing
        }
        else
        {
            // Item is not in the cart (for this unit), calculate prices from ItemDisplayDto and selected unit
            if (unitInfo != null && unitInfo.Nesbat > 0)
            {
                EditableMablF = Item.MABL_F * (decimal)unitInfo.Nesbat;
                EditableBSEF = Item.B_SEF * (decimal)unitInfo.Nesbat;
            }
            else // Fallback if unit info is missing or invalid
            {
                EditableMablF = Item.MABL_F; // Base wholesale price
                EditableBSEF = Item.B_SEF;   // Base retail price
            }
            EditableNKOL = 0; // Default discount is 0 when not in cart
        }
        // Ensure UI update after price calculation
        InvokeAsync(StateHasChanged);
    }

    private async Task ProcessCartAction(decimal requestedQuantityInSelectedUnit, bool isInitialAddButton)
    {
        // --- Basic Validation ---
        if (Item == null) { Logger?.LogError("ProcessCartAction called with null Item."); return; }
        if (SelectedUnitInfo == null) { Snackbar.Add("لطفاً ابتدا یک واحد معتبر انتخاب کنید.", Severity.Warning); return; }
        if (SelectedUnitInfo.Nesbat <= 0) { Snackbar.Add("نسبت واحد کالا نامعتبر (صفر یا منفی) است.", Severity.Error); return; }
        if (AnbarCode <= 0) { Snackbar.Add("انبار نامعتبر است.", Severity.Error); return; }

        // --- Handle Quantity <= 0 ---
        if (requestedQuantityInSelectedUnit <= 0)
        {
            if (!isInitialAddButton)
            { // Only remove if it wasn't the initial "Add" button click with 0 qty
                RemoveFromCartAsync();
            }
            return; // Do nothing further if quantity is zero or less
        }

        // --- Prepare Data for Cart Service ---
        // Get the price per selected unit *before* discount. Use EditableMablF if available, otherwise calculate.
        decimal priceForSelectedUnitBeforeDiscount = EditableMablF ?? (Item.MABL_F * (decimal)SelectedUnitInfo.Nesbat);
        double currentDiscountPercent = EditableNKOL ?? 0;

        // --- Inventory Check ---
        if (_inventoryDetails == null || _errorFetchingInventory) { await FetchInventory(); } // Try fetching if needed
        if (_inventoryDetails == null || _errorFetchingInventory) { Snackbar.Add("خطا در بررسی موجودی.", Severity.Warning); return; } // Still error? Abort.

        decimal requestedQuantityInBaseUnit = requestedQuantityInSelectedUnit * (decimal)SelectedUnitInfo.Nesbat;
        var existingCartItem = CartService.GetCartItem(Item.CODE, SelectedVahedCode);

        // Calculate delta based on what *would be* in the cart vs current inventory
        decimal currentCartQuantityInSelectedUnitForDelta = existingCartItem?.Quantity ?? 0;
        // We need the Nesbat of the *currently selected unit* for accurate delta calculation in base units
        decimal currentCartQuantityInBaseUnitForDelta = currentCartQuantityInSelectedUnitForDelta * (decimal)SelectedUnitInfo.Nesbat;
        decimal deltaQuantityInBaseUnit = requestedQuantityInBaseUnit - currentCartQuantityInBaseUnitForDelta;

        decimal currentInventoryInBaseUnit = _inventoryDetails.CurrentInventory ?? 0;
        decimal minInventoryInBaseUnit = _inventoryDetails.MinimumInventory ?? 0;
        bool proceed = true;

        if (deltaQuantityInBaseUnit > 0) // Only check if increasing quantity or adding new
        {
            if (currentInventoryInBaseUnit - deltaQuantityInBaseUnit < minInventoryInBaseUnit - 0.001m)
            {
                proceed = false;
                var parameters = new DialogParameters
                    {
                        ["ContentText"] = $"فروش این مقدار ({requestedQuantityInBaseUnit:N0}) از کالا ({Item.NAME}) باعث کاهش موجودی به زیر حد مجاز ({minInventoryInBaseUnit:N0}) می‌شود. (موجودی فعلی: {currentInventoryInBaseUnit:N0}). آیا مایل به ادامه هستید؟",
                        ["ConfirmButtonText"] = "بله، ادامه بده"
                    };
                var dialogReference = DialogService.Show<Shared.ConfirmDialog>("موجودی به حد مجاز می‌رسد", parameters);
                var result = await dialogReference.Result;
                proceed = !result.Cancelled && result.Data is bool confirmation && confirmation;
            }
        }

        // --- Call Cart Service ---
        if (proceed)
        {
            // Prepare the List<TCOD_VAHEDS> argument (can be simplified if CartService doesn't really need it)
            var serviceUnitsArg = _itemSpecificUnits?
                                  .Select(u => new TCOD_VAHEDS { CODE = u.VahedCode, NAMES = u.VahedName })
                                  .ToList()
                                  ?? new List<TCOD_VAHEDS>(); // Ensure not null

            if (existingCartItem == null || existingCartItem.Quantity <= 0)
            {
                // ********************************************************************
                // ******** شروع تغییرات در فراخوانی AddItem ********
                // ********************************************************************
               await CartService.AddItemAsync(
                    Item,
                    requestedQuantityInSelectedUnit,
                    SelectedUnitInfo.VahedCode,    // آرگومان سوم: کد واحد انتخابی (int)
                    _itemSpecificUnits,            // آرگومان چهارم: لیست واحدهای کالا (List<UnitInfo>)
                    AnbarCode,                     // آرگومان پنجم: کد انبار (int)
                    priceForSelectedUnitBeforeDiscount,
                    currentDiscountPercent
                );
                // ********************************************************************
                // ********* پایان تغییرات *********
                // ********************************************************************
            }
            else // Update existing item
            {
                // فراخوانی UpdateQuantity تغییری نکرده و باید درست باشد
                await CartService.UpdateQuantityAsync(
                    Item.CODE,
                    SelectedUnitInfo.VahedCode,
                    requestedQuantityInSelectedUnit,
                    priceForSelectedUnitBeforeDiscount,
                    currentDiscountPercent
                );
            }
        }
        else
        {
            Logger?.LogInformation("User cancelled inventory override for item {ItemCode}", Item.CODE);
            // Revert UI? HandleCartChanged should update based on actual cart state.
            await InvokeAsync(StateHasChanged);
        }
    }

    // Called when user manually changes Price (EditableMablF) or Discount (EditableNKOL)
    private async Task PriceOrDiscountChanged()
    {
        var cartItem = Item != null ? CartService.GetCartItem(Item.CODE, SelectedVahedCode) : null;
        // Only update cart if the item *is already in the cart* for the selected unit
        if (cartItem != null && cartItem.Quantity > 0 && SelectedUnitInfo != null && SelectedUnitInfo.Nesbat > 0)
        {
            Logger?.LogInformation("Price/Discount manually changed for item {ItemCode} in cart. Updating cart.", Item.CODE);

            // Use the current EditableMablF as the new price *before* discount for the selected unit
            decimal priceForSelectedUnitBeforeDiscount = EditableMablF ?? (Item.MABL_F * (decimal)SelectedUnitInfo.Nesbat);
            double currentDiscountPercent = EditableNKOL ?? 0;

            // Call UpdateQuantity to save the new price/discount to the existing cart item
          await  CartService.UpdateQuantityAsync(Item.CODE, SelectedVahedCode, cartItem.Quantity, priceForSelectedUnitBeforeDiscount, currentDiscountPercent);
        }
        // No need to await here as it's called by OnDebounceIntervalElapsed
    }

    private async void RemoveFromCartAsync()
    {
        if (Item == null) return;
       await CartService.RemoveItemAsync(Item.CODE, SelectedVahedCode);
        // HandleCartChanged will update the UI state (_cartQuantity, prices)
    }

    private void UpdateCartQuantity()
    {
        // Ensure Item and SelectedUnitInfo are valid before getting quantity
        if (Item != null && SelectedUnitInfo != null)
        {
            _cartQuantity = CartService.GetItemQuantity(Item.CODE, SelectedUnitInfo.VahedCode);
        }
        else
        {
            _cartQuantity = 0;
        }
    }

    // Event handler for when the cart changes (invoked by ShoppingCartService)
    private void HandleCartChanged()
    {
        UpdateCartQuantity(); // Update the displayed quantity for this item/unit
        UpdateDisplayPricesAndDiscountBasedOnUnitOrCart(); // Update displayed prices based on new cart state
        InvokeAsync(StateHasChanged); // Ensure the UI reflects the changes
    }

    // Event handler for when the numeric quantity field changes (after debounce)
    private async Task HandleNumericFieldChange(decimal newQuantity)
    {
        await ProcessCartAction(newQuantity, false); // Treat as update, not initial add
    }

    // --- Long Press Logic (Simplified and potentially safer) ---
    void StartLongPress(bool inc)
    {
        if (AnbarCode <= 0 || Item == null || _isFetchingInventory) return;
        _increment = inc;
        _longPressTimer?.Dispose(); // Dispose previous timer if any
        _longPressTimer = new Timer(400); // Slightly shorter initial delay
        _longPressTimer.Elapsed += HandleFirstLongPressTick;
        _longPressTimer.AutoReset = false;
        _longPressTimer.Start();
    }

    void StopLongPress()
    {
        _longPressTimer?.Stop();
        _longPressTimer?.Dispose();
        _longPressTimer = null;
    }

    async void HandleFirstLongPressTick(object? sender, ElapsedEventArgs e)
    {
        if (_longPressTimer == null) return; // Avoid race condition if stopped
        await HandleLongPressAction(); // Perform first action

        if (_longPressTimer == null) return; // Check again
        _longPressTimer.Elapsed -= HandleFirstLongPressTick;
        _longPressTimer.Elapsed += HandleRepeatingLongPressTick;
        _longPressTimer.Interval = 100; // Faster repeat
        _longPressTimer.AutoReset = true;
        _longPressTimer.Start();
    }

    async void HandleRepeatingLongPressTick(object? sender, ElapsedEventArgs e)
    {
        if (_longPressTimer == null) return;
        await HandleLongPressAction(); // Perform subsequent actions
    }

    // Centralized method to handle the actual quantity change during long press
    async Task HandleLongPressAction()
    {
        var quantityChange = _increment ? 10m : -10m;
        var newQuantity = _cartQuantity + quantityChange;

        if (newQuantity < 0) newQuantity = 0; // Don't go below zero
        if (newQuantity == 0 && !_increment) StopLongPress(); // Stop timer if reducing to zero

        if (newQuantity <= 9999) // Check max limit if applicable
        {
            await InvokeAsync(() => ProcessCartAction(newQuantity, false));
        }
        else
        {
            StopLongPress(); // Stop if max limit reached
        }

        if (newQuantity == 0 && !_increment) // Ensure timer stops *after* processing zero quantity
        {
            StopLongPress();
        }
    }


    // --- Helper Methods ---
    private string GetInventoryStyle()
    {
        if (AnbarCode <= 0) return "color: var(--mud-palette-text-disabled);";
        if (_isFetchingInventory) return "color: var(--mud-palette-action-default); font-style: italic;";
        if (_inventoryDetails?.CurrentInventory == null || _errorFetchingInventory) return "color: var(--mud-palette-error); font-weight: bold;";
        decimal min = _inventoryDetails.MinimumInventory ?? 0;
        decimal current = _inventoryDetails.CurrentInventory.Value;
        if (current < min + 0.001m) return "color: var(--mud-palette-error); font-weight: bold;";
        if (current < min + (min * 0.2m) + 1 && min > 0) return "color: var(--mud-palette-warning);";
        if (current < 10 && min == 0) return "color: var(--mud-palette-warning);";
        return "color: var(--mud-palette-success);";
    }

    private static string FormatCurrency(decimal? value) => value.HasValue ? value.Value.ToString("N0", _faCulture) : "--";
}

<style>
    /* STYLE SECTION FROM YOUR PREVIOUS CODE */
    .quantity-input .mud-input-outlined-border {
        border: none !important;
    }

    .quantity-input {
        width: 60px;
    }

        .quantity-input input {
            text-align: center !important;
            padding-left: 4px !important;
            padding-right: 4px !important;
        }

            .quantity-input input::-webkit-outer-spin-button, .quantity-input input::-webkit-inner-spin-button {
                -webkit-appearance: none;
                margin: 0;
            }

            .quantity-input input[type=number] {
                -moz-appearance: textfield;
            }

    .cart-quantity-container {
        display: flex;
        align-items: center;
        gap: 12px;
        margin-top: 8px;
    }

    .cart-quantity-box {
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 16px;
        box-shadow: 0 2px 8px rgba(60,60,60,0.10);
        background: #fff;
        padding: 4px 16px;
        min-width: 90px;
        min-height: 40px;
        gap: 8px;
    }

    .cart-quantity-value {
        font-size: 1.15rem;
        font-weight: 600;
        width: 28px;
        text-align: center;
        user-select: none;
    }

    .cart-delete-btn {
        margin-left: 4px;
        margin-right: 4px;
    }

    .spacer {
        width: 16px;
    }

    .item-card {
        height: 100%;
        display: flex;
        flex-direction: column;
        transition: box-shadow .2s ease-in-out;
    }

        .item-card:hover {
            box-shadow: var(--mud-elevation-6);
        }

    .image-container {
        display: flex;
        justify-content: center;
        align-items: center;
        background: #f5f5f5;
        overflow: hidden;
        height: 150px;
    }

    .item-image {
        max-height: 100%;
        max-width: 100%;
        object-fit: contain;
        padding: 5px;
    }

    .image-placeholder {
        height: 100%;
        width: 100%;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        color: var(--mud-palette-text-secondary);
    }

    .cart-actions .mud-icon-button {
        margin-inline: 2px;
    }

    .price-section-grid .mud-grid-item {
        padding-top: 1px !important;
        padding-bottom: 1px !important;
        display: flex;
        align-items: center;
    }

        .price-section-grid .mud-grid-item:nth-child(odd) {
            justify-content: flex-start;
        }

        .price-section-grid .mud-grid-item:nth-child(even) {
            justify-content: flex-end;
        }

    .price-section-grid .mud-input-control {
        margin-top: -6px !important;
        margin-bottom: -6px !important;
        width: 100%;
    }

    .price-section-grid .mud-input-slot {
        font-size: var(--mud-typography-caption-size);
    }

    .price-section-grid input.mud-input-text {
        padding-left: 2px !important;
        padding-right: 2px !important;
        text-align: left !important;
        direction: ltr !important;
    }

    .price-section-grid .mud-typography-caption {
        white-space: nowrap;
        text-align: left;
        direction: ltr;
        width: 100%;
        margin-top: 0px;
    }

    .price-section-grid .mud-grid-item:nth-child(odd) .mud-typography-caption {
        /* استایل‌های موجود شما */
        text-align: right !important;
        direction: rtl !important;
        width: auto;
        /* اضافه کردن این خط برای تنظیم دقیق */
        margin-bottom: -35px; /* این مقدار ممکن است نیاز به تنظیم دقیق‌تر داشته باشد */
    }


    .dense-numeric.mud-input-control .mud-input-control-input-container .mud-input-slot {
        height: 30px;
    }
</style>