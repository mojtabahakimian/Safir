@implements IDisposable
@using Safir.Shared.Models.Kala
@using System.Globalization
@using MudBlazor
@using Safir.Client.Services
@using System.Timers;

@inject ItemGroupApiService ItemService
@inject ISnackbar Snackbar
@inject ShoppingCartService CartService

<MudCard Outlined="true" Class="ma-1 item-card">

    <div class="image-container">
        @if (Item?.ImageExists == true)
        {
            <img src="@($"api/items/image/{Item.CODE}")" alt="@Item.NAME" class="item-image" />
        }
        else
        {
            <div class="image-placeholder">
                <MudIcon Icon="@Icons.Material.Filled.Storefront" Size="Size.Large" />
                <MudText Typo="Typo.caption">(بدون تصویر)</MudText>
            </div>
        }
    </div>

    <MudCardContent Class="pa-2 flex-grow-1">

        <MudText Typo="Typo.body1" GutterBottom="true"
                 Style="min-height: 1.5em; overflow: hidden; text-align: center; font-weight: 500;">
            @(Item?.NAME ?? "نام کالا")
        </MudText>

        <MudDivider Class="my-1" />

        @if (AvailableUnits?.Any() == true)
        {
            <MudSelect T="int" Label="واحد" @bind-Value="_selectedVahedCode"
                       Variant="Variant.Outlined" Margin="Margin.Dense" Dense="true">
                @foreach (var unit in AvailableUnits)
                {
                    <MudSelectItem Value="@unit.CODE">@unit.NAMES</MudSelectItem>
                }
            </MudSelect>
        }
        else
        {
            <MudText Typo="Typo.caption">واحد: @(Item?.VahedName ?? "-")</MudText>
        }

        <MudGrid Spacing="1" Justify="Justify.SpaceBetween" Class="mt-2">
            <MudItem xs="6"><MudText Typo="Typo.caption">فی عمده:</MudText></MudItem>
            <MudItem xs="6" Class="d-flex justify-end">
                <MudText Typo="Typo.caption" Style="direction:ltr;">@FormatCurrency(Item?.MABL_F)</MudText>
            </MudItem>
            <MudItem xs="6"><MudText Typo="Typo.caption">فی خرده:</MudText></MudItem>
            <MudItem xs="6" Class="d-flex justify-end">
                <MudText Typo="Typo.caption" Style="direction:ltr;">@FormatCurrency(Item?.B_SEF)</MudText>
            </MudItem>
            <MudItem xs="6"><MudText Typo="Typo.caption">مصرف کننده:</MudText></MudItem>
            <MudItem xs="6" Class="d-flex justify-end">
                <MudText Typo="Typo.caption" Style="direction:ltr;">@FormatCurrency(Item?.MAX_M)</MudText>
            </MudItem>
        </MudGrid>

        <MudDivider Class="my-1" />

        <!-- موجودی با دکمه Refresh -->
        <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="1">
            <MudText Typo="Typo.caption" Color="@GetInventoryColor(_inventoryAmount)">
                موجودی: @_inventoryAmount?.ToString("N0", new CultureInfo("fa-IR"))
            </MudText>
            <MudIconButton Icon="@Icons.Material.Filled.Refresh" Size="Size.Small"
                           Disabled="_isFetchingInventory"
                           Title="بروزرسانی موجودی"
                           OnClick="FetchInventory" />
        </MudStack>

    </MudCardContent>

    <!-- دکمه‌های سبد -->
    <MudCardActions Style="display: flex; justify-content: center;" Class="pa-2 mt-auto">
        @if (_cartQuantity == 0)
        {
            <MudButton Style="width:100%;" Color="Color.Success"
                       Variant="Variant.Filled"
                       StartIcon="@Icons.Material.Filled.AddShoppingCart"
                       OnClick="AddFirstToCart">
                افزودن به سبد
            </MudButton>
        }
        else
        {
            <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="1" Class="cart-actions">
                <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Size="Size.Small" OnClick="RemoveFromCart" />
                @* <MudSpacer /> *@

                <div class="spacer"></div>

                <!-- دکمه‌ی کم کردن -->
                <MudIconButton Icon="@Icons.Material.Filled.Remove" Color="Color.Primary" Size="Size.Small" Disabled="_cartQuantity <= 1"
                @onmousedown="@(e => StartLongPress(false))"
                @onmouseup="StopLongPress"
                @onclick="() => ChangeQuantity(-1)" />

                <MudNumericField T="decimal" Class="quantity-input" HideSpinButtons="true"
                                 Value="_cartQuantity" ValueChanged="ApplyQuantity"
                                 Min="0" Max="9999" DebounceInterval="500" />

                <MudIconButton Icon="@Icons.Material.Filled.Add" Color="Color.Primary" Size="Size.Small"
                @onmousedown="@(e => StartLongPress(true))"
                @onmouseup="StopLongPress"
                @onclick="() => ChangeQuantity(+1)" />
            </MudStack>
        }
    </MudCardActions>
</MudCard>

@code {
    [Parameter, EditorRequired] public ItemDisplayDto Item { get; set; } = default!;
    [Parameter] public List<TCOD_VAHEDS>? AvailableUnits { get; set; }
    [Parameter] public EventCallback<(ItemDisplayDto Item, int Quantity, int SelectedUnitCode)> OnAddToCart { get; set; }

    private int _selectedVahedCode;
    private decimal _cartQuantity;
    private decimal? _inventoryAmount;
    private bool _isFetchingInventory;
    private bool _errorFetchingInventory;

    protected override async Task OnInitializedAsync()
    {
        CartService.CartChanged += HandleCartChanged;
        _selectedVahedCode = Item.VahedCode;
        UpdateCartQuantity();
        await FetchInventory();
    }

    private Timer? _longPressTimer;
    private bool _increment; // True == ‌زیاد کردن، False == کم کردن

    void ChangeQuantity(decimal delta)
    {
        var newVal = Math.Max(0, _cartQuantity + delta);
        ApplyQuantity(newVal);
    }

    void ApplyQuantity(decimal newQty)
    {
        if (newQty == _cartQuantity) return;

        _cartQuantity = newQty;

        if (_cartQuantity == 0)
            CartService.RemoveItem(Item.CODE, _selectedVahedCode);
        else
            CartService.UpdateQuantity(Item.CODE, _selectedVahedCode, _cartQuantity);

        StateHasChanged();
    }

    /* ---------- Long-press ---------- */
    void StartLongPress(bool inc)
    {
        _increment = inc;
        _longPressTimer = new Timer(500) { AutoReset = false };
        _longPressTimer.Elapsed += FirstLongPress;
        _longPressTimer.Start();
    }

    void StopLongPress()
    {
        _longPressTimer?.Stop();
        _longPressTimer?.Dispose();
        _longPressTimer = null;
    }

    void FirstLongPress(object? sender, ElapsedEventArgs e)
    {
        InvokeAsync(() => ChangeQuantity(_increment ? +10 : -10));
        _longPressTimer!.Elapsed -= FirstLongPress;
        _longPressTimer!.Elapsed += RepeatingLongPress;
        _longPressTimer!.Interval = 200;
        _longPressTimer!.Start();
    }

    void RepeatingLongPress(object? sender, ElapsedEventArgs e) => InvokeAsync(() => ChangeQuantity(_increment ? +10 : -10));

    private void UpdateCartQuantity() =>
        _cartQuantity = CartService.GetItemQuantity(Item.CODE, _selectedVahedCode);

    private void HandleCartChanged()
    {
        UpdateCartQuantity();
        InvokeAsync(StateHasChanged);
    }

    private async Task AddFirstToCart()
    {
        if (OnAddToCart.HasDelegate)
            await OnAddToCart.InvokeAsync((Item, 1, _selectedVahedCode));
    }

    private void RemoveFromCart()
    {
        CartService.RemoveItem(Item.CODE, _selectedVahedCode);
        UpdateCartQuantity();
    }

    private async Task FetchInventory()
    {
        if (_isFetchingInventory) return;
        _isFetchingInventory = true;
        _errorFetchingInventory = false;

        try
        {
            _inventoryAmount = await ItemService.GetItemInventoryAsync(Item.CODE);
        }
        catch
        {
            _errorFetchingInventory = true;
            _inventoryAmount = null;
        }
        finally
        {
            _isFetchingInventory = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private Color GetInventoryColor(decimal? amount)
    {
        if (!amount.HasValue) return Color.Default;
        if (amount < 10) return Color.Warning;
        return Color.Success;
    }

    private static string FormatCurrency(decimal? value) =>
        value.HasValue ? value.Value.ToString("N0", new CultureInfo("fa-IR")) : "--";

    public void Dispose() => CartService.CartChanged -= HandleCartChanged;
}

<style>

    .spacer {
        width: 16px;
    }

    .item-card {
        height: 100%;
        display: flex;
        flex-direction: column;
        transition: box-shadow .2s ease-in-out;
    }

        .item-card:hover {
            box-shadow: var(--mud-elevation-6);
        }

    .image-container {
        display: flex;
        justify-content: center;
        align-items: center;
        background: #f5f5f5;
        overflow: hidden;
        height: 150px;
    }

    .item-image {
        max-height: 100%;
        max-width: 100%;
        object-fit: contain;
        padding: 5px;
    }

    .image-placeholder {
        height: 100%;
        width: 100%;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        color: var(--mud-palette-text-secondary);
    }

    .cart-actions .mud-icon-button {
        margin-inline: 2px;
    }

    .quantity-input {
        width: 70px;
    }

        .quantity-input input {
            text-align: center;
        }

            .quantity-input input::-webkit-outer-spin-button,
            .quantity-input input::-webkit-inner-spin-button {
                -webkit-appearance: none;
                margin: 0;
            }

            .quantity-input input[type=number] {
                -moz-appearance: textfield;
            }
</style>