@implements IDisposable
@using Microsoft.AspNetCore.Authorization
@using Safir.Shared.Models.Kala
@using System.Globalization
@using MudBlazor
@using Safir.Client.Services
@using System.Timers
@using Microsoft.AspNetCore.Components
@using Safir.Client.Shared

@attribute [Authorize]

@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject ShoppingCartService CartService
@inject ILogger<ItemCard> Logger
@inject HttpClient Http

<MudCard Outlined="true" Class="ma-1 item-card">

    <div class="image-container">
        @if (Item?.ImageExists == true)
        {
            <img src="@($"api/items/image/{Item.CODE}")" alt="@Item.NAME" class="item-image" loading="lazy" />
        }
        else
        {
            <div class="image-placeholder">
                <MudIcon Icon="@Icons.Material.Filled.Storefront" Size="Size.Large" />
                <MudText Typo="Typo.caption">(بدون تصویر)</MudText>
            </div>
        }
    </div>

    <MudCardContent Class="pa-2 flex-grow-1">
        <MudText Typo="Typo.body1" GutterBottom="true" Style="min-height: 1.5em; overflow: hidden; text-align: center; font-weight: 500;">
            @(Item?.NAME ?? "نام کالا")
        </MudText>
        <MudText Typo="Typo.body1" GutterBottom="true" Style="min-height: 1.5em; overflow: hidden; text-align: center; font-weight: 500;">
            @(Item?.CODE ?? "کد کالا")
        </MudText>
        <MudDivider Class="my-1" />

        @if (_itemSpecificUnits?.Any() == true)
        {
            <MudSelect T="int" Label="واحد" @bind-Value="SelectedVahedCode"
                   Variant="Variant.Outlined" Margin="Margin.Dense" Dense="true"
                   Disabled="@(_cartQuantity > 0 && Item != null && CartService.GetCartItem(Item.CODE, SelectedVahedCode)?.Quantity > 0)">
                @foreach (var unit in _itemSpecificUnits)
                {
                    <MudSelectItem Value="@unit.VahedCode">@unit.VahedName</MudSelectItem>
                }
            </MudSelect>
        }
        else if (Item != null && !string.IsNullOrEmpty(Item.VahedName))
        {
            <MudText Typo="Typo.caption" Style="min-height: 48px; display:flex; align-items:center;">واحد: @Item.VahedName</MudText>
        }
        else
        {
            <MudText Typo="Typo.caption" Style="min-height: 48px; display:flex; align-items:center;">واحد: -</MudText>
        }

        <MudGrid Spacing="0" Justify="Justify.SpaceBetween" Class="mt-2 price-section-grid">
            <MudItem xs="7" Class="d-flex align-center justify-start pa-1">
                <MudText Typo="Typo.caption">مبلغ:</MudText>
                @if (!IsAzadPaymentSelected && !HasPriceInCurrentPriceList)
                {
                    <MudText Typo="Typo.caption" Style="color: #FF6D00; margin-right: 8px;">(فاقد مبلغ در اعلامیه)</MudText>
                }
            </MudItem>
            <MudItem xs="5" Class="d-flex align-center justify-end pa-1">
                <MudNumericField @bind-Value="EditableMablF" Label="" Placeholder="0"
                                 Variant="Variant.Text" Format="N0" Culture='_faCulture' HideSpinButtons="true"
                                 Immediate="true" DebounceInterval="500" OnDebounceIntervalElapsed="PriceOrDiscountChanged"
                                 Disabled="@(AnbarCode <= 0 || (_cartQuantity > 0 && Item != null && CartService.GetCartItem(Item.CODE, SelectedVahedCode)?.Quantity > 0))"
                                 ReadOnly="@(!IsAzadPaymentSelected)"
                                 Style="direction:ltr; width: 100%;" InputStyle="text-align: left;" Margin="Margin.Dense" Class="dense-numeric" />
            </MudItem>

            <MudItem xs="7" Class="d-flex align-center justify-start pa-1">
                <MudText Typo="Typo.caption">مصرف کننده:</MudText>
            </MudItem>
            <MudItem xs="5" Class="d-flex align-center justify-end pa-1">
                <MudTextField Value="@FormatCurrency(CalculatedMaxM)" ReadOnly="true"
                              Variant="Variant.Text" Margin="Margin.Dense" Class="dense-numeric"
                              Style="direction: ltr; width: 100%; " InputStyle="text-align: left;" />
            </MudItem>

            <MudItem xs="7" Class="d-flex align-center justify-start pa-1">
                <MudText Typo="Typo.caption">تخفیف (%):</MudText>
            </MudItem>
            <MudItem xs="5" Class="d-flex align-center justify-end pa-1">
                <MudNumericField @bind-Value="EditableNKOL" ReadOnly="@(!CanEditDiscount)"
                                 Label="" Placeholder="0"
                                 Variant="Variant.Text" Format="0.#" Culture='_faCulture' HideSpinButtons="true"
                                 Immediate="true" DebounceInterval="500" OnDebounceIntervalElapsed="PriceOrDiscountChanged"
                                 Min="0" Max="100" Disabled="@(AnbarCode <= 0 || (_cartQuantity > 0 && Item != null && CartService.GetCartItem(Item.CODE, SelectedVahedCode)?.Quantity > 0) )"
                                 Style="direction:ltr; width: 100%;" InputStyle="text-align: left;" Margin="Margin.Dense" Class="dense-numeric" />
            </MudItem>
        </MudGrid>

        <MudDivider Class="my-1" />

        @* <<< بخش اصلاح شده برای نمایش موجودی >>> *@
        <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="1">
            <MudText Typo="Typo.caption" Style="@GetInventoryStyle()">
                موجودی انبار: @(Item.CurrentInventory?.ToString("N0", _faCulture) ?? "N/A")
                @if (SelectedUnitInfo?.Nesbat != 1.0 && Item.CurrentInventory.HasValue && SelectedUnitInfo?.Nesbat > 0)
                {
                    <span> (@((Item.CurrentInventory.Value / (decimal)SelectedUnitInfo.Nesbat).ToString("N1", _faCulture)) @SelectedUnitInfo.VahedName)</span>
                }
                @if (Item.MinimumInventory > 0)
                {
                    <span style="font-size: smaller;"> (حد: @Item.MinimumInventory?.ToString("N0", _faCulture))</span>
                }
            </MudText>
            @* دکمه رفرش موجودی برای یک آیتم حذف شده است *@
        </MudStack>
    </MudCardContent>

    <MudCardActions Style="display: flex; justify-content: center;" Class="pa-2 mt-auto">
        @if (_cartQuantity == 0)
        {
            <MudButton Style="width:100%;" Color="Color.Success"
                   Variant="Variant.Filled"
                   StartIcon="@Icons.Material.Filled.AddShoppingCart"
                   OnClick="@(() => ProcessCartAction(1, true))"
                   Disabled="@(AnbarCode <= 0 || _itemSpecificUnits?.Any() != true || SelectedUnitInfo == null || !HeadersValid)">
                افزودن به سبد
            </MudButton>
        }
        else
        {
            <div class="cart-quantity-container">
                <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Size="Size.Small" OnClick="RemoveFromCartAsync" Title="حذف از سبد" Class="cart-delete-btn" />
                <MudPaper Class="cart-quantity-box" Elevation="3">
                    <MudIconButton Icon="@(Icons.Material.Filled.Remove)"
                               Color="@(_cartQuantity==1 ? Color.Error : Color.Primary)" Size="Size.Small" Class="qty-btn"
                               Title="@(_cartQuantity==1 ? "حذف از سبد" : "کاهش")"
                               @onmousedown="@(e => StartLongPress(false))" @onmouseup="StopLongPress" @onmouseleave="StopLongPress"
                               OnClick="@(() => ProcessCartAction(_cartQuantity - 1, false))" />
                    <MudNumericField Class="quantity-input" T="decimal" HideSpinButtons="true" Variant="Variant.Outlined"
                                 Value="_cartQuantity" ValueChanged="HandleNumericFieldChange"
                                 Min="0" Max="9999" DebounceInterval="700" Disabled="@(AnbarCode <= 0)" />
                    <MudIconButton Icon="@Icons.Material.Filled.Add" Color="Color.Success" Size="Size.Small" Class="qty-btn"
                               Title="افزایش"
                               @onmousedown="@(e => StartLongPress(true))" @onmouseup="StopLongPress" @onmouseleave="StopLongPress"
                               OnClick="@(() => ProcessCartAction(_cartQuantity + 1, false))" />
                </MudPaper>
            </div>
        }
    </MudCardActions>
</MudCard>

@code {
    [Parameter, EditorRequired] public ItemDisplayDto Item { get; set; } = default!;
    [Parameter] public int AnbarCode { get; set; }
    [Parameter] public bool HeadersValid { get; set; }
    [Parameter] public bool IsAzadPaymentSelected { get; set; }
    [Parameter] public bool CanEditDiscount { get; set; } = true;
    [Parameter] public decimal? PriceFromPriceList { get; set; }
    [Parameter] public bool HasPriceInCurrentPriceList { get; set; }

    private List<UnitInfo> _itemSpecificUnits = new();
    private int _selectedVahedCodeField;
    private decimal _cartQuantity;
    private Timer? _longPressTimer;
    private bool _increment;

    private decimal? EditableMablF { get; set; }
    private double? EditableNKOL { get; set; }

    private static readonly CultureInfo _faCulture = new("fa-IR");
    private string? _previousItemCode;

    private UnitInfo? SelectedUnitInfo => _itemSpecificUnits.FirstOrDefault(u => u.VahedCode == _selectedVahedCodeField);
    private decimal? CalculatedMaxM => Item?.MAX_M.HasValue == true && SelectedUnitInfo?.Nesbat > 0
        ? Item.MAX_M.Value * (decimal)SelectedUnitInfo.Nesbat
        : Item?.MAX_M;

    private int SelectedVahedCode
    {
        get => _selectedVahedCodeField;
        set
        {
            if (_selectedVahedCodeField != value)
            {
                var currentCartItem = Item != null ? CartService.GetCartItem(Item.CODE, _selectedVahedCodeField) : null;
                if (currentCartItem != null && currentCartItem.Quantity > 0)
                {
                    InvokeAsync(() => CartService.RemoveItemAsync(Item!.CODE, _selectedVahedCodeField));
                    Snackbar.Add("کالا با واحد قبلی از سبد حذف شد. با واحد جدید اضافه کنید.", Severity.Info);
                }
                _selectedVahedCodeField = value;
                UpdateDisplayPricesAndDiscountBasedOnUnitOrCart();
                UpdateCartQuantity();
                InvokeAsync(StateHasChanged);
            }
        }
    }

    protected override void OnInitialized()
    {
        CartService.CartChanged += HandleCartChanged;
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Item == null) return;

        bool itemJustChanged = Item.CODE != _previousItemCode;

        if (itemJustChanged)
        {
            _selectedVahedCodeField = 0;
            _cartQuantity = 0;
            await LoadItemSpecificUnitsAsync();
            if (_itemSpecificUnits.Any())
            {
                _selectedVahedCodeField = _itemSpecificUnits.FirstOrDefault(u => u.VahedCode == Item.VahedCode)?.VahedCode ?? _itemSpecificUnits.First().VahedCode;
            }
        }

        UpdateDisplayPricesAndDiscountBasedOnUnitOrCart();
        UpdateCartQuantity();
        _previousItemCode = Item.CODE;
    }

    public void Dispose()
    {
        CartService.CartChanged -= HandleCartChanged;
        StopLongPress();
        _longPressTimer?.Dispose();
    }

    private async Task LoadItemSpecificUnitsAsync()
    {
        if (string.IsNullOrEmpty(Item?.CODE)) { _itemSpecificUnits.Clear(); return; }
        try
        {
            _itemSpecificUnits = await Http.GetFromJsonAsync<List<UnitInfo>>($"api/Items/{Item.CODE}/units") ?? new List<UnitInfo>();
            if (!_itemSpecificUnits.Any() && Item.VahedCode > 0 && !string.IsNullOrEmpty(Item.VahedName))
            {
                _itemSpecificUnits.Add(new UnitInfo { VahedCode = Item.VahedCode, VahedName = Item.VahedName, Nesbat = 1.0 });
            }
            foreach (var unit in _itemSpecificUnits) { if (unit.Nesbat <= 0) unit.Nesbat = 1.0; }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading units for item {ItemCode}", Item.CODE);
            _itemSpecificUnits.Clear();
            if (Item.VahedCode > 0 && !string.IsNullOrEmpty(Item.VahedName))
            {
                _itemSpecificUnits.Add(new UnitInfo { VahedCode = Item.VahedCode, VahedName = Item.VahedName, Nesbat = 1.0 });
            }
            Snackbar.Add("خطا در دریافت اطلاعات واحدها.", Severity.Error);
        }
    }

    private void UpdateDisplayPricesAndDiscountBasedOnUnitOrCart()
    {
        if (Item == null) return;
        var cartItem = CartService.GetCartItem(Item.CODE, SelectedVahedCode);
        if (cartItem != null)
        {
            EditableMablF = cartItem.PricePerUnit;
            EditableNKOL = cartItem.DiscountPercent ?? 0;
        }
        else
        {
            var unitNesbat = (decimal)(SelectedUnitInfo?.Nesbat ?? 1.0);
            EditableMablF = (Item.PriceAfterHeaderDiscounts ?? Item.MABL_F) * unitNesbat;
            EditableNKOL = 0;
        }
    }

    private async Task ProcessCartAction(decimal requestedQuantity, bool isInitialAdd)
    {
        if (Item == null || SelectedUnitInfo == null || AnbarCode <= 0) return;
        if (requestedQuantity <= 0) { if (!isInitialAdd) await RemoveFromCartAsync(); return; }

        decimal requestedQtyInBase = requestedQuantity * (decimal)SelectedUnitInfo.Nesbat;
        decimal currentInventory = Item.CurrentInventory ?? 0;
        decimal minInventory = Item.MinimumInventory ?? 0;

        if (currentInventory - requestedQtyInBase < minInventory)
        {
            var options = new DialogOptions { CloseButton = false, MaxWidth = MaxWidth.ExtraSmall };
            var parameters = new DialogParameters
                {
                    ["Title"] = "کمبود موجودی",
                    ["ContentText"] = $"موجودی برای فروش این تعداد کافی نیست. (موجودی: {currentInventory:N0}) آیا مایل به ادامه هستید؟",
                    ["ConfirmButtonText"] = "اضافه کن",
                    ["CancelButtonText"] = "منصرف شدم"
                };
            var dialog = DialogService.Show<ConfirmDialog>(parameters["Title"]?.ToString()!, parameters, options);
            var result = await dialog.Result;
            if (result.Cancelled || !(result.Data is bool confirmation && confirmation)) return;
        }

        await CartService.AddItemAsync(
            Item,
            requestedQuantity,
            SelectedUnitInfo.VahedCode,
            _itemSpecificUnits,
            AnbarCode,
            EditableMablF ?? 0,
            EditableNKOL ?? 0
        );
    }

    private void HandleCartChanged() => InvokeAsync(() =>
    {
        UpdateCartQuantity();
        UpdateDisplayPricesAndDiscountBasedOnUnitOrCart();
        StateHasChanged();
    });

    private void UpdateCartQuantity() => _cartQuantity = Item != null ? CartService.GetItemQuantity(Item.CODE, SelectedVahedCode) : 0;

    private async Task RemoveFromCartAsync() => await CartService.RemoveItemAsync(Item.CODE, SelectedVahedCode);

    private async Task PriceOrDiscountChanged()
    {
        // فقط زمانی سبد خرید را آپدیت کن که آیتم از قبل در سبد بوده باشد
        if (_cartQuantity > 0)
        {
            await ProcessCartAction(_cartQuantity, false);
        }
    }

    // Event handler for when the numeric quantity field changes (after debounce)
    private async Task HandleNumericFieldChange(decimal newQuantity) => await ProcessCartAction(newQuantity, false);


    // --- Long Press Logic (Simplified and potentially safer) ---
    void StartLongPress(bool inc)
    {
        if (AnbarCode <= 0 || Item == null) return;
        _increment = inc;
        _longPressTimer?.Dispose(); // Dispose previous timer if any
        _longPressTimer = new Timer(400); // Slightly shorter initial delay
        _longPressTimer.Elapsed += HandleFirstLongPressTick;
        _longPressTimer.AutoReset = false;
        _longPressTimer.Start();
    }

    void StopLongPress()
    {
        _longPressTimer?.Stop();
        _longPressTimer?.Dispose();
        _longPressTimer = null;
    }

    async void HandleFirstLongPressTick(object? sender, ElapsedEventArgs e)
    {
        if (_longPressTimer == null) return; // Avoid race condition if stopped
        await HandleLongPressAction(); // Perform first action

        if (_longPressTimer == null) return; // Check again
        _longPressTimer.Elapsed -= HandleFirstLongPressTick;
        _longPressTimer.Elapsed += HandleRepeatingLongPressTick;
        _longPressTimer.Interval = 100; // Faster repeat
        _longPressTimer.AutoReset = true;
        _longPressTimer.Start();
    }

    async void HandleRepeatingLongPressTick(object? sender, ElapsedEventArgs e)
    {
        if (_longPressTimer == null) return;
        await HandleLongPressAction(); // Perform subsequent actions
    }

    // Centralized method to handle the actual quantity change during long press
    async Task HandleLongPressAction()
    {
        var quantityChange = _increment ? 10m : -10m;
        var newQuantity = _cartQuantity + quantityChange;

        if (newQuantity < 0) newQuantity = 0; // Don't go below zero
        if (newQuantity == 0 && !_increment) StopLongPress(); // Stop timer if reducing to zero

        if (newQuantity <= 9999) // Check max limit if applicable
        {
            await InvokeAsync(() => ProcessCartAction(newQuantity, false));
        }
        else
        {
            StopLongPress(); // Stop if max limit reached
        }

        if (newQuantity == 0 && !_increment) // Ensure timer stops *after* processing zero quantity
        {
            StopLongPress();
        }
    }


    // --- Helper Methods ---
    private string GetInventoryStyle()
    {
        if (Item?.CurrentInventory == null) return "color: var(--mud-palette-error); font-weight: bold;";
        decimal min = Item.MinimumInventory ?? 0;
        decimal current = Item.CurrentInventory.Value;
        if (current <= min) return "color: var(--mud-palette-error); font-weight: bold;";
        if (current < min * 1.2m && min > 0) return "color: var(--mud-palette-warning);";
        return "color: var(--mud-palette-success);";
    }

    private static string FormatCurrency(decimal? value) => value.HasValue ? value.Value.ToString("N0", _faCulture) : "--";
}

<style>
    /* STYLE SECTION FROM YOUR PREVIOUS CODE */
    .quantity-input .mud-input-outlined-border {
        border: none !important;
    }

    .quantity-input {
        width: 60px;
    }

        .quantity-input input {
            text-align: center !important;
            padding-left: 4px !important;
            padding-right: 4px !important;
        }

            .quantity-input input::-webkit-outer-spin-button, .quantity-input input::-webkit-inner-spin-button {
                -webkit-appearance: none;
                margin: 0;
            }

            .quantity-input input[type=number] {
                -moz-appearance: textfield;
            }

    .cart-quantity-container {
        display: flex;
        align-items: center;
        gap: 12px;
        margin-top: 8px;
    }

    .cart-quantity-box {
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 16px;
        box-shadow: 0 2px 8px rgba(60,60,60,0.10);
        background: #fff;
        padding: 4px 16px;
        min-width: 90px;
        min-height: 40px;
        gap: 8px;
    }

    .cart-quantity-value {
        font-size: 1.15rem;
        font-weight: 600;
        width: 28px;
        text-align: center;
        user-select: none;
    }

    .cart-delete-btn {
        margin-left: 4px;
        margin-right: 4px;
    }

    .spacer {
        width: 16px;
    }

    .item-card {
        height: 100%;
        display: flex;
        flex-direction: column;
        transition: box-shadow .2s ease-in-out;
    }

        .item-card:hover {
            box-shadow: var(--mud-elevation-6);
        }

    .image-container {
        display: flex;
        justify-content: center;
        align-items: center;
        background: #f5f5f5;
        overflow: hidden;
        height: 150px;
    }

    .item-image {
        max-height: 100%;
        max-width: 100%;
        object-fit: contain;
        padding: 5px;
    }

    .image-placeholder {
        height: 100%;
        width: 100%;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        color: var(--mud-palette-text-secondary);
    }

    .cart-actions .mud-icon-button {
        margin-inline: 2px;
    }

    .price-section-grid .mud-grid-item {
        padding-top: 1px !important;
        padding-bottom: 1px !important;
        display: flex;
        align-items: center;
    }

        .price-section-grid .mud-grid-item:nth-child(odd) {
            justify-content: flex-start;
        }

        .price-section-grid .mud-grid-item:nth-child(even) {
            justify-content: flex-end;
        }

    .price-section-grid .mud-input-control {
        margin-top: -6px !important;
        margin-bottom: -6px !important;
        width: 100%;
    }

    .price-section-grid .mud-input-slot {
        font-size: var(--mud-typography-caption-size);
    }

    .price-section-grid input.mud-input-text {
        padding-left: 2px !important;
        padding-right: 2px !important;
        text-align: left !important;
        direction: ltr !important;
    }

    .price-section-grid .mud-typography-caption {
        white-space: nowrap;
        text-align: left;
        direction: ltr;
        width: 100%;
        margin-top: 0px;
    }

    .price-section-grid .mud-grid-item:nth-child(odd) .mud-typography-caption {
        /* استایل‌های موجود شما */
        text-align: right !important;
        direction: rtl !important;
        width: auto;
        /* اضافه کردن این خط برای تنظیم دقیق */
        margin-bottom: -35px; /* این مقدار ممکن است نیاز به تنظیم دقیق‌تر داشته باشد */
    }


    .dense-numeric.mud-input-control .mud-input-control-input-container .mud-input-slot {
        height: 30px;
    }
</style>



