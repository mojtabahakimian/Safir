@page "/cart"
@attribute [Authorize]
@implements IDisposable

@using Microsoft.AspNetCore.Authorization
@using Safir.Client.Services
@using System.Globalization
@using Safir.Shared.Models.Kala
@using Safir.Shared.Models.Kharid
@using Safir.Shared.Utility

@inject ShoppingCartService CartService
@inject ProformaApiService ProformaApi
@inject ILogger<Cart> Logger
@inject NavigationManager NavManager
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject LookupApiService LookupService

<MudContainer MaxWidth="MaxWidth.Medium" Class="mt-6">
    <MudPaper Class="pa-4" Elevation="3">
        <MudText Typo="Typo.h5" GutterBottom="true">سبد سفارش</MudText>

        @if (CartService.CurrentCustomer != null)
        {
            <MudText Typo="Typo.h6" Color="Color.Primary" GutterBottom="true">
                مشتری: @CartService.CurrentCustomer.person (@CartService.CurrentCustomer.hes)
            </MudText>
            <MudDivider Class="mb-4" />

            @if (CartService.Items.Any())
            {
                <MudSimpleTable Hover="true" Dense="true" Class="mb-4">
                    <thead>
                        <tr>
                            <th>کالا</th>
                            <th>انبار</th>
                            <th>واحد</th>
                            <th>تعداد</th>
                            <th>قیمت واحد</th>
                            <th>تخفیف ٪</th>
                            <th>مبلغ تخفیف</th>
                            <th>قیمت کل</th> @* (Price after line discount) *@
                            <th></th> @* Delete button column *@
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in CartService.Items)
                        {
                            <tr>
                                <td>@item.ItemName</td>
                                <td>@GetAnbarName(item.AnbarCode)</td>
                                <td>@item.SelectedUnitName</td>
                                <td>@item.Quantity.ToString("N0")</td>
                                <td>@FormatCurrency(item.PricePerUnit)</td>
                                <td>@FormatPercentage(item.DiscountPercent)</td>
                                <td>@FormatCurrency(item.LineDiscountAmountCalculatedOnFullPrice)</td> @* <--- نمایش مبلغ تخفیف جدید *@
                                <td>@FormatCurrency(item.FinalRowPriceAfterLineDiscount)</td> @* <--- نمایش قیمت کل جدید *@
                                <td>
                                    <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                                   Color="Color.Error"
                                                   Size="Size.Small"
                                                   OnClick="@(() => RemoveItemFromCart(item))"
                                                   Title="حذف آیتم" />
                                </td>
                            </tr>
                        }
                    </tbody>
                    <tfoot>
                        <tr>
                            <td colspan="7" style="text-align: left; font-weight: bold;">جمع مبلغ قبل از تخفیف:</td>
                            <td style="font-weight: bold;">@FormatCurrency(CartService.GetTotalAmountBeforeDiscountConsideringNesbat())</td>
                            <td></td>
                        </tr>
                        <tr>
                            <td colspan="7" style="text-align: left; font-weight: bold;">جمع کل تخفیف :</td>
                            <td style="font-weight: bold;">@FormatCurrency(CartService.GetTotalLineDiscountAmount())</td>
                            <td></td>
                        </tr>
                        <tr>
                            <td colspan="7" style="text-align: left; font-weight: bold; color: green;">جمع کل نهایی (پس از تخفیف):</td>
                            <td style="font-weight: bold; color: green;">@FormatCurrency(CartService.GetFinalTotal())</td>
                            <td></td>
                        </tr>
                    </tfoot>
                </MudSimpleTable>

                @* Header Input Fields (Unchanged) *@
                <MudTextField @bind-Value="headerNotes" Label="ملاحظات سربرگ" Lines="3" Variant="Variant.Outlined" Class="mb-3" />
                <MudTextField @bind-Value="headerConditions" Label="شرح شرایط" Lines="2" Variant="Variant.Outlined" Class="mb-3" />
                <MudNumericField @bind-Value="headerShippingCost" Label="هزینه حمل/خدمات (ریال)" Variant="Variant.Outlined" Format="N0" Culture='new CultureInfo("fa-IR")' Class="mb-3" />
                @* <MudNumericField @bind-Value="headerTotalDiscount" Label="تخفیف کلی سربرگ" Variant="Variant.Outlined" Format="N0" Culture='new CultureInfo("fa-IR")' Class="mb-3" /> *@
                <MudCheckBox @bind-Checked="headerApplyVat"
                @onclick="ToggleApplyVat"
                             Label="محاسبه ارزش افزوده"
                             Color="Color.Primary"
                             Class="mb-3" />


                <MudDivider Class="my-4" />

                @* Action Buttons (Unchanged) *@
                <MudStack Row="true" Justify="Justify.SpaceBetween">
                    <MudButton Variant="Variant.Filled"
                               Color="Color.Error"
                               OnClick="ClearCart"
                               Disabled="@(!CartService.Items.Any())"
                               StartIcon="@Icons.Material.Filled.RemoveShoppingCart">
                        خالی کردن سبد
                    </MudButton>
                    <MudButton Variant="Variant.Filled"
                               Color="Color.Success"
                               OnClick="SaveProformaAsync"
                               Disabled="@(isSaving || CartService.CurrentCustomer == null || !CartService.Items.Any())"
                               StartIcon="@Icons.Material.Filled.Send">
                        @if (isSaving)
                        {
                            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                            <MudText Class="ms-2">در حال ذخیره...</MudText>
                        }
                        else
                        {
                            <MudText>ارسال و ثبت پیش فاکتور</MudText>
                        }
                    </MudButton>
                </MudStack>
            }
            else @* Cart is empty message (Unchanged) *@
            {
                <MudAlert Severity="Severity.Info">سبد سفارش شما خالی است.</MudAlert>
                <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick='() => NavManager.NavigateTo("/item-groups")' Class="mt-4">بازگشت به لیست کالاها</MudButton>
            }
        }
        else @* No customer selected message (Unchanged) *@
        {
            <MudAlert Severity="Severity.Warning">هنوز مشتری برای ثبت سفارش انتخاب نشده است.</MudAlert>
            <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick='() => NavManager.NavigateTo("/visitor-customers")' Class="mt-4">انتخاب مشتری</MudButton>
        }
    </MudPaper>
</MudContainer>


@code {
    // Private fields
    private bool isSaving = false;
    private string? headerNotes;
    private string? headerConditions;
    private decimal? headerShippingCost;
    private decimal? headerTotalDiscount; // این فیلد برای تخفیف کلی سربرگ است و جدا از تخفیف ردیف‌هاست
    private bool headerApplyVat = false;
    private List<TCOD_ANBAR>? _anbarList;

    private void ToggleApplyVat()
    {
        headerApplyVat = !headerApplyVat;
        Logger.LogInformation("ToggleApplyVat executed. New value: {VatValue}", headerApplyVat);
        StateHasChanged(); // Explicitly call StateHasChanged after manual update
    }


    // Lifecycle methods
    private bool _isAnbarListLoading = true; // <--- فلگ جدید

    protected override async Task OnInitializedAsync()
    {
        CartService.CartChanged += OnCartChanged;
        _isAnbarListLoading = true; // <--- شروع بارگذاری
        await LoadAnbarListAsync();
        _isAnbarListLoading = false; // <--- پایان بارگذاری
        StateHasChanged(); // <--- اطمینان از رندر مجدد پس از بارگذاری انبارها
    }

    private async Task LoadAnbarListAsync()
    {
        // این متد بدون تغییر باقی می‌ماند
        _anbarList = await LookupService.GetAnbarhaAsync();
        if (_anbarList == null)
        {
            Snackbar.Add("خطا در بارگذاری لیست انبارها برای نمایش نام.", Severity.Warning);
            _anbarList = new List<TCOD_ANBAR>();
        }
    }

    private string GetAnbarName(int anbarCode)
    {
        if (_isAnbarListLoading)
        {
            return "..."; // <--- نمایش متن موقت هنگام بارگذاری
        }
        if (_anbarList == null || !_anbarList.Any())
        {
            return $"انبار {anbarCode}";
        }
        var anbar = _anbarList.FirstOrDefault(a => a.CODE == anbarCode);
        return anbar?.NAMES ?? $"کد: {anbarCode}";
    }

    public void Dispose()
    {
        CartService.CartChanged -= OnCartChanged;
    }

    private void OnCartChanged()
    {
        InvokeAsync(StateHasChanged);
    }

    // UI Interaction methods
    private async void RemoveItemFromCart(CartItem item)
    {
        if (item == null) return;
        await CartService.RemoveItemAsync(item.ItemCode, item.SelectedUnitCode);
        Snackbar.Add($"'{item.ItemName}' از سبد حذف شد.", Severity.Warning);
    }

    private async void ClearCart()
    {
        await CartService.ClearCartAsync();
        headerNotes = null;
        headerConditions = null;
        headerShippingCost = null;
        headerTotalDiscount = null;
        headerApplyVat = false;
        // StateHasChanged called via OnCartChanged
    }

    // --- SaveProformaAsync Method (DepartmentCode assignment removed) ---
    private async Task SaveProformaAsync()
    {
        if (isSaving || CartService.Items == null || !CartService.Items.Any()) return;
        if (CartService.CurrentCustomer == null || string.IsNullOrEmpty(CartService.CurrentCustomer.hes))
        {
            Snackbar.Add("مشتری انتخاب نشده یا سبد خرید خالی است.", Severity.Warning);
            return;
        }

        Logger.LogInformation("SaveProformaAsync called. Apply VAT checkbox value before sending: {ApplyVatValue}", headerApplyVat);

        isSaving = true;
        StateHasChanged();
        try
        {
            var request = new ProformaSaveRequestDto { /* ... DTO creation ... */ };
            // (DTO creation logic remains the same as previous correct version)
            request = new ProformaSaveRequestDto
                {
                    Header = new ProformaHeaderDto
                    {
                        CustomerHesCode = CartService.CurrentCustomer.hes,
                        Date = CL_Tarikh.GetCurrentPersianDateAsLong(),
                        Notes = headerNotes,
                        Conditions = headerConditions,
                        CustomerKindCode = null,
                        PaymentTermId = null,
                        AgreedDuration = null,
                        PriceListId = null,
                        DiscountListId = null,
                        ApplyVat = headerApplyVat,
                        CalculateAward = false, // این فیلد در هدر پیش‌فاکتور شما وجود دارد، مقداردهی شود
                        ShippingCost = headerShippingCost,
                        TotalDiscount = headerTotalDiscount // این تخفیف کلی سربرگ است
                    },
                    Lines = CartService.Items.Select(cartItem => new ProformaLineDto
                    {
                        AnbarCode = cartItem.AnbarCode,
                        ItemCode = cartItem.ItemCode,
                        SelectedUnitCode = cartItem.SelectedUnitCode,
                        Quantity = cartItem.Quantity,
                        PricePerUnit = cartItem.PricePerUnit, // قیمت واحد انتخابی
                        DiscountPercent = cartItem.DiscountPercent, // درصد تخفیف خطی
                        CashDiscountPercent = 0, // تخفیف نقدی (اگر دارید)
                        Notes = null // ملاحظات سطر (اگر دارید)
                    }).ToList(),
                    OverrideInventoryCheck = false
                };


            var initialResponse = await ProformaApi.SaveProformaAsync(request);

            if (!initialResponse.Success && initialResponse.RequiresInventoryConfirmation)
            {
                bool? userConfirmed = await DialogService.ShowMessageBox(
                    "تأیید ارسال", initialResponse.Message ?? "...", yesText: "بله", noText: "خیر");
                if (userConfirmed == true)
                {
                    request.OverrideInventoryCheck = true;
                    var finalResponse = await ProformaApi.SaveProformaAsync(request);
                    if (finalResponse.Success)
                    {
                        var successMsg = finalResponse.Message ?? $"پیش فاکتور {finalResponse.ProformaNumber} ثبت شد.";
                        // <<< --- MODIFIED: Show custom dialog instead of MessageBox --- >>>
                        ShowSuccessDialog(successMsg, finalResponse.ProformaNumber);
                      await  CartService.ClearCartAsync();
                    }
                    else { Snackbar.Add(finalResponse.Message ?? "...", Severity.Error); }
                }
                else { Snackbar.Add("لغو شد.", Severity.Info); }
            }
            else if (initialResponse.Success)
            {
                var successMsg = initialResponse.Message ?? $"پیش فاکتور {initialResponse.ProformaNumber} ثبت شد.";
                // <<< --- MODIFIED: Show custom dialog instead of MessageBox --- >>>
                ShowSuccessDialog(successMsg, initialResponse.ProformaNumber);
               await CartService.ClearCartAsync();
            }
            else { Snackbar.Add(initialResponse.Message ?? "...", Severity.Error); }
        }
        catch (Exception ex)
        {
            Logger?.LogError(ex, "Client error during SaveProformaAsync.");
            Snackbar.Add($"خطا: {ex.Message}", Severity.Error);
        }
        finally { isSaving = false; StateHasChanged(); }
    }
    // Helper methods
  

    // این متد دیگر لازم نیست چون ShowSuccessDialog جایگزین شده است
    // private async Task ShowSuccessMsg(string msg)
    // {
    //     await DialogService.ShowMessageBox(
    //         "ثبت موفق", // Title
    //         msg,
    //         yesText: "متوجه شدم"); // OK button text
    // }

    private string FormatCurrency(decimal? value)
    {
        return value?.ToString("N0", new CultureInfo("fa-IR")) ?? "0";
    }

    // Added Helper to format percentage display
    private string FormatPercentage(double? value)
    {
        return value?.ToString("0.#", CultureInfo.InvariantCulture) ?? "0"; // "N1" for one decimal place
    }

    // این متد برای نمایش دیالوگ موفقیت و دکمه چاپ است
    private void ShowSuccessDialog(string message, double? proformaNumber)
    {
        var parameters = new DialogParameters
            {
                ["ContentText"] = message,
                ["ProformaNumber"] = proformaNumber
            };
        // فرض بر اینکه ProformaSuccessDialog از قبل ایجاد شده و قابلیت دریافت ProformaNumber را دارد
        DialogService.Show<ProformaSuccessDialog>("ثبت موفق", parameters);
    }
}